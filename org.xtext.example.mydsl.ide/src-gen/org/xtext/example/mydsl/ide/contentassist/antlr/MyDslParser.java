/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFloat_literalAccess().getAlternatives(), "rule__Float_literal__Alternatives");
					put(grammarAccess.getImaginary_litAccess().getAlternatives_0(), "rule__Imaginary_lit__Alternatives_0");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getTypeNameLinhaAccess().getAlternatives(), "rule__TypeNameLinha__Alternatives");
					put(grammarAccess.getTypeLitAccess().getAlternatives(), "rule__TypeLit__Alternatives");
					put(grammarAccess.getTypeLitLinhaAccess().getAlternatives(), "rule__TypeLitLinha__Alternatives");
					put(grammarAccess.getFieldDeclAccess().getAlternatives_0(), "rule__FieldDecl__Alternatives_0");
					put(grammarAccess.getResultAccess().getAlternatives(), "rule__Result__Alternatives");
					put(grammarAccess.getMethodSpecAccess().getAlternatives(), "rule__MethodSpec__Alternatives");
					put(grammarAccess.getChannelTypeAccess().getAlternatives_0(), "rule__ChannelType__Alternatives_0");
					put(grammarAccess.getChannelTypeLinhaAccess().getAlternatives(), "rule__ChannelTypeLinha__Alternatives");
					put(grammarAccess.getExpression_LinhaAccess().getAlternatives(), "rule__Expression_Linha__Alternatives");
					put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
					put(grammarAccess.getBinary_opAccess().getAlternatives(), "rule__Binary_op__Alternatives");
					put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
					put(grammarAccess.getPrimaryExprFatFatFatFatFatFatAccess().getAlternatives(), "rule__PrimaryExprFatFatFatFatFatFat__Alternatives");
					put(grammarAccess.getPrimaryExprFatFatFatFatFatAccess().getAlternatives(), "rule__PrimaryExprFatFatFatFatFat__Alternatives");
					put(grammarAccess.getPrimaryExprFatFatFatFatAccess().getAlternatives(), "rule__PrimaryExprFatFatFatFat__Alternatives");
					put(grammarAccess.getPrimaryExprFatFatFatAccess().getAlternatives(), "rule__PrimaryExprFatFatFat__Alternatives");
					put(grammarAccess.getNameLinhaAccess().getAlternatives(), "rule__NameLinha__Alternatives");
					put(grammarAccess.getPrimaryExprFatFatAccess().getAlternatives(), "rule__PrimaryExprFatFat__Alternatives");
					put(grammarAccess.getPrimaryExprFatAccess().getAlternatives(), "rule__PrimaryExprFat__Alternatives");
					put(grammarAccess.getPrimaryExprLinhaAccess().getAlternatives(), "rule__PrimaryExprLinha__Alternatives");
					put(grammarAccess.getPrimaryExprLinhaLinhaAccess().getAlternatives(), "rule__PrimaryExprLinhaLinha__Alternatives");
					put(grammarAccess.getPrimaryExprLinhaLinhaLinhaAccess().getAlternatives(), "rule__PrimaryExprLinhaLinhaLinha__Alternatives");
					put(grammarAccess.getPrimaryExprLinhaLinhaLinhaLinhaAccess().getAlternatives(), "rule__PrimaryExprLinhaLinhaLinhaLinha__Alternatives");
					put(grammarAccess.getSliceLinhaAccess().getAlternatives(), "rule__SliceLinha__Alternatives");
					put(grammarAccess.getArgumentsAccess().getAlternatives_1_0(), "rule__Arguments__Alternatives_1_0");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getForStmtLinhaAccess().getAlternatives(), "rule__ForStmtLinha__Alternatives");
					put(grammarAccess.getForStmtLinhaAccess().getAlternatives_0_0(), "rule__ForStmtLinha__Alternatives_0_0");
					put(grammarAccess.getForStmtLinhaAccess().getAlternatives_0_4(), "rule__ForStmtLinha__Alternatives_0_4");
					put(grammarAccess.getCommCaseAccess().getAlternatives(), "rule__CommCase__Alternatives");
					put(grammarAccess.getCommCaseLinhaAccess().getAlternatives(), "rule__CommCaseLinha__Alternatives");
					put(grammarAccess.getCommCaseLinhaAccess().getAlternatives_1_0(), "rule__CommCaseLinha__Alternatives_1_0");
					put(grammarAccess.getSwitchStmtLinhaAccess().getAlternatives(), "rule__SwitchStmtLinha__Alternatives");
					put(grammarAccess.getTypeSwitchCaseAccess().getAlternatives(), "rule__TypeSwitchCase__Alternatives");
					put(grammarAccess.getExprSwitchCaseAccess().getAlternatives(), "rule__ExprSwitchCase__Alternatives");
					put(grammarAccess.getIfStmtAccess().getAlternatives_4_1(), "rule__IfStmt__Alternatives_4_1");
					put(grammarAccess.getSimpleStmtAccess().getAlternatives(), "rule__SimpleStmt__Alternatives");
					put(grammarAccess.getSimpleStmtLinhaAccess().getAlternatives(), "rule__SimpleStmtLinha__Alternatives");
					put(grammarAccess.getSimpleStmtLinhaAccess().getAlternatives_1(), "rule__SimpleStmtLinha__Alternatives_1");
					put(grammarAccess.getAssign_opAccess().getAlternatives_0(), "rule__Assign_op__Alternatives_0");
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getTopLevelDeclAccess().getAlternatives(), "rule__TopLevelDecl__Alternatives");
					put(grammarAccess.getConstDeclAccess().getAlternatives_1(), "rule__ConstDecl__Alternatives_1");
					put(grammarAccess.getTypeDeclAccess().getAlternatives_1(), "rule__TypeDecl__Alternatives_1");
					put(grammarAccess.getTypeSpecAccess().getAlternatives(), "rule__TypeSpec__Alternatives");
					put(grammarAccess.getVarDeclAccess().getAlternatives_1(), "rule__VarDecl__Alternatives_1");
					put(grammarAccess.getVarSpecAccess().getAlternatives_1(), "rule__VarSpec__Alternatives_1");
					put(grammarAccess.getBasicLitAccess().getAlternatives(), "rule__BasicLit__Alternatives");
					put(grammarAccess.getKeyAccess().getAlternatives(), "rule__Key__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getImportDeclAccess().getAlternatives_1(), "rule__ImportDecl__Alternatives_1");
					put(grammarAccess.getImportSpecAccess().getAlternatives_0(), "rule__ImportSpec__Alternatives_0");
					put(grammarAccess.getFloat_literalAccess().getGroup_0(), "rule__Float_literal__Group_0__0");
					put(grammarAccess.getFloat_literalAccess().getGroup_1(), "rule__Float_literal__Group_1__0");
					put(grammarAccess.getFloat_literalAccess().getGroup_2(), "rule__Float_literal__Group_2__0");
					put(grammarAccess.getImaginary_litAccess().getGroup(), "rule__Imaginary_lit__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
					put(grammarAccess.getTypeNameAccess().getGroup(), "rule__TypeName__Group__0");
					put(grammarAccess.getTypeNameLinhaAccess().getGroup_0(), "rule__TypeNameLinha__Group_0__0");
					put(grammarAccess.getTypeLitAccess().getGroup_0(), "rule__TypeLit__Group_0__0");
					put(grammarAccess.getTypeLitLinhaAccess().getGroup_0(), "rule__TypeLitLinha__Group_0__0");
					put(grammarAccess.getTypeLitLinhaAccess().getGroup_1(), "rule__TypeLitLinha__Group_1__0");
					put(grammarAccess.getStructTypeAccess().getGroup(), "rule__StructType__Group__0");
					put(grammarAccess.getStructTypeAccess().getGroup_2(), "rule__StructType__Group_2__0");
					put(grammarAccess.getFieldDeclAccess().getGroup(), "rule__FieldDecl__Group__0");
					put(grammarAccess.getFieldDeclAccess().getGroup_0_0(), "rule__FieldDecl__Group_0_0__0");
					put(grammarAccess.getEmbeddedFieldAccess().getGroup(), "rule__EmbeddedField__Group__0");
					put(grammarAccess.getPointerTypeAccess().getGroup(), "rule__PointerType__Group__0");
					put(grammarAccess.getFunctionTypeAccess().getGroup(), "rule__FunctionType__Group__0");
					put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
					put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
					put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
					put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
					put(grammarAccess.getParameterDeclAccess().getGroup(), "rule__ParameterDecl__Group__0");
					put(grammarAccess.getInterfaceTypeAccess().getGroup(), "rule__InterfaceType__Group__0");
					put(grammarAccess.getInterfaceTypeAccess().getGroup_2(), "rule__InterfaceType__Group_2__0");
					put(grammarAccess.getMethodSpecAccess().getGroup_0(), "rule__MethodSpec__Group_0__0");
					put(grammarAccess.getMapTypeAccess().getGroup(), "rule__MapType__Group__0");
					put(grammarAccess.getChannelTypeAccess().getGroup(), "rule__ChannelType__Group__0");
					put(grammarAccess.getChannelTypeAccess().getGroup_0_0(), "rule__ChannelType__Group_0_0__0");
					put(grammarAccess.getChannelTypeAccess().getGroup_0_1(), "rule__ChannelType__Group_0_1__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpression_LinhaAccess().getGroup_0(), "rule__Expression_Linha__Group_0__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_1(), "rule__UnaryExpr__Group_1__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_0(), "rule__PrimaryExpr__Group_0__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_1(), "rule__PrimaryExpr__Group_1__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_2(), "rule__PrimaryExpr__Group_2__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_3(), "rule__PrimaryExpr__Group_3__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_4(), "rule__PrimaryExpr__Group_4__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_5(), "rule__PrimaryExpr__Group_5__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_6(), "rule__PrimaryExpr__Group_6__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_7(), "rule__PrimaryExpr__Group_7__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_8(), "rule__PrimaryExpr__Group_8__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_9(), "rule__PrimaryExpr__Group_9__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_10(), "rule__PrimaryExpr__Group_10__0");
					put(grammarAccess.getNameAccess().getGroup(), "rule__Name__Group__0");
					put(grammarAccess.getNameLinhaAccess().getGroup_0(), "rule__NameLinha__Group_0__0");
					put(grammarAccess.getPrimaryExprFatFatAccess().getGroup_0(), "rule__PrimaryExprFatFat__Group_0__0");
					put(grammarAccess.getPrimaryExprFatFatAccess().getGroup_1(), "rule__PrimaryExprFatFat__Group_1__0");
					put(grammarAccess.getPrimaryExprFatAccess().getGroup_0(), "rule__PrimaryExprFat__Group_0__0");
					put(grammarAccess.getPrimaryExprFatAccess().getGroup_1(), "rule__PrimaryExprFat__Group_1__0");
					put(grammarAccess.getPrimaryExprLinhaAccess().getGroup_0(), "rule__PrimaryExprLinha__Group_0__0");
					put(grammarAccess.getPrimaryExprLinhaAccess().getGroup_1(), "rule__PrimaryExprLinha__Group_1__0");
					put(grammarAccess.getPrimaryExprLinhaAccess().getGroup_2(), "rule__PrimaryExprLinha__Group_2__0");
					put(grammarAccess.getPrimaryExprLinhaLinhaAccess().getGroup_1(), "rule__PrimaryExprLinhaLinha__Group_1__0");
					put(grammarAccess.getPrimaryExprLinhaLinhaLinhaAccess().getGroup_0(), "rule__PrimaryExprLinhaLinhaLinha__Group_0__0");
					put(grammarAccess.getPrimaryExprLinhaLinhaLinhaAccess().getGroup_1(), "rule__PrimaryExprLinhaLinhaLinha__Group_1__0");
					put(grammarAccess.getPrimaryExprLinhaLinhaLinhaLinhaAccess().getGroup_1(), "rule__PrimaryExprLinhaLinhaLinhaLinha__Group_1__0");
					put(grammarAccess.getSliceLinhaAccess().getGroup_0(), "rule__SliceLinha__Group_0__0");
					put(grammarAccess.getSliceLinhaAccess().getGroup_1(), "rule__SliceLinha__Group_1__0");
					put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
					put(grammarAccess.getArgumentsAccess().getGroup_1(), "rule__Arguments__Group_1__0");
					put(grammarAccess.getArgumentsAccess().getGroup_1_0_1(), "rule__Arguments__Group_1_0_1__0");
					put(grammarAccess.getArgumentsAccess().getGroup_1_0_1_1(), "rule__Arguments__Group_1_0_1_1__0");
					put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
					put(grammarAccess.getIdentifierListAccess().getGroup(), "rule__IdentifierList__Group__0");
					put(grammarAccess.getIdentifierListAccess().getGroup_1(), "rule__IdentifierList__Group_1__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getStatementListAccess().getGroup(), "rule__StatementList__Group__0");
					put(grammarAccess.getDeferStmtAccess().getGroup(), "rule__DeferStmt__Group__0");
					put(grammarAccess.getForStmtAccess().getGroup(), "rule__ForStmt__Group__0");
					put(grammarAccess.getForStmtAccess().getGroup_1(), "rule__ForStmt__Group_1__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0(), "rule__ForStmtLinha__Group_0__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_0_1(), "rule__ForStmtLinha__Group_0_0_1__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_0_1_0(), "rule__ForStmtLinha__Group_0_0_1_0__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_0_1_0_1(), "rule__ForStmtLinha__Group_0_0_1_0_1__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_0_1_2(), "rule__ForStmtLinha__Group_0_0_1_2__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_0_1_2_1(), "rule__ForStmtLinha__Group_0_0_1_2_1__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_0(), "rule__ForStmtLinha__Group_0_4_0__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_1(), "rule__ForStmtLinha__Group_0_4_1__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_1_0(), "rule__ForStmtLinha__Group_0_4_1_0__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_1_0_1(), "rule__ForStmtLinha__Group_0_4_1_0_1__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_1_2(), "rule__ForStmtLinha__Group_0_4_1_2__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_1_2_1(), "rule__ForStmtLinha__Group_0_4_1_2_1__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_2(), "rule__ForStmtLinha__Group_0_4_2__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_2_0(), "rule__ForStmtLinha__Group_0_4_2_0__0");
					put(grammarAccess.getForStmtLinhaAccess().getGroup_0_4_3(), "rule__ForStmtLinha__Group_0_4_3__0");
					put(grammarAccess.getSelectStmtAccess().getGroup(), "rule__SelectStmt__Group__0");
					put(grammarAccess.getCommClauseAccess().getGroup(), "rule__CommClause__Group__0");
					put(grammarAccess.getCommCaseAccess().getGroup_0(), "rule__CommCase__Group_0__0");
					put(grammarAccess.getCommCaseAccess().getGroup_0_1(), "rule__CommCase__Group_0_1__0");
					put(grammarAccess.getCommCaseLinhaAccess().getGroup_0(), "rule__CommCaseLinha__Group_0__0");
					put(grammarAccess.getCommCaseLinhaAccess().getGroup_1(), "rule__CommCaseLinha__Group_1__0");
					put(grammarAccess.getCommCaseLinhaAccess().getGroup_1_0_0(), "rule__CommCaseLinha__Group_1_0_0__0");
					put(grammarAccess.getCommCaseLinhaAccess().getGroup_1_0_0_0(), "rule__CommCaseLinha__Group_1_0_0_0__0");
					put(grammarAccess.getCommCaseLinhaAccess().getGroup_1_0_1(), "rule__CommCaseLinha__Group_1_0_1__0");
					put(grammarAccess.getSwitchStmtAccess().getGroup(), "rule__SwitchStmt__Group__0");
					put(grammarAccess.getSwitchStmtAccess().getGroup_1(), "rule__SwitchStmt__Group_1__0");
					put(grammarAccess.getSwitchStmtLinhaAccess().getGroup_0(), "rule__SwitchStmtLinha__Group_0__0");
					put(grammarAccess.getSwitchStmtLinhaAccess().getGroup_1(), "rule__SwitchStmtLinha__Group_1__0");
					put(grammarAccess.getTypeCaseClauseAccess().getGroup(), "rule__TypeCaseClause__Group__0");
					put(grammarAccess.getTypeSwitchCaseAccess().getGroup_0(), "rule__TypeSwitchCase__Group_0__0");
					put(grammarAccess.getTypeListAccess().getGroup(), "rule__TypeList__Group__0");
					put(grammarAccess.getTypeListAccess().getGroup_1(), "rule__TypeList__Group_1__0");
					put(grammarAccess.getTypeSwitchGuardAccess().getGroup(), "rule__TypeSwitchGuard__Group__0");
					put(grammarAccess.getTypeSwitchGuardAccess().getGroup_0(), "rule__TypeSwitchGuard__Group_0__0");
					put(grammarAccess.getExprCaseClauseAccess().getGroup(), "rule__ExprCaseClause__Group__0");
					put(grammarAccess.getExprSwitchCaseAccess().getGroup_0(), "rule__ExprSwitchCase__Group_0__0");
					put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
					put(grammarAccess.getIfStmtAccess().getGroup_1(), "rule__IfStmt__Group_1__0");
					put(grammarAccess.getIfStmtAccess().getGroup_4(), "rule__IfStmt__Group_4__0");
					put(grammarAccess.getGotoStmtAccess().getGroup(), "rule__GotoStmt__Group__0");
					put(grammarAccess.getContinueStmtAccess().getGroup(), "rule__ContinueStmt__Group__0");
					put(grammarAccess.getBreakStmtAccess().getGroup(), "rule__BreakStmt__Group__0");
					put(grammarAccess.getReturnStmtAccess().getGroup(), "rule__ReturnStmt__Group__0");
					put(grammarAccess.getGoStmtAccess().getGroup(), "rule__GoStmt__Group__0");
					put(grammarAccess.getSimpleStmtAccess().getGroup_0(), "rule__SimpleStmt__Group_0__0");
					put(grammarAccess.getSimpleStmtAccess().getGroup_1(), "rule__SimpleStmt__Group_1__0");
					put(grammarAccess.getSimpleStmtAccess().getGroup_1_0(), "rule__SimpleStmt__Group_1_0__0");
					put(grammarAccess.getSimpleStmtAccess().getGroup_1_0_1(), "rule__SimpleStmt__Group_1_0_1__0");
					put(grammarAccess.getSimpleStmtAccess().getGroup_1_2(), "rule__SimpleStmt__Group_1_2__0");
					put(grammarAccess.getSimpleStmtAccess().getGroup_1_2_1(), "rule__SimpleStmt__Group_1_2_1__0");
					put(grammarAccess.getSimpleStmtLinhaAccess().getGroup_0(), "rule__SimpleStmtLinha__Group_0__0");
					put(grammarAccess.getSimpleStmtLinhaAccess().getGroup_2(), "rule__SimpleStmtLinha__Group_2__0");
					put(grammarAccess.getSimpleStmtLinhaAccess().getGroup_2_0(), "rule__SimpleStmtLinha__Group_2_0__0");
					put(grammarAccess.getSimpleStmtLinhaAccess().getGroup_2_2(), "rule__SimpleStmtLinha__Group_2_2__0");
					put(grammarAccess.getSimpleStmtLinhaAccess().getGroup_2_2_1(), "rule__SimpleStmtLinha__Group_2_2_1__0");
					put(grammarAccess.getAssign_opAccess().getGroup(), "rule__Assign_op__Group__0");
					put(grammarAccess.getLabeledStmtAccess().getGroup(), "rule__LabeledStmt__Group__0");
					put(grammarAccess.getConstDeclAccess().getGroup(), "rule__ConstDecl__Group__0");
					put(grammarAccess.getConstDeclAccess().getGroup_1_1(), "rule__ConstDecl__Group_1_1__0");
					put(grammarAccess.getConstDeclAccess().getGroup_1_1_1(), "rule__ConstDecl__Group_1_1_1__0");
					put(grammarAccess.getConstSpecAccess().getGroup(), "rule__ConstSpec__Group__0");
					put(grammarAccess.getConstSpecAccess().getGroup_1(), "rule__ConstSpec__Group_1__0");
					put(grammarAccess.getTypeDeclAccess().getGroup(), "rule__TypeDecl__Group__0");
					put(grammarAccess.getTypeDeclAccess().getGroup_1_1(), "rule__TypeDecl__Group_1_1__0");
					put(grammarAccess.getTypeDeclAccess().getGroup_1_1_1(), "rule__TypeDecl__Group_1_1_1__0");
					put(grammarAccess.getAliasDeclAccess().getGroup(), "rule__AliasDecl__Group__0");
					put(grammarAccess.getTypeDefAccess().getGroup(), "rule__TypeDef__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup_1_1(), "rule__VarDecl__Group_1_1__0");
					put(grammarAccess.getVarDeclAccess().getGroup_1_1_1(), "rule__VarDecl__Group_1_1_1__0");
					put(grammarAccess.getVarSpecAccess().getGroup(), "rule__VarSpec__Group__0");
					put(grammarAccess.getVarSpecAccess().getGroup_1_0(), "rule__VarSpec__Group_1_0__0");
					put(grammarAccess.getVarSpecAccess().getGroup_1_0_1(), "rule__VarSpec__Group_1_0_1__0");
					put(grammarAccess.getVarSpecAccess().getGroup_1_1(), "rule__VarSpec__Group_1_1__0");
					put(grammarAccess.getFunctionDeclAccess().getGroup(), "rule__FunctionDecl__Group__0");
					put(grammarAccess.getMethodDeclAccess().getGroup(), "rule__MethodDecl__Group__0");
					put(grammarAccess.getLiteralValueAccess().getGroup(), "rule__LiteralValue__Group__0");
					put(grammarAccess.getLiteralValueAccess().getGroup_1(), "rule__LiteralValue__Group_1__0");
					put(grammarAccess.getElementListAccess().getGroup(), "rule__ElementList__Group__0");
					put(grammarAccess.getElementListAccess().getGroup_1(), "rule__ElementList__Group_1__0");
					put(grammarAccess.getKeyedElementAccess().getGroup(), "rule__KeyedElement__Group__0");
					put(grammarAccess.getKeyedElementAccess().getGroup_0(), "rule__KeyedElement__Group_0__0");
					put(grammarAccess.getKeyedElementAccess().getGroup_0_0(), "rule__KeyedElement__Group_0_0__0");
					put(grammarAccess.getSourceFileAccess().getGroup(), "rule__SourceFile__Group__0");
					put(grammarAccess.getSourceFileAccess().getGroup_2(), "rule__SourceFile__Group_2__0");
					put(grammarAccess.getSourceFileAccess().getGroup_3(), "rule__SourceFile__Group_3__0");
					put(grammarAccess.getPackageClauseAccess().getGroup(), "rule__PackageClause__Group__0");
					put(grammarAccess.getImportDeclAccess().getGroup(), "rule__ImportDecl__Group__0");
					put(grammarAccess.getImportDeclAccess().getGroup_1_1(), "rule__ImportDecl__Group_1_1__0");
					put(grammarAccess.getImportDeclAccess().getGroup_1_1_1(), "rule__ImportDecl__Group_1_1_1__0");
					put(grammarAccess.getImportSpecAccess().getGroup(), "rule__ImportSpec__Group__0");
					put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
