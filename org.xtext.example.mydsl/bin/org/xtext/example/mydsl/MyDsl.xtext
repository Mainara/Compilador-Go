grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

Model:
	greetings+=SourceFile*;


terminal NEWLINE:
	"\n" | "\r" | "\n\r"
;

terminal UNICODE_CHAR:
	"nao seei"
;

terminal LETTER:
	"a".."z" | "A" .."Z"| "_" 
;

terminal DECIMAL_DIGIT:
	"0".. "9"
;

terminal OCTAL_DIGIT:
	"0" .. "7"
;

terminal HEX_DIGIT:
	"0" .. "9" | "A" .. "F" | "a" .. "f"
;

terminal BREAK:
	"break"
;
terminal DEFAULT:
	"default"
;
//terminal FUNC:
	//"func"
//;
terminal INTERFACE:
	"interface"
;
terminal SELECT:
	"select"
;
terminal CASE:
	"case"
;
terminal DEFER:
	"defer"
;
terminal GO:
	"go"
;
terminal MAP:
	"map"
;
terminal STRUCT:
	"struct"
;
terminal CHAN:
	"chan"
;
terminal ELSE:
	"else"
;
terminal GOTO:
	"goto"
;
//terminal PACKAGE:
	//"package"
//;
terminal SWITCH:
	"switch"
;
//terminal CONST:
	//"const"
//;
terminal FALLTHROUGH:
	"fallthrough"
;
terminal IF:
	"if"
;
terminal RANGE:
	"range"
;
/*terminal TYPEKEYWORD:
	"type"
;*/
terminal CONTINUE:
	"continue"
;
terminal FOR:
	"for"
;
/*terminal IMPORT:
	"import"
;*/
terminal RETURN: 
	"return"
;
terminal VAR: 
	"var"
;
terminal IDENTIFIER:
	LETTER (LETTER|("0".."9"))*
;

terminal INT_LIT:
	( ('1'..'9') DECIMAL_DIGIT*)
	| "0" (OCTAL_DIGIT)*
    | ( '0' ('x'|"X") HEX_DIGIT+)
;

FLOAT_LIT:
	dECIMALS = DECIMALS "." (dECIMALS1 = DECIMALS )? ( eXPONENT = EXPONENT )? |
    dECIMALS = DECIMALS eXPONENT = EXPONENT |
   "." dECIMALS = DECIMALS ( eXPONENT = EXPONENT )? 
;

terminal DECIMALS:
     INT
;

terminal EXPONENT:
    ("e"|"E")('+'|'-')? DECIMALS
;

IMAGINARY_LIT:
	(dECIMALS = DECIMALS | fLOAT_LIT = FLOAT_LIT) "i" 
;

terminal RUNE_LIT:
	 "'" ( UNICODE_VALUE | BYTE_VALUE ) "'" ;

terminal UNICODE_VALUE:
	UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR
;

terminal BYTE_VALUE:
	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE
;

terminal OCTAL_BYTE_VALUE:
	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT
;

terminal HEX_BYTE_VALUE:
	'\\' "x" HEX_DIGIT HEX_DIGIT
;
terminal LITTLE_U_VALUE:
	'\\' "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
;
terminal BIG_U_VALUE:
	'\\' "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
	
;
terminal ESCAPED_CHAR:
	  '\\' ("a" | "b" | "f" | "n" | "r" | "t" | "v"  | '\\' | "'" | '"')
;

terminal STRING_LIT:
	RAW_STRING_LIT | INTERPRETED_STRING_LIT
;

terminal RAW_STRING_LIT:
	"'" ( UNICODE_CHAR | NEWLINE )* "'"
;

terminal INTERPRETED_STRING_LIT:
	'"' (UNICODE_VALUE | BYTE_VALUE)* '"'
;

Type: 
	typeName = TypeName | typeLit = TypeLit | "(" type = Type ")"
;

TypeName: 
	id = IDENTIFIER
;

TypeNameLinha:
	"." id = IDENTIFIER //| ANY_OTHER
;

terminal ANY_OTHER:
	"#"
;

TypeLit: 
	 "[" typeLitLinha = TypeLitLinha | srtuctType = StructType | pointerType = PointerType | functionType = FunctionType | interfaceType = InterfaceType |
	  mapType = MapType | channelType = ChannelType
;

TypeLitLinha:
	arrayLength = ArrayLength "]" elementType = ElementType 
	| "]" elementType = ElementType
;

ArrayLength: 
	expression = Expression
;

ElementType: 
	type = Type
;

StructType: 
	struct = STRUCT "{"  fieldDecl += (FieldDecl)* "}"
;

FieldDecl:
	(identifierList = IdentifierList type = Type | embeddedField = EmbeddedField) tag = (Tag)?
;

EmbeddedField: 
	("*")? typeName = TypeName
;

Tag: 
	string_lit = STRING_LIT
;

PointerType:
	"*" baseType = BaseType
;

BaseType:
	type = Type
;

FunctionType: 
	 func = "func" signature = Signature
;

Signature: 
	(parameters = Parameters) result = (Result)?
;

Result: 
	(parameters = (Parameters)) | type = Type
;

Parameters:
	{Parameters}"(" (parameterList = ParameterList)?")"
;

ParameterList:
	parameterDecl = ParameterDecl ("," parameterDecl1 += ParameterDecl)*
;

ParameterDecl:
	identifierList = (IdentifierList)? ("...")? type = Type
;

InterfaceType: 
	interface = INTERFACE "{"  methodSpec += (MethodSpec)* "}"
;

MethodSpec: 
	methodName = MethodName Signature = Signature | interfaceTypeName = InterfaceTypeName
;

MethodName: 
	id = IDENTIFIER
;

InterfaceTypeName: 
	typeName = TypeName
;

MapType:
	map = MAP "[" keyType = KeyType "]" elementType = ElementType
;

KeyType:
	type = Type
;

ChannelType: 
	( chan = CHAN channelTypeLinha = ChannelTypeLinha | "<-" chan = CHAN) elementType = ElementType
;

ChannelTypeLinha:
	"<-" | aNY_OTHER = ANY_OTHER
;

Block: 
	"{" statementList = StatementList "}"
;

StatementList: 
	 {StatementList}( statements += Statement ";")*
;

Declaration: 
	constDecl = ConstDecl | 
	typeDecl = TypeDecl  |
	varDecl = VarDecl
;

TopLevelDecl: 
	declaration = Declaration | functionDecl = FunctionDecl | methodDecl = MethodDecl
;

ConstDecl: 
	const = 'const' (constSpec = ConstSpec | "(" constSpec1 += (ConstSpec)* ")" )
;

ConstSpec: 
	identifierList = IdentifierList ((type = Type)? "=" expressionList = ExpressionList)?//(type = (Type)? "=" expressionList = ExpressionList)?
;

IdentifierList: 
	id = IDENTIFIER( "," id1 += IDENTIFIER )*
;

ExpressionList: 
	expression = Expression ("," expression1 += Expression)*
;

TypeDecl: 
	typekeyword = 'type' ( typeSpec = TypeSpec | "(" typeSpec1 += (TypeSpec)* ")")
;

TypeSpec: 
	aliasDecl = AliasDecl | typeDef = TypeDef
;

AliasDecl: 
	id = IDENTIFIER "=" type = Type
;

TypeDef: 
	id = IDENTIFIER type = Type
;

VarDecl: 
	VAR ( varSpec = VarSpec | "(" varSpec1 += (VarSpec)* ")" )
;

VarSpec: 
	IdentifierList = IdentifierList ( type = Type ( "=" expressionList = ExpressionList)? | "=" expressionList = ExpressionList )
;

ShortVarDecl:
	identifierList = IdentifierList ":=" expressionList = ExpressionList
;

FunctionDecl:
	"func" functionName = FunctionName signature = Signature functionBody = (FunctionBody)?
;

FunctionName: 
	id = IDENTIFIER
;

FunctionBody: 
	block = Block
;

MethodDecl: 
	"func" receiver = Receiver methodName = MethodName signature = Signature functionBody = (FunctionBody)?
;

Receiver: 
	parameters = Parameters
;

Operand: 
	literal = Literal | operandName = OperandName | "(" expression = Expression ")"
;

Literal:
	basicLit = BasicLit | compositeLit = CompositeLit | functionLit = FunctionLit
;

BasicLit:
	   int_lit = INT_LIT | float_lit = FLOAT_LIT | imaginary_lit = IMAGINARY_LIT | rune_lit = RUNE_LIT | string_lit = STRING_LIT
;

OperandName: 
	id = IDENTIFIER //OperandNameLinha
;

/*OperandNameLinha:
	"." IDENTIFIER |  ANY_OTHER
;*/

CompositeLit: 
	literalType = LiteralType literalValue = LiteralValue
;

LiteralType: 
	structType = StructType | mapType = MapType | typeName = TypeName | "[" literalTypeLinha = LiteralTypeLinha
;

LiteralTypeLinha:
	arrayLength= ArrayLength "]" elementType = ElementType | 
	"..." "]"elementType =  ElementType | 
	"]" elementType = ElementType
;

LiteralValue: 
	{LiteralValue}"{" ( elementList = ElementList ( "," )? )? "}"
;

ElementList: 
	keyedElement = KeyedElement ( "," keyedElement1 += KeyedElement)*
;

KeyedElement: 
	(key = Key":")? element = Element
;

Key: 
	fieldName = FieldName | expression = Expression | literalValue = LiteralValue
;

FieldName: 
	id = IDENTIFIER
;

Element: 
	expression = Expression | literalValue = LiteralValue
;

FunctionLit: 
	func = "func" signature= Signature functionBody = FunctionBody
;

PrimaryExpr: 
	 operand = Operand primaryExprLinha = PrimaryExprLinha | conversion = Conversion primaryExprLinha = PrimaryExprLinha | methodExpr = MethodExpr primaryExprLinha = PrimaryExprLinha
;

PrimaryExprLinha:
	 {PrimaryExprLinha}(selector = Selector primaryExprLinha = PrimaryExprLinha | 
	 index = Index primaryExprLinha = PrimaryExprLinha |  
	 slice = Slice primaryExprLinha = PrimaryExprLinha |  
	 typeAssertion = TypeAssertion primaryExprLinha = PrimaryExprLinha | 
	 arguments = Arguments primaryExprLinha = PrimaryExprLinha)?
;

Selector: 
	"."  id = IDENTIFIER
;
Index: 
	"[" expression = Expression "]"
;
Slice: 
	{Slice}("[" ( expression = Expression )? ":" ( expression1 = Expression )? "]" |
     "[" ( expression = Expression )? ":" expression1 = Expression ":" expression2 = Expression "]") 
;
TypeAssertion: 
	"." "(" type= Type ")" 
;

Arguments: 
	{Arguments}"(" ( ( ( expressionList = ExpressionList) | type = Type ( "," expressionList = ExpressionList )? ) ( "..." )? ( "," )? )? ")" 
;

MethodExpr: 
	receiverType = ReceiverType "." methodName = MethodName
;

ReceiverType:
	type = Type
;

Expression: 
	unaryExpr = UnaryExpr expression_Linha = Expression_Linha
;

Expression_Linha: 
	{Expression_Linha}(BINARY_OP = BINARY_OP expression = Expression expression_Linha = Expression_Linha)? //| ANY_OTHER
;

UnaryExpr: 
	primaryExpr = PrimaryExpr | UNARY_OP unaryExpr = UnaryExpr
;

BINARY_OP: 
	or = "||" | and = "&&" | rEL_OP= REL_OP | aDD_OP = ADD_OP | mUL_OP = MUL_OP
;

terminal REL_OP : 
	"==" | "!=" | "<" | "<=" | ">" | ">="
;
terminal ADD_OP :
	"+" | "-" | "|" | "^" 
;
terminal MUL_OP :
	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^"
;
terminal UNARY_OP: 
	"+" | "-" | "!" | "^" | "*" | "&" | "<-" 
;

Conversion: 
	type = Type "(" expression = Expression ( "," )? ")"
;

Statement:
	declaration = Declaration | labeledStmt = LabeledStmt | simpleStmt = SimpleStmt |
	goStmt = GoStmt | returnStmt = ReturnStmt | breakStmt = BreakStmt | continueStmt = ContinueStmt | gotoStmt = GotoStmt |
	fallthroughStmt = FallthroughStmt | block = Block | ifStmt = IfStmt | switchStmt = SwitchStmt | selectStmt = SelectStmt | forStmt = ForStmt |
	deferStmt = DeferStmt
;

SimpleStmt:
	 emptyStmt = EmptyStmt | expression = Expression simpleStmtLinha = SimpleStmtLinha | shortVarDecl = ShortVarDecl;

SimpleStmtLinha:
	"<-" expression = Expression | ( "++" | "--" ) | ("," expression1 += Expression)* assign_op = assign_op expressionList = ExpressionList | aNY_OTHER = ANY_OTHER
;

EmptyStmt:
	aNY_OTHER = ANY_OTHER
;

LabeledStmt:
	label = Label ":" statement = Statement 
;

Label:
	id = IDENTIFIER
;

/*ExpressionStmt: 
	Expression
;

SendStmt:
	Channel "<-" Expression
;

Channel:
	Expression
;

IncDecStmt:
	Expression ( "++" | "--" )
;

Assignment: 
	ExpressionList assign_op ExpressionList
;*/

assign_op: 
	( aDD_OP = ADD_OP | mUL_OP = MUL_OP )? "="
;

IfStmt:
	if = IF expression = Expression ifStmtLinha = IfStmtLinha| 
	if = IF (( emptyStmt = EmptyStmt | shortVarDecl = ShortVarDecl)";") expression = Expression block = Block (else = ELSE (ifStmt = IfStmt | block1 = Block))?
;

IfStmtLinha:
	simpleStmtLinha = SimpleStmtLinha ";" expression = Expression block = Block (else = ELSE (ifStmt = IfStmt | block1 = Block))? | 
	block = Block (else = ELSE (ifStmt = IfStmt | block1 = Block))?
;

SwitchStmt:
	switch = SWITCH ( simpleStmt = SimpleStmt ";")? switchStmtLinha = SwitchStmtLinha
;

SwitchStmtLinha:
	primaryExpr = PrimaryExpr switchStmtLinhaLinha = SwitchStmtLinhaLinha |
	((unary_op = UNARY_OP unaryExpr = UnaryExpr) expression = Expression_Linha)? "{" exprCaseClause += ( ExprCaseClause )* "}" | 
	(id = IDENTIFIER ":=") primaryExpr = PrimaryExpr "." "(" typekeyword = 'type' ")" "{" typeCaseClause += (TypeCaseClause)* "}"
;

SwitchStmtLinhaLinha:
	"{" exprCaseClause += ( ExprCaseClause )* "}" | "." "(" typekeyword = 'type' ")" "{"  typeCaseClause += (TypeCaseClause)* "}"
;

/*ExprSwitchStmt:
	SWITCH (SimpleStmt ";")? (Expression)? "{" ( ExprCaseClause )* "}"
;*/

ExprCaseClause:
	exprSwitchCase = ExprSwitchCase ":" statementList = StatementList
;

ExprSwitchCase:
	case = CASE expressionList = ExpressionList | default = DEFAULT
;

/*TypeSwitchStmt:
	SWITCH (SimpleStmt ";")? TypeSwitchGuard "{" (TypeCaseClause)* "}"	
;*/

/*TypeSwitchGuard:
	(IDENTIFIER ":=")? PrimaryExpr "." "(" TYPEKEYWORD ")"
;*/


TypeCaseClause:
	typeSwitchCase = TypeSwitchCase ":" statementList = StatementList
;

TypeSwitchCase:
	case = CASE typeList = TypeList | default = DEFAULT	
;

TypeList:
	type = Type ("," type1 += Type)*
;

ForStmt: 
	for = FOR (expression = Expression forStmtLinha = ForStmtLinha| (emptyStmt = EmptyStmt | shortVarDecl = ShortVarDecl) ";" ( condition = Condition ) ";" ( postStmt = PostStmt ) | identifierList = IdentifierList ":="  range = RANGE expression = Expression)? block = Block
;

ForStmtLinha:
	vazio = ANY_OTHER | ("," expression += Expression)* forStmtLinhaLinha = ForStmtLinhaLinha | 
	("<-" expression1 = Expression | ( "++" | "--" ) | vazio = ANY_OTHER) ";" ( condition = Condition ) ";" ( postStmt = PostStmt )
;

ForStmtLinhaLinha:
	assign_op = assign_op expressionList = ExpressionList ";" ( condition = Condition ) ";" ( postStmt = PostStmt ) | "=" range = RANGE expression = Expression
;

Condition:
	expression = Expression
;

/*ForClause:
	( InitStmt ) ";" ( Condition ) ";" ( PostStmt )
;*/

PostStmt:
	simpleStmt = SimpleStmt
;

/*InitStmt:
	SimpleStmt
;*/

/*RangeClause:
	( ExpressionList "=" | IdentifierList ":=" ) RANGE Expression
;*/

GoStmt:
	go = GO expression = Expression
;

SelectStmt:
	select = SELECT "{" commClause += ( CommClause )* "}"
;

CommClause:
	commCase = CommCase ":" statementList = StatementList
;

CommCase:
	case = CASE ( expression = Expression commCaseLinha= CommCaseLinha) | default = DEFAULT
;

CommCaseLinha:
	"<-" expression = Expression | (("," expression1 += Expression)* "=" | identifierList = IdentifierList ":=" ) recvExpr = RecvExpr
;

/*RecvStmt:
	(ExpressionList "=" | IdentifierList ":=") RecvExpr
;*/

RecvExpr:
	expression = Expression
;

ReturnStmt:
	return = RETURN ( expressionList = ExpressionList )
;

BreakStmt:
	break = BREAK ( label = Label )
;

ContinueStmt:
	continue = CONTINUE ( label = Label )
;

GotoStmt:
	goto = GOTO label = Label
;

FallthroughStmt:
	fallthrough = FALLTHROUGH
;

DeferStmt:
	defer = DEFER expression = Expression	
;

SourceFile: 
	{SourceFile}packageClause = PackageClause importDecl +=(ImportDecl)* topLevelDecl += (TopLevelDecl)*
;

PackageClause: 
	package = "package" packageName = PackageName
;

PackageName: 
	id = IDENTIFIER
;

ImportDecl:
	importt = "import"  (importSpec = ImportSpec |  "(" (importSpec1 += ImportSpec)* ")")
;

ImportSpec:
	("." | packageName = PackageName)? sTRING_LIT = STRING_LIT
;

/*ImportPath: 
	STRING_LIT
;*/
