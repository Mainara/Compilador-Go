/*
 * generated by Xtext 2.10.0
 */
grammar DebugInternalMyDsl;

// Rule Model
ruleModel:
	ruleSourceFile
	*
;

// Rule Type
ruleType:
	(
		ruleTypeName
		    |
		ruleTypeLit
		    |
		'('
		ruleType
		')'
	)
;

// Rule TypeName
ruleTypeName:
	RULE_IDENTIFIER
;

// Rule TypeLit
ruleTypeLit:
	(
		'['
		ruleTypeLitLinha
		    |
		ruleStructType
		    |
		rulePointerType
		    |
		ruleFunctionType
		    |
		ruleInterfaceType
		    |
		ruleMapType
		    |
		ruleChannelType
	)
;

// Rule TypeLitLinha
ruleTypeLitLinha:
	(
		ruleArrayLength
		']'
		ruleElementType
		    |
		']'
		ruleElementType
	)
;

// Rule ArrayLength
ruleArrayLength:
	ruleExpression
;

// Rule ElementType
ruleElementType:
	ruleType
;

// Rule StructType
ruleStructType:
	RULE_STRUCT
	'{'
	ruleFieldDecl
	*
	'}'
;

// Rule FieldDecl
ruleFieldDecl:
	(
		ruleIdentifierList
		ruleType
		    |
		ruleEmbeddedField
	)
	ruleTag
	?
;

// Rule EmbeddedField
ruleEmbeddedField:
	'*'?
	ruleTypeName
;

// Rule Tag
ruleTag:
	RULE_STRING_LIT
;

// Rule PointerType
rulePointerType:
	'*'
	ruleBaseType
;

// Rule BaseType
ruleBaseType:
	ruleType
;

// Rule FunctionType
ruleFunctionType:
	'func'
	ruleSignature
;

// Rule Signature
ruleSignature:
	ruleParameters
	ruleResult
	?
;

// Rule Result
ruleResult:
	(
		ruleParameters
		    |
		ruleType
	)
;

// Rule Parameters
ruleParameters:
	'('
	ruleParameterList
	?
	')'
;

// Rule ParameterList
ruleParameterList:
	ruleParameterDecl
	(
		','
		ruleParameterDecl
	)*
;

// Rule ParameterDecl
ruleParameterDecl:
	ruleIdentifierList
	?
	'...'?
	ruleType
;

// Rule InterfaceType
ruleInterfaceType:
	RULE_INTERFACE
	'{'
	ruleMethodSpec
	*
	'}'
;

// Rule MethodSpec
ruleMethodSpec:
	(
		ruleMethodName
		ruleSignature
		    |
		ruleInterfaceTypeName
	)
;

// Rule MethodName
ruleMethodName:
	RULE_IDENTIFIER
;

// Rule InterfaceTypeName
ruleInterfaceTypeName:
	ruleTypeName
;

// Rule MapType
ruleMapType:
	RULE_MAP
	'['
	ruleKeyType
	']'
	ruleElementType
;

// Rule KeyType
ruleKeyType:
	ruleType
;

// Rule ChannelType
ruleChannelType:
	(
		RULE_CHAN
		ruleChannelTypeLinha
		    |
		'<-'
		RULE_CHAN
	)
	ruleElementType
;

// Rule ChannelTypeLinha
ruleChannelTypeLinha:
	(
		'<-'
		    |
		RULE_ANY_OTHER
	)
;

// Rule Block
ruleBlock:
	'{'
	ruleStatementList
	'}'
;

// Rule StatementList
ruleStatementList:
	(
		ruleStatement
		';'
	)*
;

// Rule Declaration
ruleDeclaration:
	(
		ruleConstDecl
		    |
		ruleTypeDecl
		    |
		ruleVarDecl
	)
;

// Rule TopLevelDecl
ruleTopLevelDecl:
	(
		ruleDeclaration
		    |
		ruleFunctionDecl
		    |
		ruleMethodDecl
	)
;

// Rule ConstDecl
ruleConstDecl:
	'const'
	(
		ruleConstSpec
		    |
		'('
		ruleConstSpec
		*
		')'
	)
;

// Rule ConstSpec
ruleConstSpec:
	ruleIdentifierList
	(
		ruleType
		?
		'='
		ruleExpressionList
	)?
;

// Rule IdentifierList
ruleIdentifierList:
	RULE_IDENTIFIER
	(
		','
		RULE_IDENTIFIER
	)*
;

// Rule ExpressionList
ruleExpressionList:
	ruleExpression
	(
		','
		ruleExpression
	)*
;

// Rule TypeDecl
ruleTypeDecl:
	'type'
	(
		ruleTypeSpec
		    |
		'('
		ruleTypeSpec
		*
		')'
	)
;

// Rule TypeSpec
ruleTypeSpec:
	(
		ruleAliasDecl
		    |
		ruleTypeDef
	)
;

// Rule AliasDecl
ruleAliasDecl:
	RULE_IDENTIFIER
	'='
	ruleType
;

// Rule TypeDef
ruleTypeDef:
	RULE_IDENTIFIER
	ruleType
;

// Rule VarDecl
ruleVarDecl:
	'var'
	(
		ruleVarSpec
		    |
		'('
		ruleVarSpec
		*
		')'
	)
;

// Rule VarSpec
ruleVarSpec:
	ruleIdentifierList
	(
		ruleType
		(
			'='
			ruleExpressionList
		)?
		    |
		'='
		ruleExpressionList
	)
;

// Rule ShortVarDecl
ruleShortVarDecl:
	ruleIdentifierList
	':='
	ruleExpressionList
;

// Rule FunctionDecl
ruleFunctionDecl:
	'func'
	ruleFunctionName
	ruleSignature
	ruleFunctionBody
	?
;

// Rule FunctionName
ruleFunctionName:
	RULE_IDENTIFIER
;

// Rule FunctionBody
ruleFunctionBody:
	ruleBlock
;

// Rule MethodDecl
ruleMethodDecl:
	'func'
	ruleReceiver
	ruleMethodName
	ruleSignature
	ruleFunctionBody
	?
;

// Rule Receiver
ruleReceiver:
	ruleParameters
;

// Rule Operand
ruleOperand:
	(
		ruleLiteral
		    |
		ruleOperandName
		    |
		'('
		ruleExpression
		')'
	)
;

// Rule Literal
ruleLiteral:
	(
		ruleBasicLit
		    |
		ruleCompositeLit
		    |
		ruleFunctionLit
	)
;

// Rule BasicLit
ruleBasicLit:
	(
		RULE_INT_LIT
		    |
		RULE_FLOAT_LIT
		    |
		RULE_IMAGINARY_LIT
		    |
		RULE_RUNE_LIT
		    |
		RULE_STRING_LIT
	)
;

// Rule OperandName
ruleOperandName:
	RULE_IDENTIFIER
;

// Rule CompositeLit
ruleCompositeLit:
	ruleLiteralType
	ruleLiteralValue
;

// Rule LiteralType
ruleLiteralType:
	(
		ruleStructType
		    |
		ruleMapType
		    |
		ruleTypeName
		    |
		'['
		ruleLiteralTypeLinha
	)
;

// Rule LiteralTypeLinha
ruleLiteralTypeLinha:
	(
		ruleArrayLength
		']'
		ruleElementType
		    |
		'...'
		']'
		ruleElementType
		    |
		']'
		ruleElementType
	)
;

// Rule LiteralValue
ruleLiteralValue:
	'{'
	(
		ruleElementList
		','?
	)?
	'}'
;

// Rule ElementList
ruleElementList:
	ruleKeyedElement
	(
		','
		ruleKeyedElement
	)*
;

// Rule KeyedElement
ruleKeyedElement:
	(
		ruleKey
		':'
	)?
	ruleElement
;

// Rule Key
ruleKey:
	(
		ruleFieldName
		    |
		ruleExpression
		    |
		ruleLiteralValue
	)
;

// Rule FieldName
ruleFieldName:
	RULE_IDENTIFIER
;

// Rule Element
ruleElement:
	(
		ruleExpression
		    |
		ruleLiteralValue
	)
;

// Rule FunctionLit
ruleFunctionLit:
	'func'
	ruleSignature
	ruleFunctionBody
;

// Rule PrimaryExpr
rulePrimaryExpr:
	(
		ruleOperand
		rulePrimaryExprLinha
		    |
		ruleConversion
		rulePrimaryExprLinha
		    |
		ruleMethodExpr
		rulePrimaryExprLinha
	)
;

// Rule PrimaryExprLinha
rulePrimaryExprLinha:
	(
		ruleSelector
		rulePrimaryExprLinha
		    |
		ruleIndex
		rulePrimaryExprLinha
		    |
		ruleSlice
		rulePrimaryExprLinha
		    |
		ruleTypeAssertion
		rulePrimaryExprLinha
		    |
		ruleArguments
		rulePrimaryExprLinha
	)?
;

// Rule Selector
ruleSelector:
	'.'
	RULE_IDENTIFIER
;

// Rule Index
ruleIndex:
	'['
	ruleExpression
	']'
;

// Rule Slice
ruleSlice:
	(
		'['
		ruleExpression
		?
		':'
		ruleExpression
		?
		']'
		    |
		'['
		ruleExpression
		?
		':'
		ruleExpression
		':'
		ruleExpression
		']'
	)
;

// Rule TypeAssertion
ruleTypeAssertion:
	'.'
	'('
	ruleType
	')'
;

// Rule Arguments
ruleArguments:
	'('
	(
		(
			ruleExpressionList
			    |
			ruleType
			(
				','
				ruleExpressionList
			)?
		)
		'...'?
		','?
	)?
	')'
;

// Rule MethodExpr
ruleMethodExpr:
	ruleReceiverType
	'.'
	ruleMethodName
;

// Rule ReceiverType
ruleReceiverType:
	ruleType
;

// Rule Expression
ruleExpression:
	ruleUnaryExpr
	ruleExpression_Linha
;

// Rule Expression1
ruleExpression1:
	ruleUnaryExpr
	ruleExpression_Linha
;

// Rule Expression_Linha
ruleExpression_Linha:
	(
		ruleBINARY_OP
		ruleExpression1
		ruleExpression_Linha
	)?
;

// Rule UnaryExpr
ruleUnaryExpr:
	rulePrimaryExpr
;

// Rule BINARY_OP
ruleBINARY_OP:
	(
		RULE_REL_OP
		    |
		RULE_ADD_OP
	)
;

// Rule Conversion
ruleConversion:
	ruleType
	'('
	ruleExpression
	','?
	')'
;

// Rule Statement
ruleStatement:
	(
		ruleDeclaration
		    |
		ruleLabeledStmt
		    |
		ruleSimpleStmt
		    |
		ruleGoStmt
		    |
		ruleReturnStmt
		    |
		ruleBreakStmt
		    |
		ruleContinueStmt
		    |
		ruleGotoStmt
		    |
		ruleFallthroughStmt
		    |
		ruleBlock
		    |
		ruleIfStmt
		    |
		ruleSwitchStmt
		    |
		ruleSelectStmt
		    |
		ruleForStmt
		    |
		ruleDeferStmt
	)
;

// Rule SimpleStmt
ruleSimpleStmt:
	(
		ruleEmptyStmt
		    |
		ruleExpression
		ruleSimpleStmtLinha
		    |
		ruleShortVarDecl
	)
;

// Rule SimpleStmtLinha
ruleSimpleStmtLinha:
	(
		'<-'
		ruleExpression
		    |
		(
			'++'
			    |
			'--'
		)
		    |
		(
			','
			ruleExpression
		)*
		ruleassign_op
		ruleExpressionList
		    |
		RULE_ANY_OTHER
	)
;

// Rule EmptyStmt
ruleEmptyStmt:
	RULE_ANY_OTHER
;

// Rule LabeledStmt
ruleLabeledStmt:
	ruleLabel
	':'
	ruleStatement
;

// Rule Label
ruleLabel:
	RULE_IDENTIFIER
;

// Rule assign_op
ruleassign_op:
	(
		RULE_ADD_OP
		    |
		RULE_MUL_OP
	)?
	'='
;

// Rule IfStmt
ruleIfStmt:
	(
		RULE_IF
		ruleExpression
		ruleIfStmtLinha
		    |
		RULE_IF
		(
			ruleEmptyStmt
			    |
			ruleShortVarDecl
		)
		';'
		ruleExpression
		ruleBlock
		(
			RULE_ELSE
			(
				ruleIfStmt
				    |
				ruleBlock
			)
		)?
	)
;

// Rule IfStmtLinha
ruleIfStmtLinha:
	(
		ruleSimpleStmtLinha
		';'
		ruleExpression
		ruleBlock
		(
			RULE_ELSE
			(
				ruleIfStmt
				    |
				ruleBlock
			)
		)?
		    |
		ruleBlock
		(
			RULE_ELSE
			(
				ruleIfStmt
				    |
				ruleBlock
			)
		)?
	)
;

// Rule SwitchStmt
ruleSwitchStmt:
	(
		ruleExprSwitchStmt
		    |
		ruleTypeSwitchStmt
	)
;

// Rule ExprSwitchStmt
ruleExprSwitchStmt:
	'switch'
	ruleSimpleStmt
	?
	ruleExpression
	?
	'{'
	ruleExprCaseClause
	*
	'}'
;

// Rule ExprCaseClause
ruleExprCaseClause:
	ruleExprSwitchCase
	':'
	ruleStatementList
;

// Rule ExprSwitchCase
ruleExprSwitchCase:
	(
		'case'
		ruleExpressionList
		    |
		'default'
	)
;

// Rule TypeSwitchStmt
ruleTypeSwitchStmt:
	'switch'
	(
		ruleSimpleStmt
		';'
	)?
	ruleTypeSwitchGuard
	'{'
	ruleTypeCaseClause
	*
	'}'
;

// Rule TypeSwitchGuard
ruleTypeSwitchGuard:
	(
		RULE_IDENTIFIER
		':='
	)?
	rulePrimaryExpr
	'.'
	'('
	'type'
	')'
;

// Rule TypeCaseClause
ruleTypeCaseClause:
	ruleTypeSwitchCase
	':'
	ruleStatementList
;

// Rule TypeSwitchCase
ruleTypeSwitchCase:
	(
		'case'
		ruleTypeList
		    |
		'default'
	)
;

// Rule TypeList
ruleTypeList:
	ruleType
	(
		','
		ruleType
	)*
;

// Rule ForStmt
ruleForStmt:
	RULE_FOR
	(
		ruleExpression
		ruleForStmtLinha
		    |
		(
			ruleEmptyStmt
			    |
			ruleShortVarDecl
		)
		';'
		ruleCondition
		';'
		rulePostStmt
		    |
		ruleIdentifierList
		':='
		RULE_RANGE
		ruleExpression
	)?
	ruleBlock
;

// Rule ForStmtLinha
ruleForStmtLinha:
	(
		RULE_ANY_OTHER
		    |
		(
			','
			ruleExpression
		)*
		ruleForStmtLinhaLinha
		    |
		(
			'<-'
			ruleExpression
			    |
			(
				'++'
				    |
				'--'
			)
			    |
			RULE_ANY_OTHER
		)
		';'
		ruleCondition
		';'
		rulePostStmt
	)
;

// Rule ForStmtLinhaLinha
ruleForStmtLinhaLinha:
	(
		ruleassign_op
		ruleExpressionList
		';'
		ruleCondition
		';'
		rulePostStmt
		    |
		'='
		RULE_RANGE
		ruleExpression
	)
;

// Rule Condition
ruleCondition:
	ruleExpression
;

// Rule PostStmt
rulePostStmt:
	ruleSimpleStmt
;

// Rule GoStmt
ruleGoStmt:
	RULE_GO
	ruleExpression
;

// Rule SelectStmt
ruleSelectStmt:
	RULE_SELECT
	'{'
	ruleCommClause
	*
	'}'
;

// Rule CommClause
ruleCommClause:
	ruleCommCase
	':'
	ruleStatementList
;

// Rule CommCase
ruleCommCase:
	(
		'case'
		ruleExpression
		ruleCommCaseLinha
		    |
		'default'
	)
;

// Rule CommCaseLinha
ruleCommCaseLinha:
	(
		'<-'
		ruleExpression
		    |
		(
			(
				','
				ruleExpression
			)*
			'='
			    |
			ruleIdentifierList
			':='
		)
		ruleRecvExpr
	)
;

// Rule RecvExpr
ruleRecvExpr:
	ruleExpression
;

// Rule ReturnStmt
ruleReturnStmt:
	'return'
	ruleExpressionList
;

// Rule BreakStmt
ruleBreakStmt:
	RULE_BREAK
	ruleLabel
;

// Rule ContinueStmt
ruleContinueStmt:
	RULE_CONTINUE
	ruleLabel
;

// Rule GotoStmt
ruleGotoStmt:
	RULE_GOTO
	ruleLabel
;

// Rule FallthroughStmt
ruleFallthroughStmt:
	RULE_FALLTHROUGH
;

// Rule DeferStmt
ruleDeferStmt:
	RULE_DEFER
	ruleExpression
;

// Rule SourceFile
ruleSourceFile:
	rulePackageClause
	ruleImportDecl
	*
	ruleTopLevelDecl
	*
;

// Rule PackageClause
rulePackageClause:
	'package'
	rulePackageName
;

// Rule PackageName
rulePackageName:
	RULE_IDENTIFIER
;

// Rule ImportDecl
ruleImportDecl:
	'import'
	(
		ruleImportSpec
		    |
		'('
		ruleImportSpec
		*
		')'
	)
;

// Rule ImportSpec
ruleImportSpec:
	(
		'.'
		    |
		rulePackageName
	)?
	RULE_STRING_LIT
;

fragment RULE_NEWLINE : ('\n'|'\r'|'\n\r');

fragment RULE_UNICODE_CHAR : RULE_LETTER;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z'|'_');

fragment RULE_DECIMAL_DIGIT : '0'..'9';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F'|'a'..'f');

RULE_BREAK : 'break';

RULE_INTERFACE : 'interface';

RULE_SELECT : 'select';

RULE_DEFER : 'defer';

RULE_GO : 'go';

RULE_MAP : 'map';

RULE_STRUCT : 'struct';

RULE_CHAN : 'chan';

RULE_ELSE : 'else';

RULE_GOTO : 'goto';

RULE_FALLTHROUGH : 'fallthrough';

RULE_IF : 'if';

RULE_RANGE : 'range';

RULE_CONTINUE : 'continue';

RULE_FOR : 'for';

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

RULE_INT_LIT : ('1'..'9' RULE_DECIMAL_DIGIT*|'0' RULE_OCTAL_DIGIT*|'0' ('x'|'X') RULE_HEX_DIGIT+);

RULE_FLOAT_LIT : (RULE_DECIMALS '.' RULE_DECIMALS? RULE_EXPONENT?|RULE_DECIMALS RULE_EXPONENT|'.' RULE_DECIMALS RULE_EXPONENT?);

fragment RULE_DECIMALS : RULE_INT;

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? RULE_DECIMALS;

RULE_IMAGINARY_LIT : (RULE_DECIMALS|RULE_FLOAT_LIT) 'i';

RULE_RUNE_LIT : '\'' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE) '\'';

fragment RULE_UNICODE_VALUE : (RULE_UNICODE_CHAR|RULE_LITTLE_U_VALUE|RULE_BIG_U_VALUE|RULE_ESCAPED_CHAR);

fragment RULE_BYTE_VALUE : (RULE_OCTAL_BYTE_VALUE|RULE_HEX_BYTE_VALUE);

fragment RULE_OCTAL_BYTE_VALUE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEX_BYTE_VALUE : '\\' 'x' RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_LITTLE_U_VALUE : '\\' 'u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_BIG_U_VALUE : '\\' 'U' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_ESCAPED_CHAR : '\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\''|'"');

RULE_STRING_LIT : (RULE_RAW_STRING_LIT|RULE_INTERPRETED_STRING_LIT);

fragment RULE_RAW_STRING_LIT : '\'' (RULE_UNICODE_CHAR|RULE_NEWLINE)* '\'';

fragment RULE_INTERPRETED_STRING_LIT : '"' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE)* '"';

RULE_ANY_OTHER : '#';

RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

RULE_ADD_OP : ('*'|'/'|RULE_A_D_D__O_P__LINHA);

fragment RULE_A_D_D__O_P__LINHA : ('+'|'-');

RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};
