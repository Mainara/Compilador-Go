/*
 * generated by Xtext 2.10.0
 */
grammar DebugInternalMyDsl;

// Rule Model
ruleModel:
	ruleGreeting
	*
;

// Rule Greeting
ruleGreeting:
	ruleSourceFile
;

// Rule float_literal
rulefloat_literal:
	(
		RULE_DECIMAL_DIGITS
		'.'
		RULE_DECIMAL_DIGITS
		RULE_EXPONENT_PART
		    |
		'.'
		RULE_DECIMAL_DIGITS
		RULE_EXPONENT_PART
		    |
		RULE_DECIMAL_DIGITS
		RULE_EXPONENT_PART
	)
;

// Rule Imaginary_lit
ruleImaginary_lit:
	(
		RULE_DECIMAL_DIGITS
		    |
		rulefloat_literal
	)
	'i'
;

// Rule Type
ruleType:
	(
		ruleTypeName
		    |
		ruleTypeLit
		    |
		'('
		ruleType
		')'
	)
;

// Rule TypeName
ruleTypeName:
	RULE_IDENTIFIER
	ruleTypeNameLinha
;

// Rule TypeNameLinha
ruleTypeNameLinha:
	(
		'.'
		RULE_IDENTIFIER
		    |
		RULE_ANY_OTHER
	)
;

// Rule PackageName
rulePackageName:
	RULE_IDENTIFIER
;

// Rule TypeLit
ruleTypeLit:
	(
		'['
		ruleTypeLitLinha
		    |
		ruleStructType
		    |
		rulePointerType
		    |
		ruleFunctionType
		    |
		ruleInterfaceType
		    |
		ruleMapType
		    |
		ruleChannelType
	)
;

// Rule TypeLitLinha
ruleTypeLitLinha:
	(
		ruleArrayLength
		']'
		ruleElementType
		    |
		']'
		ruleElementType
	)
;

// Rule ArrayLength
ruleArrayLength:
	ruleExpression
;

// Rule ElementType
ruleElementType:
	ruleType
;

// Rule StructType
ruleStructType:
	'struct'
	'{'
	(
		ruleFieldDecl
		';'
	)*
	'}'
;

// Rule FieldDecl
ruleFieldDecl:
	(
		ruleIdentifierList
		ruleType
		    |
		ruleEmbeddedField
	)
	ruleTag?
;

// Rule EmbeddedField
ruleEmbeddedField:
	'*'?
	ruleTypeName
;

// Rule Tag
ruleTag:
	RULE_STRING_LIT
;

// Rule PointerType
rulePointerType:
	'*'
	ruleBaseType
;

// Rule BaseType
ruleBaseType:
	ruleType
;

// Rule FunctionType
ruleFunctionType:
	'func'
	ruleSignature
;

// Rule Signature
ruleSignature:
	ruleParameters
	(
		(ruleResult)=>
		ruleResult
	)?
;

// Rule Result
ruleResult:
	(
		(
			(ruleParameters)=>
			ruleParameters
		)
		    |
		ruleType
	)
;

// Rule Parameters
ruleParameters:
	'('
	(
		ruleParameterList
		','?
	)?
	')'
;

// Rule ParameterList
ruleParameterList:
	ruleParameterDecl
	(
		','
		ruleParameterDecl
	)*
;

// Rule ParameterDecl
ruleParameterDecl:
	ruleIdentifierList?
	'...'?
	ruleType
;

// Rule InterfaceType
ruleInterfaceType:
	'interface'
	'{'
	ruleMethodSpec
	';'
	'}'
;

// Rule MethodSpec
ruleMethodSpec:
	(
		ruleMethodName
		ruleSignature
		    |
		ruleInterfaceTypeName
	)
;

// Rule MethodName
ruleMethodName:
	RULE_IDENTIFIER
;

// Rule InterfaceTypeName
ruleInterfaceTypeName:
	ruleTypeName
;

// Rule MapType
ruleMapType:
	'map'
	'['
	ruleKeyType
	']'
	ruleElementType
;

// Rule KeyType
ruleKeyType:
	ruleType
;

// Rule ChannelType
ruleChannelType:
	(
		'chan'
		ruleChannelTypeLinha
		    |
		'<-'
		'chan'
	)
	ruleElementType
;

// Rule ChannelTypeLinha
ruleChannelTypeLinha:
	(
		'<-'
		    |
		RULE_ANY_OTHER
	)
;

// Rule Expression
ruleExpression:
	ruleUnaryExpr
	ruleExpression_Linha
;

// Rule Expression_Linha
ruleExpression_Linha:
	rulebinary_op
	ruleExpression
	ruleExpression_Linha
;

// Rule UnaryExpr
ruleUnaryExpr:
	(
		rulePrimaryExpr
		    |
		RULE_UNARY_OP
		ruleUnaryExpr
	)
;

// Rule binary_op
rulebinary_op:
	(
		'||'
		    |
		'&&'
		    |
		RULE_REL_OP
		    |
		RULE_ADD_OP
		    |
		RULE_MUL_OP
	)
;

// Rule PrimaryExpr
rulePrimaryExpr:
	(
		ruleBasicLit
		rulePrimaryExprLinha
		    |
		ruleStructType
		rulePrimaryExprFatFatFatFat
		    |
		ruleMapType
		rulePrimaryExprFatFatFatFat
		    |
		'func'
		ruleSignature
		rulePrimaryExprFatFatFatFatFat
		rulePrimaryExprLinha
		    |
		'...'
		']'
		ruleElementType
		ruleLiteralValue
		rulePrimaryExprLinha
		    |
		ruleName
		rulePrimaryExprFatFatFat
		rulePrimaryExprLinha
		    |
		'('
		rulePrimaryExprFatFat
		rulePrimaryExprLinha
		    |
		'['
		ruleTypeLitLinha
		rulePrimaryExprFatFatFatFatFatFat
		rulePrimaryExprLinha
		    |
		rulePointerType
		rulePrimaryExprFat
		rulePrimaryExprLinha
		    |
		ruleInterfaceType
		rulePrimaryExprFat
		rulePrimaryExprLinha
		    |
		ruleChannelType
		rulePrimaryExprFat
		rulePrimaryExprLinha
	)
;

// Rule PrimaryExprFatFatFatFatFatFat
rulePrimaryExprFatFatFatFatFatFat:
	(
		ruleLiteralValue
		    |
		rulePrimaryExprFat
	)
;

// Rule PrimaryExprFatFatFatFatFat
rulePrimaryExprFatFatFatFatFat:
	(
		ruleFunctionBody
		    |
		rulePrimaryExprFat
	)
;

// Rule PrimaryExprFatFatFatFat
rulePrimaryExprFatFatFatFat:
	(
		ruleLiteralValue
		    |
		rulePrimaryExprFat
	)
;

// Rule PrimaryExprFatFatFat
rulePrimaryExprFatFatFat:
	(
		ruleLiteralValue
		    |
		rulePrimaryExprFat
		    |
		RULE_ANY_OTHER
	)
;

// Rule Name
ruleName:
	RULE_IDENTIFIER
	ruleNameLinha
;

// Rule NameLinha
ruleNameLinha:
	(
		'.'
		RULE_IDENTIFIER
		    |
		RULE_ANY_OTHER
	)
;

// Rule PrimaryExprFatFat
rulePrimaryExprFatFat:
	(
		(
			(ruleExpression)=>
			ruleExpression
		)
		')'
		    |
		ruleType
		')'
		rulePrimaryExprFat
	)
;

// Rule PrimaryExprFat
rulePrimaryExprFat:
	(
		'('
		ruleExpression
		','?
		')'
		    |
		'.'
		ruleMethodName
	)
;

// Rule PrimaryExprLinha
rulePrimaryExprLinha:
	(
		'.'
		rulePrimaryExprLinhaLinha
		rulePrimaryExprLinha
		    |
		'['
		rulePrimaryExprLinhaLinhaLinha
		rulePrimaryExprLinha
		    |
		ruleArguments
		rulePrimaryExprLinha
	)
;

// Rule PrimaryExprLinhaLinha
rulePrimaryExprLinhaLinha:
	(
		RULE_IDENTIFIER
		    |
		'('
		ruleType
		')'
	)
;

// Rule PrimaryExprLinhaLinhaLinha
rulePrimaryExprLinhaLinhaLinha:
	(
		ruleExpression
		rulePrimaryExprLinhaLinhaLinhaLinha
		    |
		':'
		ruleSliceLinha
	)
;

// Rule PrimaryExprLinhaLinhaLinhaLinha
rulePrimaryExprLinhaLinhaLinhaLinha:
	(
		']'
		    |
		':'
		ruleSliceLinha
	)
;

// Rule SliceLinha
ruleSliceLinha:
	(
		':'
		ruleExpression?
		']'
		    |
		ruleExpression
		':'
		ruleExpression
		']'
	)
;

// Rule Arguments
ruleArguments:
	'('
	(
		(
			(
				(ruleExpressionList)=>
				ruleExpressionList
			)
			    |
			ruleType
			(
				','
				ruleExpressionList
			)?
		)
		'...'?
		','?
	)?
	')'
;

// Rule ExpressionList
ruleExpressionList:
	ruleExpression
	(
		','
		ruleExpression
	)*
;

// Rule IdentifierList
ruleIdentifierList:
	RULE_IDENTIFIER
	(
		','
		RULE_IDENTIFIER
	)*
;

// Rule Block
ruleBlock:
	'{'
	ruleStatementList
	'}'
;

// Rule StatementList
ruleStatementList:
	(
		ruleStatement
		';'
	)*
;

// Rule Statement
ruleStatement:
	(
		ruleDeclaration
		    |
		ruleLabeledStmt
		    |
		ruleSimpleStmt
		    |
		ruleGoStmt
		    |
		ruleReturnStmt
		    |
		ruleBreakStmt
		    |
		ruleContinueStmt
		    |
		ruleGotoStmt
		    |
		ruleFallthroughStmt
		    |
		ruleBlock
		    |
		ruleIfStmt
		    |
		ruleSwitchStmt
		    |
		ruleSelectStmt
		    |
		ruleForStmt
		    |
		ruleDeferStmt
	)
;

// Rule DeferStmt
ruleDeferStmt:
	'defer'
	ruleExpression
;

// Rule ForStmt
ruleForStmt:
	'for'
	(
		ruleExpression
		ruleForStmtLinha
	)?
	ruleBlock
;

// Rule ForStmtLinha
ruleForStmtLinha:
	(
		(
			ruleSimpleStmtLinha
			    |
			RULE_IDENTIFIER
			(
				','
				RULE_IDENTIFIER
			)*
			':='
			ruleExpression
			(
				','
				ruleExpression
			)*
		)
		';'
		ruleCondition
		';'
		(
			ruleExpression
			ruleSimpleStmtLinha
			    |
			RULE_IDENTIFIER
			(
				','
				RULE_IDENTIFIER
			)*
			':='
			ruleExpression
			(
				','
				ruleExpression
			)*
			    |
			(
				','
				ruleExpression
			)*
			'='
			    |
			ruleIdentifierList
			':='
		)
		'range'
		ruleExpression
		    |
		RULE_ANY_OTHER
	)
;

// Rule PostStmt
rulePostStmt:
	ruleSimpleStmt
;

// Rule InitStmt
ruleInitStmt:
	ruleSimpleStmt
;

// Rule Condition
ruleCondition:
	ruleExpression
;

// Rule SelectStmt
ruleSelectStmt:
	'select'
	'{'
	ruleCommClause*
	'}'
;

// Rule CommClause
ruleCommClause:
	ruleCommCase
	':'
	ruleStatementList
;

// Rule CommCase
ruleCommCase:
	(
		'case'
		ruleExpression
		ruleCommCaseLinha
		    |
		'default'
	)
;

// Rule CommCaseLinha
ruleCommCaseLinha:
	(
		'<-'
		ruleExpression
		    |
		(
			(
				','
				ruleExpression
			)*
			'='
			    |
			ruleIdentifierList
			':='
		)
		ruleRecvExpr
	)
;

// Rule RecvExpr
ruleRecvExpr:
	ruleExpression
;

// Rule SwitchStmt
ruleSwitchStmt:
	'switch'
	ruleSimpleStmt
	';'
	ruleSwitchStmtLinha
;

// Rule SwitchStmtLinha
ruleSwitchStmtLinha:
	(
		ruleExpression
		'{'
		ruleExprCaseClause*
		'}'
		    |
		ruleTypeSwitchGuard
		'{'
		ruleTypeCaseClause*
		'}'
	)
;

// Rule TypeCaseClause
ruleTypeCaseClause:
	ruleTypeSwitchCase
	':'
	ruleStatementList
;

// Rule TypeSwitchCase
ruleTypeSwitchCase:
	(
		'case'
		ruleTypeList
		    |
		'default'
	)
;

// Rule TypeList
ruleTypeList:
	ruleType
	(
		','
		ruleType
	)*
;

// Rule TypeSwitchGuard
ruleTypeSwitchGuard:
	RULE_IDENTIFIER
	':='
	rulePrimaryExpr
	'.'
	'('
	'type'
	')'
;

// Rule ExprCaseClause
ruleExprCaseClause:
	ruleExprSwitchCase
	':'
	ruleStatementList
;

// Rule ExprSwitchCase
ruleExprSwitchCase:
	(
		'case'
		ruleExpressionList
		    |
		'default'
	)
;

// Rule IfStmt
ruleIfStmt:
	'if'
	ruleSimpleStmt
	';'
	ruleExpression
	ruleBlock
	'else'
	(
		ruleIfStmt
		    |
		ruleBlock
	)
;

// Rule FallthroughStmt
ruleFallthroughStmt:
	'fallthrough'
;

// Rule GotoStmt
ruleGotoStmt:
	'goto'
	ruleLabel
;

// Rule ContinueStmt
ruleContinueStmt:
	'continue'
	ruleLabel
;

// Rule BreakStmt
ruleBreakStmt:
	'break'
	ruleLabel
;

// Rule ReturnStmt
ruleReturnStmt:
	'return'
	ruleExpressionList
;

// Rule GoStmt
ruleGoStmt:
	'go'
	ruleLabel
;

// Rule SimpleStmt
ruleSimpleStmt:
	(
		ruleExpression
		ruleSimpleStmtLinha
		    |
		RULE_IDENTIFIER
		(
			','
			RULE_IDENTIFIER
		)*
		':='
		ruleExpression
		(
			','
			ruleExpression
		)*
	)
;

// Rule SimpleStmtLinha
ruleSimpleStmtLinha:
	(
		'<-'
		ruleExpression
		    |
		(
			'++'
			    |
			'--'
		)
		    |
		(
			','
			ruleExpression
		)*
		ruleassign_op
		ruleExpression
		(
			','
			ruleExpression
		)*
	)
;

// Rule assign_op
ruleassign_op:
	(
		RULE_ADD_OP
		    |
		RULE_MUL_OP
	)
	'='
;

// Rule Channel
ruleChannel:
	ruleExpression
;

// Rule LabeledStmt
ruleLabeledStmt:
	ruleLabel
	':'
	ruleStatement
;

// Rule Label
ruleLabel:
	RULE_IDENTIFIER
;

// Rule Declaration
ruleDeclaration:
	(
		ruleConstDecl
		    |
		ruleTypeDecl
		    |
		ruleVarDecl
	)
;

// Rule TopLevelDecl
ruleTopLevelDecl:
	(
		ruleDeclaration
		    |
		ruleFunctionDecl
		    |
		ruleMethodDecl
	)
;

// Rule ConstDecl
ruleConstDecl:
	'const'
	(
		ruleConstSpec
		    |
		'('
		(
			ruleConstSpec
			';'
		)*
		')'
	)
;

// Rule ConstSpec
ruleConstSpec:
	ruleIdentifierList
	(
		ruleType?
		'='
		ruleExpressionList
	)?
;

// Rule TypeDecl
ruleTypeDecl:
	'type'
	(
		ruleTypeSpec
		    |
		'('
		(
			ruleTypeSpec
			';'
		)*
		')'
	)
;

// Rule TypeSpec
ruleTypeSpec:
	(
		ruleAliasDecl
		    |
		ruleTypeDef
	)
;

// Rule AliasDecl
ruleAliasDecl:
	RULE_IDENTIFIER
	'='
	ruleType
;

// Rule TypeDef
ruleTypeDef:
	RULE_IDENTIFIER
	ruleType
;

// Rule VarDecl
ruleVarDecl:
	'var'
	(
		ruleVarSpec
		    |
		'('
		(
			ruleVarSpec
			';'
		)*
		')'
	)
;

// Rule VarSpec
ruleVarSpec:
	ruleIdentifierList
	(
		ruleType
		(
			'='
			ruleExpressionList
		)?
		    |
		'='
		ruleExpressionList
	)
;

// Rule FunctionDecl
ruleFunctionDecl:
	'func'
	ruleFunctionName
	ruleSignature
	ruleFunctionBody?
;

// Rule FunctionName
ruleFunctionName:
	RULE_IDENTIFIER
;

// Rule FunctionBody
ruleFunctionBody:
	ruleBlock
;

// Rule MethodDecl
ruleMethodDecl:
	'func'
	ruleReceiver
	ruleMethodName
	ruleSignature
	ruleFunctionBody?
;

// Rule Receiver
ruleReceiver:
	ruleParameters
;

// Rule Literal
ruleLiteral:
	(
		ruleBasicLit
		    |
		ruleCompositeLit
		    |
		ruleFunctionLit
	)
;

// Rule BasicLit
ruleBasicLit:
	(
		RULE_INT_LITERAL
		    |
		RULE_STRING_LIT
		    |
		rulefloat_literal
		    |
		ruleImaginary_lit
	)
;

// Rule OperandName
ruleOperandName:
	RULE_IDENTIFIER
	ruleOperandNameLinha
;

// Rule OperandNameLinha
ruleOperandNameLinha:
	(
		'.'
		RULE_IDENTIFIER
		    |
		RULE_ANY_OTHER
	)
;

// Rule CompositeLit
ruleCompositeLit:
	ruleLiteralType
	ruleLiteralValue
;

// Rule LiteralType
ruleLiteralType:
	(
		ruleStructType
		    |
		ruleMapType
		    |
		ruleTypeName
		    |
		'['
		ruleLiteralTypeLinha
	)
;

// Rule LiteralTypeLinha
ruleLiteralTypeLinha:
	(
		(
			(ruleArrayLength)=>
			ruleArrayLength
		)
		']'
		ruleElementType
		    |
		'...'
		']'
		ruleElementType
		    |
		']'
		ruleElementType
	)
;

// Rule LiteralValue
ruleLiteralValue:
	'{'
	(
		(
			(ruleKey
			':'
			)=>
			ruleElementList
		)
		','?
	)?
	'}'
;

// Rule ElementList
ruleElementList:
	(
		(ruleKey
		':'
		)=>
		ruleKeyedElement
	)
	(
		','
		(
			(ruleKey
			':'
			)=>
			ruleKeyedElement
		)
	)*
;

// Rule KeyedElement
ruleKeyedElement:
	(
		(ruleKey
		':'
		)=>
		ruleKey
		':'
	)?
	ruleElement
;

// Rule Key
ruleKey:
	(
		ruleFieldName
		    |
		ruleExpression
		    |
		ruleLiteralValue
	)
;

// Rule FieldName
ruleFieldName:
	RULE_IDENTIFIER
;

// Rule Element
ruleElement:
	(
		ruleExpression
		    |
		ruleLiteralValue
	)
;

// Rule FunctionLit
ruleFunctionLit:
	'func'
	ruleSignature
	ruleFunctionBody
;

// Rule ReceiverType
ruleReceiverType:
	ruleType
;

// Rule SourceFile
ruleSourceFile:
	rulePackageClause
	';'
	(
		ruleImportDecl
		';'
	)*
	(
		ruleTopLevelDecl
		';'
	)*
;

// Rule PackageClause
rulePackageClause:
	'package'
	rulePackageName
;

// Rule ImportDecl
ruleImportDecl:
	'import'
	(
		ruleImportSpec
		    |
		'('
		(
			ruleImportSpec
			';'
		)*
		')'
	)
;

// Rule ImportSpec
ruleImportSpec:
	(
		'.'
		    |
		rulePackageName
	)?
	ruleImportPath
;

// Rule ImportPath
ruleImportPath:
	RULE_STRING_LIT
;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z'|'_');

fragment RULE_NEW_LINE : ('\n'|'\r'|'\n\r');

RULE_UNICODE_CHAR : ~(RULE_NEW_LINE);

RULE_INT_LITERAL : ('1'..'9' ('0'..'9')*|('0'..'7')*|'0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+);

RULE_DECIMAL_DIGITS : '0'..'9' ('0'..'9')*;

RULE_EXPONENT_PART : 'e' ('+'|'-') RULE_DECIMAL_DIGITS;

RULE_STRING_LIT : 'oi';

RULE_RUNE_LIT : 'oiiii';

RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

RULE_ADD_OP : ('+'|'-'|'|'|'^');

RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
