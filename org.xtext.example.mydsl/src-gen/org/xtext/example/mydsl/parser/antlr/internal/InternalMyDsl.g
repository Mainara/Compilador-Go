/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0());
			}
			lv_greetings_0_0=ruleGreeting
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.example.mydsl.MyDsl.Greeting");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleGreeting
entryRuleGreeting returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	iv_ruleGreeting=ruleGreeting
	{ $current=$iv_ruleGreeting.current.getText(); }
	EOF;

// Rule Greeting
ruleGreeting returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getGreetingAccess().getSourceFileParserRuleCall());
	}
	this_SourceFile_0=ruleSourceFile
	{
		$current.merge(this_SourceFile_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulefloat_literal
entryRulefloat_literal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloat_literalRule()); }
	iv_rulefloat_literal=rulefloat_literal
	{ $current=$iv_rulefloat_literal.current.getText(); }
	EOF;

// Rule float_literal
rulefloat_literal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_DECIMAL_DIGITS_0=RULE_DECIMAL_DIGITS
			{
				$current.merge(this_DECIMAL_DIGITS_0);
			}
			{
				newLeafNode(this_DECIMAL_DIGITS_0, grammarAccess.getFloat_literalAccess().getDECIMAL_DIGITSTerminalRuleCall_0_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloat_literalAccess().getFullStopKeyword_0_1());
			}
			this_DECIMAL_DIGITS_2=RULE_DECIMAL_DIGITS
			{
				$current.merge(this_DECIMAL_DIGITS_2);
			}
			{
				newLeafNode(this_DECIMAL_DIGITS_2, grammarAccess.getFloat_literalAccess().getDECIMAL_DIGITSTerminalRuleCall_0_2());
			}
			this_EXPONENT_PART_3=RULE_EXPONENT_PART
			{
				$current.merge(this_EXPONENT_PART_3);
			}
			{
				newLeafNode(this_EXPONENT_PART_3, grammarAccess.getFloat_literalAccess().getEXPONENT_PARTTerminalRuleCall_0_3());
			}
		)
		    |
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloat_literalAccess().getFullStopKeyword_1_0());
			}
			this_DECIMAL_DIGITS_5=RULE_DECIMAL_DIGITS
			{
				$current.merge(this_DECIMAL_DIGITS_5);
			}
			{
				newLeafNode(this_DECIMAL_DIGITS_5, grammarAccess.getFloat_literalAccess().getDECIMAL_DIGITSTerminalRuleCall_1_1());
			}
			this_EXPONENT_PART_6=RULE_EXPONENT_PART
			{
				$current.merge(this_EXPONENT_PART_6);
			}
			{
				newLeafNode(this_EXPONENT_PART_6, grammarAccess.getFloat_literalAccess().getEXPONENT_PARTTerminalRuleCall_1_2());
			}
		)
		    |
		(
			this_DECIMAL_DIGITS_7=RULE_DECIMAL_DIGITS
			{
				$current.merge(this_DECIMAL_DIGITS_7);
			}
			{
				newLeafNode(this_DECIMAL_DIGITS_7, grammarAccess.getFloat_literalAccess().getDECIMAL_DIGITSTerminalRuleCall_2_0());
			}
			this_EXPONENT_PART_8=RULE_EXPONENT_PART
			{
				$current.merge(this_EXPONENT_PART_8);
			}
			{
				newLeafNode(this_EXPONENT_PART_8, grammarAccess.getFloat_literalAccess().getEXPONENT_PARTTerminalRuleCall_2_1());
			}
		)
	)
;

// Entry rule entryRuleImaginary_lit
entryRuleImaginary_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImaginary_litRule()); }
	iv_ruleImaginary_lit=ruleImaginary_lit
	{ $current=$iv_ruleImaginary_lit.current.getText(); }
	EOF;

// Rule Imaginary_lit
ruleImaginary_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_DECIMAL_DIGITS_0=RULE_DECIMAL_DIGITS
			{
				$current.merge(this_DECIMAL_DIGITS_0);
			}
			{
				newLeafNode(this_DECIMAL_DIGITS_0, grammarAccess.getImaginary_litAccess().getDECIMAL_DIGITSTerminalRuleCall_0_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getImaginary_litAccess().getFloat_literalParserRuleCall_0_1());
			}
			this_float_literal_1=rulefloat_literal
			{
				$current.merge(this_float_literal_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='i'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImaginary_litAccess().getIKeyword_1());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getTypeNameParserRuleCall_0());
		}
		this_TypeName_0=ruleTypeName
		{
			$current.merge(this_TypeName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getTypeLitParserRuleCall_1());
		}
		this_TypeLit_1=ruleTypeLit
		{
			$current.merge(this_TypeLit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeAccess().getTypeParserRuleCall_2_1());
			}
			this_Type_3=ruleType
			{
				$current.merge(this_Type_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current.getText(); }
	EOF;

// Rule TypeName
ruleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeNameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getTypeNameLinhaParserRuleCall_1());
		}
		this_TypeNameLinha_1=ruleTypeNameLinha
		{
			$current.merge(this_TypeNameLinha_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeNameLinha
entryRuleTypeNameLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameLinhaRule()); }
	iv_ruleTypeNameLinha=ruleTypeNameLinha
	{ $current=$iv_ruleTypeNameLinha.current.getText(); }
	EOF;

// Rule TypeNameLinha
ruleTypeNameLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeNameLinhaAccess().getFullStopKeyword_0_0());
			}
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getTypeNameLinhaAccess().getIDENTIFIERTerminalRuleCall_0_1());
			}
		)
		    |
		this_ANY_OTHER_2=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_2);
		}
		{
			newLeafNode(this_ANY_OTHER_2, grammarAccess.getTypeNameLinhaAccess().getANY_OTHERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePackageName
entryRulePackageName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackageNameRule()); }
	iv_rulePackageName=rulePackageName
	{ $current=$iv_rulePackageName.current.getText(); }
	EOF;

// Rule PackageName
rulePackageName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_IDENTIFIER_0=RULE_IDENTIFIER
	{
		$current.merge(this_IDENTIFIER_0);
	}
	{
		newLeafNode(this_IDENTIFIER_0, grammarAccess.getPackageNameAccess().getIDENTIFIERTerminalRuleCall());
	}
;

// Entry rule entryRuleTypeLit
entryRuleTypeLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeLitRule()); }
	iv_ruleTypeLit=ruleTypeLit
	{ $current=$iv_ruleTypeLit.current.getText(); }
	EOF;

// Rule TypeLit
ruleTypeLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLitAccess().getLeftSquareBracketKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeLitAccess().getTypeLitLinhaParserRuleCall_0_1());
			}
			this_TypeLitLinha_1=ruleTypeLitLinha
			{
				$current.merge(this_TypeLitLinha_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getStructTypeParserRuleCall_1());
		}
		this_StructType_2=ruleStructType
		{
			$current.merge(this_StructType_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getPointerTypeParserRuleCall_2());
		}
		this_PointerType_3=rulePointerType
		{
			$current.merge(this_PointerType_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getFunctionTypeParserRuleCall_3());
		}
		this_FunctionType_4=ruleFunctionType
		{
			$current.merge(this_FunctionType_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getInterfaceTypeParserRuleCall_4());
		}
		this_InterfaceType_5=ruleInterfaceType
		{
			$current.merge(this_InterfaceType_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getMapTypeParserRuleCall_5());
		}
		this_MapType_6=ruleMapType
		{
			$current.merge(this_MapType_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getChannelTypeParserRuleCall_6());
		}
		this_ChannelType_7=ruleChannelType
		{
			$current.merge(this_ChannelType_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeLitLinha
entryRuleTypeLitLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeLitLinhaRule()); }
	iv_ruleTypeLitLinha=ruleTypeLitLinha
	{ $current=$iv_ruleTypeLitLinha.current.getText(); }
	EOF;

// Rule TypeLitLinha
ruleTypeLitLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTypeLitLinhaAccess().getArrayLengthParserRuleCall_0_0());
			}
			this_ArrayLength_0=ruleArrayLength
			{
				$current.merge(this_ArrayLength_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLitLinhaAccess().getRightSquareBracketKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getTypeLitLinhaAccess().getElementTypeParserRuleCall_0_2());
			}
			this_ElementType_2=ruleElementType
			{
				$current.merge(this_ElementType_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLitLinhaAccess().getRightSquareBracketKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeLitLinhaAccess().getElementTypeParserRuleCall_1_1());
			}
			this_ElementType_4=ruleElementType
			{
				$current.merge(this_ElementType_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleArrayLength
entryRuleArrayLength returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArrayLengthRule()); }
	iv_ruleArrayLength=ruleArrayLength
	{ $current=$iv_ruleArrayLength.current.getText(); }
	EOF;

// Rule ArrayLength
ruleArrayLength returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArrayLengthAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current.merge(this_Expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleElementType
entryRuleElementType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementTypeRule()); }
	iv_ruleElementType=ruleElementType
	{ $current=$iv_ruleElementType.current.getText(); }
	EOF;

// Rule ElementType
ruleElementType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getElementTypeAccess().getTypeParserRuleCall());
	}
	this_Type_0=ruleType
	{
		$current.merge(this_Type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleStructType
entryRuleStructType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); }
	iv_ruleStructType=ruleStructType
	{ $current=$iv_ruleStructType.current.getText(); }
	EOF;

// Rule StructType
ruleStructType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='struct'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructTypeAccess().getStructKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getStructTypeAccess().getFieldDeclParserRuleCall_2_0());
			}
			this_FieldDecl_2=ruleFieldDecl
			{
				$current.merge(this_FieldDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStructTypeAccess().getSemicolonKeyword_2_1());
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFieldDecl
entryRuleFieldDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_ruleFieldDecl=ruleFieldDecl
	{ $current=$iv_ruleFieldDecl.current.getText(); }
	EOF;

// Rule FieldDecl
ruleFieldDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getIdentifierListParserRuleCall_0_0_0());
				}
				this_IdentifierList_0=ruleIdentifierList
				{
					$current.merge(this_IdentifierList_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getTypeParserRuleCall_0_0_1());
				}
				this_Type_1=ruleType
				{
					$current.merge(this_Type_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getFieldDeclAccess().getEmbeddedFieldParserRuleCall_0_1());
			}
			this_EmbeddedField_2=ruleEmbeddedField
			{
				$current.merge(this_EmbeddedField_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getFieldDeclAccess().getTagParserRuleCall_1());
			}
			this_Tag_3=ruleTag
			{
				$current.merge(this_Tag_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleEmbeddedField
entryRuleEmbeddedField returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEmbeddedFieldRule()); }
	iv_ruleEmbeddedField=ruleEmbeddedField
	{ $current=$iv_ruleEmbeddedField.current.getText(); }
	EOF;

// Rule EmbeddedField
ruleEmbeddedField returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEmbeddedFieldAccess().getAsteriskKeyword_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getEmbeddedFieldAccess().getTypeNameParserRuleCall_1());
		}
		this_TypeName_1=ruleTypeName
		{
			$current.merge(this_TypeName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTag
entryRuleTag returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	iv_ruleTag=ruleTag
	{ $current=$iv_ruleTag.current.getText(); }
	EOF;

// Rule Tag
ruleTag returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_LIT_0=RULE_STRING_LIT
	{
		$current.merge(this_STRING_LIT_0);
	}
	{
		newLeafNode(this_STRING_LIT_0, grammarAccess.getTagAccess().getSTRING_LITTerminalRuleCall());
	}
;

// Entry rule entryRulePointerType
entryRulePointerType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPointerTypeRule()); }
	iv_rulePointerType=rulePointerType
	{ $current=$iv_rulePointerType.current.getText(); }
	EOF;

// Rule PointerType
rulePointerType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPointerTypeAccess().getAsteriskKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getPointerTypeAccess().getBaseTypeParserRuleCall_1());
		}
		this_BaseType_1=ruleBaseType
		{
			$current.merge(this_BaseType_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBaseType
entryRuleBaseType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBaseTypeRule()); }
	iv_ruleBaseType=ruleBaseType
	{ $current=$iv_ruleBaseType.current.getText(); }
	EOF;

// Rule BaseType
ruleBaseType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBaseTypeAccess().getTypeParserRuleCall());
	}
	this_Type_0=ruleType
	{
		$current.merge(this_Type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFunctionType
entryRuleFunctionType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_ruleFunctionType=ruleFunctionType
	{ $current=$iv_ruleFunctionType.current.getText(); }
	EOF;

// Rule FunctionType
ruleFunctionType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionTypeAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunctionTypeAccess().getSignatureParserRuleCall_1());
		}
		this_Signature_1=ruleSignature
		{
			$current.merge(this_Signature_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSignature
entryRuleSignature returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_ruleSignature=ruleSignature
	{ $current=$iv_ruleSignature.current.getText(); }
	EOF;

// Rule Signature
ruleSignature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current.merge(this_Parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(ruleResult)=>
			{
				newCompositeNode(grammarAccess.getSignatureAccess().getResultParserRuleCall_1());
			}
			this_Result_1=ruleResult
			{
				$current.merge(this_Result_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [String current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current.getText(); }
	EOF;

// Rule Result
ruleResult returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleParameters)=>
			{
				newCompositeNode(grammarAccess.getResultAccess().getParametersParserRuleCall_0());
			}
			this_Parameters_0=ruleParameters
			{
				$current.merge(this_Parameters_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getResultAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current.merge(this_Type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current.getText(); }
	EOF;

// Rule Parameters
ruleParameters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0());
			}
			this_ParameterList_1=ruleParameterList
			{
				$current.merge(this_ParameterList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current.getText(); }
	EOF;

// Rule ParameterList
ruleParameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0());
		}
		this_ParameterDecl_0=ruleParameterDecl
		{
			$current.merge(this_ParameterDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_1_1());
			}
			this_ParameterDecl_2=ruleParameterDecl
			{
				$current.merge(this_ParameterDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleParameterDecl
entryRuleParameterDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclRule()); }
	iv_ruleParameterDecl=ruleParameterDecl
	{ $current=$iv_ruleParameterDecl.current.getText(); }
	EOF;

// Rule ParameterDecl
ruleParameterDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameterDeclAccess().getIdentifierListParserRuleCall_0());
			}
			this_IdentifierList_0=ruleIdentifierList
			{
				$current.merge(this_IdentifierList_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getParameterDeclAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current.merge(this_Type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInterfaceType
entryRuleInterfaceType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceTypeRule()); }
	iv_ruleInterfaceType=ruleInterfaceType
	{ $current=$iv_ruleInterfaceType.current.getText(); }
	EOF;

// Rule InterfaceType
ruleInterfaceType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='interface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterfaceTypeAccess().getInterfaceKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterfaceTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getInterfaceTypeAccess().getMethodSpecParserRuleCall_2_0());
			}
			this_MethodSpec_2=ruleMethodSpec
			{
				$current.merge(this_MethodSpec_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInterfaceTypeAccess().getSemicolonKeyword_2_1());
			}
		)
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterfaceTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMethodSpec
entryRuleMethodSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodSpecRule()); }
	iv_ruleMethodSpec=ruleMethodSpec
	{ $current=$iv_ruleMethodSpec.current.getText(); }
	EOF;

// Rule MethodSpec
ruleMethodSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMethodSpecAccess().getMethodNameParserRuleCall_0_0());
			}
			this_MethodName_0=ruleMethodName
			{
				$current.merge(this_MethodName_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getMethodSpecAccess().getSignatureParserRuleCall_0_1());
			}
			this_Signature_1=ruleSignature
			{
				$current.merge(this_Signature_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getMethodSpecAccess().getInterfaceTypeNameParserRuleCall_1());
		}
		this_InterfaceTypeName_2=ruleInterfaceTypeName
		{
			$current.merge(this_InterfaceTypeName_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMethodName
entryRuleMethodName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodNameRule()); }
	iv_ruleMethodName=ruleMethodName
	{ $current=$iv_ruleMethodName.current.getText(); }
	EOF;

// Rule MethodName
ruleMethodName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_IDENTIFIER_0=RULE_IDENTIFIER
	{
		$current.merge(this_IDENTIFIER_0);
	}
	{
		newLeafNode(this_IDENTIFIER_0, grammarAccess.getMethodNameAccess().getIDENTIFIERTerminalRuleCall());
	}
;

// Entry rule entryRuleInterfaceTypeName
entryRuleInterfaceTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceTypeNameRule()); }
	iv_ruleInterfaceTypeName=ruleInterfaceTypeName
	{ $current=$iv_ruleInterfaceTypeName.current.getText(); }
	EOF;

// Rule InterfaceTypeName
ruleInterfaceTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInterfaceTypeNameAccess().getTypeNameParserRuleCall());
	}
	this_TypeName_0=ruleTypeName
	{
		$current.merge(this_TypeName_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleMapType
entryRuleMapType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	iv_ruleMapType=ruleMapType
	{ $current=$iv_ruleMapType.current.getText(); }
	EOF;

// Rule MapType
ruleMapType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='map'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMapTypeAccess().getMapKeyword_0());
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMapTypeAccess().getLeftSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getMapTypeAccess().getKeyTypeParserRuleCall_2());
		}
		this_KeyType_2=ruleKeyType
		{
			$current.merge(this_KeyType_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMapTypeAccess().getRightSquareBracketKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getMapTypeAccess().getElementTypeParserRuleCall_4());
		}
		this_ElementType_4=ruleElementType
		{
			$current.merge(this_ElementType_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleKeyType
entryRuleKeyType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKeyTypeRule()); }
	iv_ruleKeyType=ruleKeyType
	{ $current=$iv_ruleKeyType.current.getText(); }
	EOF;

// Rule KeyType
ruleKeyType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getKeyTypeAccess().getTypeParserRuleCall());
	}
	this_Type_0=ruleType
	{
		$current.merge(this_Type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleChannelType
entryRuleChannelType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChannelTypeRule()); }
	iv_ruleChannelType=ruleChannelType
	{ $current=$iv_ruleChannelType.current.getText(); }
	EOF;

// Rule ChannelType
ruleChannelType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				kw='chan'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getChannelTypeAccess().getChanKeyword_0_0_0());
				}
				{
					newCompositeNode(grammarAccess.getChannelTypeAccess().getChannelTypeLinhaParserRuleCall_0_0_1());
				}
				this_ChannelTypeLinha_1=ruleChannelTypeLinha
				{
					$current.merge(this_ChannelTypeLinha_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				kw='<-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_1_0());
				}
				kw='chan'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getChannelTypeAccess().getChanKeyword_0_1_1());
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getChannelTypeAccess().getElementTypeParserRuleCall_1());
		}
		this_ElementType_4=ruleElementType
		{
			$current.merge(this_ElementType_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleChannelTypeLinha
entryRuleChannelTypeLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChannelTypeLinhaRule()); }
	iv_ruleChannelTypeLinha=ruleChannelTypeLinha
	{ $current=$iv_ruleChannelTypeLinha.current.getText(); }
	EOF;

// Rule ChannelTypeLinha
ruleChannelTypeLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChannelTypeLinhaAccess().getLessThanSignHyphenMinusKeyword_0());
		}
		    |
		this_ANY_OTHER_1=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_1);
		}
		{
			newLeafNode(this_ANY_OTHER_1, grammarAccess.getChannelTypeLinhaAccess().getANY_OTHERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current.getText(); }
	EOF;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getUnaryExprParserRuleCall_0());
		}
		this_UnaryExpr_0=ruleUnaryExpr
		{
			$current.merge(this_UnaryExpr_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getExpression_LinhaParserRuleCall_1());
		}
		this_Expression_Linha_1=ruleExpression_Linha
		{
			$current.merge(this_Expression_Linha_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression_Linha
entryRuleExpression_Linha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpression_LinhaRule()); }
	iv_ruleExpression_Linha=ruleExpression_Linha
	{ $current=$iv_ruleExpression_Linha.current.getText(); }
	EOF;

// Rule Expression_Linha
ruleExpression_Linha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression_LinhaAccess().getBinary_opParserRuleCall_0());
		}
		this_binary_op_0=rulebinary_op
		{
			$current.merge(this_binary_op_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getExpression_LinhaAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current.merge(this_Expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getExpression_LinhaAccess().getExpression_LinhaParserRuleCall_2());
		}
		this_Expression_Linha_2=ruleExpression_Linha
		{
			$current.merge(this_Expression_Linha_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	iv_ruleUnaryExpr=ruleUnaryExpr
	{ $current=$iv_ruleUnaryExpr.current.getText(); }
	EOF;

// Rule UnaryExpr
ruleUnaryExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExprAccess().getPrimaryExprParserRuleCall_0());
		}
		this_PrimaryExpr_0=rulePrimaryExpr
		{
			$current.merge(this_PrimaryExpr_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			this_UNARY_OP_1=RULE_UNARY_OP
			{
				$current.merge(this_UNARY_OP_1);
			}
			{
				newLeafNode(this_UNARY_OP_1, grammarAccess.getUnaryExprAccess().getUNARY_OPTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getUnaryExprAccess().getUnaryExprParserRuleCall_1_1());
			}
			this_UnaryExpr_2=ruleUnaryExpr
			{
				$current.merge(this_UnaryExpr_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulebinary_op
entryRulebinary_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinary_opRule()); }
	iv_rulebinary_op=rulebinary_op
	{ $current=$iv_rulebinary_op.current.getText(); }
	EOF;

// Rule binary_op
rulebinary_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='||'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinary_opAccess().getVerticalLineVerticalLineKeyword_0());
		}
		    |
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinary_opAccess().getAmpersandAmpersandKeyword_1());
		}
		    |
		this_REL_OP_2=RULE_REL_OP
		{
			$current.merge(this_REL_OP_2);
		}
		{
			newLeafNode(this_REL_OP_2, grammarAccess.getBinary_opAccess().getREL_OPTerminalRuleCall_2());
		}
		    |
		this_ADD_OP_3=RULE_ADD_OP
		{
			$current.merge(this_ADD_OP_3);
		}
		{
			newLeafNode(this_ADD_OP_3, grammarAccess.getBinary_opAccess().getADD_OPTerminalRuleCall_3());
		}
		    |
		this_MUL_OP_4=RULE_MUL_OP
		{
			$current.merge(this_MUL_OP_4);
		}
		{
			newLeafNode(this_MUL_OP_4, grammarAccess.getBinary_opAccess().getMUL_OPTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	iv_rulePrimaryExpr=rulePrimaryExpr
	{ $current=$iv_rulePrimaryExpr.current.getText(); }
	EOF;

// Rule PrimaryExpr
rulePrimaryExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getBasicLitParserRuleCall_0_0());
			}
			this_BasicLit_0=ruleBasicLit
			{
				$current.merge(this_BasicLit_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_0_1());
			}
			this_PrimaryExprLinha_1=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getStructTypeParserRuleCall_1_0());
			}
			this_StructType_2=ruleStructType
			{
				$current.merge(this_StructType_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatFatFatFatParserRuleCall_1_1());
			}
			this_PrimaryExprFatFatFatFat_3=rulePrimaryExprFatFatFatFat
			{
				$current.merge(this_PrimaryExprFatFatFatFat_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getMapTypeParserRuleCall_2_0());
			}
			this_MapType_4=ruleMapType
			{
				$current.merge(this_MapType_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatFatFatFatParserRuleCall_2_1());
			}
			this_PrimaryExprFatFatFatFat_5=rulePrimaryExprFatFatFatFat
			{
				$current.merge(this_PrimaryExprFatFatFatFat_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='func'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprAccess().getFuncKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getSignatureParserRuleCall_3_1());
			}
			this_Signature_7=ruleSignature
			{
				$current.merge(this_Signature_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatFatFatFatFatParserRuleCall_3_2());
			}
			this_PrimaryExprFatFatFatFatFat_8=rulePrimaryExprFatFatFatFatFat
			{
				$current.merge(this_PrimaryExprFatFatFatFatFat_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_3_3());
			}
			this_PrimaryExprLinha_9=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprAccess().getFullStopFullStopFullStopKeyword_4_0());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprAccess().getRightSquareBracketKeyword_4_1());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getElementTypeParserRuleCall_4_2());
			}
			this_ElementType_12=ruleElementType
			{
				$current.merge(this_ElementType_12);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getLiteralValueParserRuleCall_4_3());
			}
			this_LiteralValue_13=ruleLiteralValue
			{
				$current.merge(this_LiteralValue_13);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_4_4());
			}
			this_PrimaryExprLinha_14=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_14);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getNameParserRuleCall_5_0());
			}
			this_Name_15=ruleName
			{
				$current.merge(this_Name_15);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatFatFatParserRuleCall_5_1());
			}
			this_PrimaryExprFatFatFat_16=rulePrimaryExprFatFatFat
			{
				$current.merge(this_PrimaryExprFatFatFat_16);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_5_2());
			}
			this_PrimaryExprLinha_17=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_17);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatFatParserRuleCall_6_1());
			}
			this_PrimaryExprFatFat_19=rulePrimaryExprFatFat
			{
				$current.merge(this_PrimaryExprFatFat_19);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_6_2());
			}
			this_PrimaryExprLinha_20=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_20);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprAccess().getLeftSquareBracketKeyword_7_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getTypeLitLinhaParserRuleCall_7_1());
			}
			this_TypeLitLinha_22=ruleTypeLitLinha
			{
				$current.merge(this_TypeLitLinha_22);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatFatFatFatFatFatParserRuleCall_7_2());
			}
			this_PrimaryExprFatFatFatFatFatFat_23=rulePrimaryExprFatFatFatFatFatFat
			{
				$current.merge(this_PrimaryExprFatFatFatFatFatFat_23);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_7_3());
			}
			this_PrimaryExprLinha_24=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_24);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPointerTypeParserRuleCall_8_0());
			}
			this_PointerType_25=rulePointerType
			{
				$current.merge(this_PointerType_25);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatParserRuleCall_8_1());
			}
			this_PrimaryExprFat_26=rulePrimaryExprFat
			{
				$current.merge(this_PrimaryExprFat_26);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_8_2());
			}
			this_PrimaryExprLinha_27=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_27);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getInterfaceTypeParserRuleCall_9_0());
			}
			this_InterfaceType_28=ruleInterfaceType
			{
				$current.merge(this_InterfaceType_28);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatParserRuleCall_9_1());
			}
			this_PrimaryExprFat_29=rulePrimaryExprFat
			{
				$current.merge(this_PrimaryExprFat_29);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_9_2());
			}
			this_PrimaryExprLinha_30=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_30);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getChannelTypeParserRuleCall_10_0());
			}
			this_ChannelType_31=ruleChannelType
			{
				$current.merge(this_ChannelType_31);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprFatParserRuleCall_10_1());
			}
			this_PrimaryExprFat_32=rulePrimaryExprFat
			{
				$current.merge(this_PrimaryExprFat_32);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprLinhaParserRuleCall_10_2());
			}
			this_PrimaryExprLinha_33=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_33);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrimaryExprFatFatFatFatFatFat
entryRulePrimaryExprFatFatFatFatFatFat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatFatFatRule()); }
	iv_rulePrimaryExprFatFatFatFatFatFat=rulePrimaryExprFatFatFatFatFatFat
	{ $current=$iv_rulePrimaryExprFatFatFatFatFatFat.current.getText(); }
	EOF;

// Rule PrimaryExprFatFatFatFatFatFat
rulePrimaryExprFatFatFatFatFatFat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatFatFatAccess().getLiteralValueParserRuleCall_0());
		}
		this_LiteralValue_0=ruleLiteralValue
		{
			$current.merge(this_LiteralValue_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatFatFatAccess().getPrimaryExprFatParserRuleCall_1());
		}
		this_PrimaryExprFat_1=rulePrimaryExprFat
		{
			$current.merge(this_PrimaryExprFat_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimaryExprFatFatFatFatFat
entryRulePrimaryExprFatFatFatFatFat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatFatRule()); }
	iv_rulePrimaryExprFatFatFatFatFat=rulePrimaryExprFatFatFatFatFat
	{ $current=$iv_rulePrimaryExprFatFatFatFatFat.current.getText(); }
	EOF;

// Rule PrimaryExprFatFatFatFatFat
rulePrimaryExprFatFatFatFatFat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatFatAccess().getFunctionBodyParserRuleCall_0());
		}
		this_FunctionBody_0=ruleFunctionBody
		{
			$current.merge(this_FunctionBody_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatFatAccess().getPrimaryExprFatParserRuleCall_1());
		}
		this_PrimaryExprFat_1=rulePrimaryExprFat
		{
			$current.merge(this_PrimaryExprFat_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimaryExprFatFatFatFat
entryRulePrimaryExprFatFatFatFat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatRule()); }
	iv_rulePrimaryExprFatFatFatFat=rulePrimaryExprFatFatFatFat
	{ $current=$iv_rulePrimaryExprFatFatFatFat.current.getText(); }
	EOF;

// Rule PrimaryExprFatFatFatFat
rulePrimaryExprFatFatFatFat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatAccess().getLiteralValueParserRuleCall_0());
		}
		this_LiteralValue_0=ruleLiteralValue
		{
			$current.merge(this_LiteralValue_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprFatFatFatFatAccess().getPrimaryExprFatParserRuleCall_1());
		}
		this_PrimaryExprFat_1=rulePrimaryExprFat
		{
			$current.merge(this_PrimaryExprFat_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimaryExprFatFatFat
entryRulePrimaryExprFatFatFat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprFatFatFatRule()); }
	iv_rulePrimaryExprFatFatFat=rulePrimaryExprFatFatFat
	{ $current=$iv_rulePrimaryExprFatFatFat.current.getText(); }
	EOF;

// Rule PrimaryExprFatFatFat
rulePrimaryExprFatFatFat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprFatFatFatAccess().getLiteralValueParserRuleCall_0());
		}
		this_LiteralValue_0=ruleLiteralValue
		{
			$current.merge(this_LiteralValue_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprFatFatFatAccess().getPrimaryExprFatParserRuleCall_1());
		}
		this_PrimaryExprFat_1=rulePrimaryExprFat
		{
			$current.merge(this_PrimaryExprFat_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ANY_OTHER_2=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_2);
		}
		{
			newLeafNode(this_ANY_OTHER_2, grammarAccess.getPrimaryExprFatFatFatAccess().getANY_OTHERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleName
entryRuleName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current.getText(); }
	EOF;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getNameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getNameAccess().getNameLinhaParserRuleCall_1());
		}
		this_NameLinha_1=ruleNameLinha
		{
			$current.merge(this_NameLinha_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNameLinha
entryRuleNameLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNameLinhaRule()); }
	iv_ruleNameLinha=ruleNameLinha
	{ $current=$iv_ruleNameLinha.current.getText(); }
	EOF;

// Rule NameLinha
ruleNameLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNameLinhaAccess().getFullStopKeyword_0_0());
			}
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getNameLinhaAccess().getIDENTIFIERTerminalRuleCall_0_1());
			}
		)
		    |
		this_ANY_OTHER_2=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_2);
		}
		{
			newLeafNode(this_ANY_OTHER_2, grammarAccess.getNameLinhaAccess().getANY_OTHERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePrimaryExprFatFat
entryRulePrimaryExprFatFat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprFatFatRule()); }
	iv_rulePrimaryExprFatFat=rulePrimaryExprFatFat
	{ $current=$iv_rulePrimaryExprFatFat.current.getText(); }
	EOF;

// Rule PrimaryExprFatFat
rulePrimaryExprFatFat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(ruleExpression)=>
				{
					newCompositeNode(grammarAccess.getPrimaryExprFatFatAccess().getExpressionParserRuleCall_0_0());
				}
				this_Expression_0=ruleExpression
				{
					$current.merge(this_Expression_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprFatFatAccess().getRightParenthesisKeyword_0_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprFatFatAccess().getTypeParserRuleCall_1_0());
			}
			this_Type_2=ruleType
			{
				$current.merge(this_Type_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprFatFatAccess().getRightParenthesisKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprFatFatAccess().getPrimaryExprFatParserRuleCall_1_2());
			}
			this_PrimaryExprFat_4=rulePrimaryExprFat
			{
				$current.merge(this_PrimaryExprFat_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrimaryExprFat
entryRulePrimaryExprFat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprFatRule()); }
	iv_rulePrimaryExprFat=rulePrimaryExprFat
	{ $current=$iv_rulePrimaryExprFat.current.getText(); }
	EOF;

// Rule PrimaryExprFat
rulePrimaryExprFat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprFatAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprFatAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current.merge(this_Expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getPrimaryExprFatAccess().getCommaKeyword_0_2());
				}
			)?
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprFatAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprFatAccess().getFullStopKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprFatAccess().getMethodNameParserRuleCall_1_1());
			}
			this_MethodName_5=ruleMethodName
			{
				$current.merge(this_MethodName_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrimaryExprLinha
entryRulePrimaryExprLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprLinhaRule()); }
	iv_rulePrimaryExprLinha=rulePrimaryExprLinha
	{ $current=$iv_rulePrimaryExprLinha.current.getText(); }
	EOF;

// Rule PrimaryExprLinha
rulePrimaryExprLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprLinhaAccess().getFullStopKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaAccess().getPrimaryExprLinhaLinhaParserRuleCall_0_1());
			}
			this_PrimaryExprLinhaLinha_1=rulePrimaryExprLinhaLinha
			{
				$current.merge(this_PrimaryExprLinhaLinha_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaAccess().getPrimaryExprLinhaParserRuleCall_0_2());
			}
			this_PrimaryExprLinha_2=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprLinhaAccess().getLeftSquareBracketKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaAccess().getPrimaryExprLinhaLinhaLinhaParserRuleCall_1_1());
			}
			this_PrimaryExprLinhaLinhaLinha_4=rulePrimaryExprLinhaLinhaLinha
			{
				$current.merge(this_PrimaryExprLinhaLinhaLinha_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaAccess().getPrimaryExprLinhaParserRuleCall_1_2());
			}
			this_PrimaryExprLinha_5=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaAccess().getArgumentsParserRuleCall_2_0());
			}
			this_Arguments_6=ruleArguments
			{
				$current.merge(this_Arguments_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaAccess().getPrimaryExprLinhaParserRuleCall_2_1());
			}
			this_PrimaryExprLinha_7=rulePrimaryExprLinha
			{
				$current.merge(this_PrimaryExprLinha_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrimaryExprLinhaLinha
entryRulePrimaryExprLinhaLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprLinhaLinhaRule()); }
	iv_rulePrimaryExprLinhaLinha=rulePrimaryExprLinhaLinha
	{ $current=$iv_rulePrimaryExprLinhaLinha.current.getText(); }
	EOF;

// Rule PrimaryExprLinhaLinha
rulePrimaryExprLinhaLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getPrimaryExprLinhaLinhaAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprLinhaLinhaAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaLinhaAccess().getTypeParserRuleCall_1_1());
			}
			this_Type_2=ruleType
			{
				$current.merge(this_Type_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprLinhaLinhaAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRulePrimaryExprLinhaLinhaLinha
entryRulePrimaryExprLinhaLinhaLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprLinhaLinhaLinhaRule()); }
	iv_rulePrimaryExprLinhaLinhaLinha=rulePrimaryExprLinhaLinhaLinha
	{ $current=$iv_rulePrimaryExprLinhaLinhaLinha.current.getText(); }
	EOF;

// Rule PrimaryExprLinhaLinhaLinha
rulePrimaryExprLinhaLinhaLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaLinhaLinhaAccess().getExpressionParserRuleCall_0_0());
			}
			this_Expression_0=ruleExpression
			{
				$current.merge(this_Expression_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaLinhaLinhaAccess().getPrimaryExprLinhaLinhaLinhaLinhaParserRuleCall_0_1());
			}
			this_PrimaryExprLinhaLinhaLinhaLinha_1=rulePrimaryExprLinhaLinhaLinhaLinha
			{
				$current.merge(this_PrimaryExprLinhaLinhaLinhaLinha_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprLinhaLinhaLinhaAccess().getColonKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaLinhaLinhaAccess().getSliceLinhaParserRuleCall_1_1());
			}
			this_SliceLinha_3=ruleSliceLinha
			{
				$current.merge(this_SliceLinha_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrimaryExprLinhaLinhaLinhaLinha
entryRulePrimaryExprLinhaLinhaLinhaLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprLinhaLinhaLinhaLinhaRule()); }
	iv_rulePrimaryExprLinhaLinhaLinhaLinha=rulePrimaryExprLinhaLinhaLinhaLinha
	{ $current=$iv_rulePrimaryExprLinhaLinhaLinhaLinha.current.getText(); }
	EOF;

// Rule PrimaryExprLinhaLinhaLinhaLinha
rulePrimaryExprLinhaLinhaLinhaLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimaryExprLinhaLinhaLinhaLinhaAccess().getRightSquareBracketKeyword_0());
		}
		    |
		(
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimaryExprLinhaLinhaLinhaLinhaAccess().getColonKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprLinhaLinhaLinhaLinhaAccess().getSliceLinhaParserRuleCall_1_1());
			}
			this_SliceLinha_2=ruleSliceLinha
			{
				$current.merge(this_SliceLinha_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSliceLinha
entryRuleSliceLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSliceLinhaRule()); }
	iv_ruleSliceLinha=ruleSliceLinha
	{ $current=$iv_ruleSliceLinha.current.getText(); }
	EOF;

// Rule SliceLinha
ruleSliceLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSliceLinhaAccess().getColonKeyword_0_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getSliceLinhaAccess().getExpressionParserRuleCall_0_1());
				}
				this_Expression_1=ruleExpression
				{
					$current.merge(this_Expression_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSliceLinhaAccess().getRightSquareBracketKeyword_0_2());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getSliceLinhaAccess().getExpressionParserRuleCall_1_0());
			}
			this_Expression_3=ruleExpression
			{
				$current.merge(this_Expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSliceLinhaAccess().getColonKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getSliceLinhaAccess().getExpressionParserRuleCall_1_2());
			}
			this_Expression_5=ruleExpression
			{
				$current.merge(this_Expression_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSliceLinhaAccess().getRightSquareBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleArguments
entryRuleArguments returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	iv_ruleArguments=ruleArguments
	{ $current=$iv_ruleArguments.current.getText(); }
	EOF;

// Rule Arguments
ruleArguments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					(ruleExpressionList)=>
					{
						newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionListParserRuleCall_1_0_0());
					}
					this_ExpressionList_1=ruleExpressionList
					{
						$current.merge(this_ExpressionList_1);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)
				    |
				(
					{
						newCompositeNode(grammarAccess.getArgumentsAccess().getTypeParserRuleCall_1_0_1_0());
					}
					this_Type_2=ruleType
					{
						$current.merge(this_Type_2);
					}
					{
						afterParserOrEnumRuleCall();
					}
					(
						kw=','
						{
							$current.merge(kw);
							newLeafNode(kw, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0_1_1_0());
						}
						{
							newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionListParserRuleCall_1_0_1_1_1());
						}
						this_ExpressionList_4=ruleExpressionList
						{
							$current.merge(this_ExpressionList_4);
						}
						{
							afterParserOrEnumRuleCall();
						}
					)?
				)
			)
			(
				kw='...'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_1_1());
				}
			)?
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getArgumentsAccess().getCommaKeyword_1_2());
				}
			)?
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	iv_ruleExpressionList=ruleExpressionList
	{ $current=$iv_ruleExpressionList.current.getText(); }
	EOF;

// Rule ExpressionList
ruleExpressionList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current.merge(this_Expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1());
			}
			this_Expression_2=ruleExpression
			{
				$current.merge(this_Expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleIdentifierList
entryRuleIdentifierList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	iv_ruleIdentifierList=ruleIdentifierList
	{ $current=$iv_ruleIdentifierList.current.getText(); }
	EOF;

// Rule IdentifierList
ruleIdentifierList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifierListAccess().getCommaKeyword_1_0());
			}
			this_IDENTIFIER_2=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_2);
			}
			{
				newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current.getText(); }
	EOF;

// Rule Block
ruleBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBlockAccess().getStatementListParserRuleCall_1());
		}
		this_StatementList_1=ruleStatementList
		{
			$current.merge(this_StatementList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleStatementList
entryRuleStatementList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_ruleStatementList=ruleStatementList
	{ $current=$iv_ruleStatementList.current.getText(); }
	EOF;

// Rule StatementList
ruleStatementList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementListAccess().getStatementParserRuleCall_0());
		}
		this_Statement_0=ruleStatement
		{
			$current.merge(this_Statement_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatementListAccess().getSemicolonKeyword_1());
		}
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current.getText(); }
	EOF;

// Rule Statement
ruleStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeclarationParserRuleCall_0());
		}
		this_Declaration_0=ruleDeclaration
		{
			$current.merge(this_Declaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLabeledStmtParserRuleCall_1());
		}
		this_LabeledStmt_1=ruleLabeledStmt
		{
			$current.merge(this_LabeledStmt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSimpleStmtParserRuleCall_2());
		}
		this_SimpleStmt_2=ruleSimpleStmt
		{
			$current.merge(this_SimpleStmt_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGoStmtParserRuleCall_3());
		}
		this_GoStmt_3=ruleGoStmt
		{
			$current.merge(this_GoStmt_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getReturnStmtParserRuleCall_4());
		}
		this_ReturnStmt_4=ruleReturnStmt
		{
			$current.merge(this_ReturnStmt_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBreakStmtParserRuleCall_5());
		}
		this_BreakStmt_5=ruleBreakStmt
		{
			$current.merge(this_BreakStmt_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getContinueStmtParserRuleCall_6());
		}
		this_ContinueStmt_6=ruleContinueStmt
		{
			$current.merge(this_ContinueStmt_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGotoStmtParserRuleCall_7());
		}
		this_GotoStmt_7=ruleGotoStmt
		{
			$current.merge(this_GotoStmt_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFallthroughStmtParserRuleCall_8());
		}
		this_FallthroughStmt_8=ruleFallthroughStmt
		{
			$current.merge(this_FallthroughStmt_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_9());
		}
		this_Block_9=ruleBlock
		{
			$current.merge(this_Block_9);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStmtParserRuleCall_10());
		}
		this_IfStmt_10=ruleIfStmt
		{
			$current.merge(this_IfStmt_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSwitchStmtParserRuleCall_11());
		}
		this_SwitchStmt_11=ruleSwitchStmt
		{
			$current.merge(this_SwitchStmt_11);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectStmtParserRuleCall_12());
		}
		this_SelectStmt_12=ruleSelectStmt
		{
			$current.merge(this_SelectStmt_12);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForStmtParserRuleCall_13());
		}
		this_ForStmt_13=ruleForStmt
		{
			$current.merge(this_ForStmt_13);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeferStmtParserRuleCall_14());
		}
		this_DeferStmt_14=ruleDeferStmt
		{
			$current.merge(this_DeferStmt_14);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDeferStmt
entryRuleDeferStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeferStmtRule()); }
	iv_ruleDeferStmt=ruleDeferStmt
	{ $current=$iv_ruleDeferStmt.current.getText(); }
	EOF;

// Rule DeferStmt
ruleDeferStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='defer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDeferStmtAccess().getDeferKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDeferStmtAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current.merge(this_Expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForStmt
entryRuleForStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	iv_ruleForStmt=ruleForStmt
	{ $current=$iv_ruleForStmt.current.getText(); }
	EOF;

// Rule ForStmt
ruleForStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='for'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForStmtAccess().getForKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getForStmtAccess().getExpressionParserRuleCall_1_0());
			}
			this_Expression_1=ruleExpression
			{
				$current.merge(this_Expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getForStmtAccess().getForStmtLinhaParserRuleCall_1_1());
			}
			this_ForStmtLinha_2=ruleForStmtLinha
			{
				$current.merge(this_ForStmtLinha_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getForStmtAccess().getBlockParserRuleCall_2());
		}
		this_Block_3=ruleBlock
		{
			$current.merge(this_Block_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForStmtLinha
entryRuleForStmtLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForStmtLinhaRule()); }
	iv_ruleForStmtLinha=ruleForStmtLinha
	{ $current=$iv_ruleForStmtLinha.current.getText(); }
	EOF;

// Rule ForStmtLinha
ruleForStmtLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtLinhaAccess().getSimpleStmtLinhaParserRuleCall_0_0_0());
				}
				this_SimpleStmtLinha_0=ruleSimpleStmtLinha
				{
					$current.merge(this_SimpleStmtLinha_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				(
					(
						this_IDENTIFIER_1=RULE_IDENTIFIER
						{
							$current.merge(this_IDENTIFIER_1);
						}
						{
							newLeafNode(this_IDENTIFIER_1, grammarAccess.getForStmtLinhaAccess().getIDENTIFIERTerminalRuleCall_0_0_1_0_0());
						}
						(
							kw=','
							{
								$current.merge(kw);
								newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getCommaKeyword_0_0_1_0_1_0());
							}
							this_IDENTIFIER_3=RULE_IDENTIFIER
							{
								$current.merge(this_IDENTIFIER_3);
							}
							{
								newLeafNode(this_IDENTIFIER_3, grammarAccess.getForStmtLinhaAccess().getIDENTIFIERTerminalRuleCall_0_0_1_0_1_1());
							}
						)*
					)
					kw=':='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getColonEqualsSignKeyword_0_0_1_1());
					}
					(
						{
							newCompositeNode(grammarAccess.getForStmtLinhaAccess().getExpressionParserRuleCall_0_0_1_2_0());
						}
						this_Expression_5=ruleExpression
						{
							$current.merge(this_Expression_5);
						}
						{
							afterParserOrEnumRuleCall();
						}
						(
							kw=','
							{
								$current.merge(kw);
								newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getCommaKeyword_0_0_1_2_1_0());
							}
							{
								newCompositeNode(grammarAccess.getForStmtLinhaAccess().getExpressionParserRuleCall_0_0_1_2_1_1());
							}
							this_Expression_7=ruleExpression
							{
								$current.merge(this_Expression_7);
							}
							{
								afterParserOrEnumRuleCall();
							}
						)*
					)
				)
			)
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getSemicolonKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getForStmtLinhaAccess().getConditionParserRuleCall_0_2());
			}
			this_Condition_9=ruleCondition
			{
				$current.merge(this_Condition_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getSemicolonKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getForStmtLinhaAccess().getExpressionParserRuleCall_0_4_0_0());
					}
					this_Expression_11=ruleExpression
					{
						$current.merge(this_Expression_11);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getForStmtLinhaAccess().getSimpleStmtLinhaParserRuleCall_0_4_0_1());
					}
					this_SimpleStmtLinha_12=ruleSimpleStmtLinha
					{
						$current.merge(this_SimpleStmtLinha_12);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)
				    |
				(
					(
						this_IDENTIFIER_13=RULE_IDENTIFIER
						{
							$current.merge(this_IDENTIFIER_13);
						}
						{
							newLeafNode(this_IDENTIFIER_13, grammarAccess.getForStmtLinhaAccess().getIDENTIFIERTerminalRuleCall_0_4_1_0_0());
						}
						(
							kw=','
							{
								$current.merge(kw);
								newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getCommaKeyword_0_4_1_0_1_0());
							}
							this_IDENTIFIER_15=RULE_IDENTIFIER
							{
								$current.merge(this_IDENTIFIER_15);
							}
							{
								newLeafNode(this_IDENTIFIER_15, grammarAccess.getForStmtLinhaAccess().getIDENTIFIERTerminalRuleCall_0_4_1_0_1_1());
							}
						)*
					)
					kw=':='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getColonEqualsSignKeyword_0_4_1_1());
					}
					(
						{
							newCompositeNode(grammarAccess.getForStmtLinhaAccess().getExpressionParserRuleCall_0_4_1_2_0());
						}
						this_Expression_17=ruleExpression
						{
							$current.merge(this_Expression_17);
						}
						{
							afterParserOrEnumRuleCall();
						}
						(
							kw=','
							{
								$current.merge(kw);
								newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getCommaKeyword_0_4_1_2_1_0());
							}
							{
								newCompositeNode(grammarAccess.getForStmtLinhaAccess().getExpressionParserRuleCall_0_4_1_2_1_1());
							}
							this_Expression_19=ruleExpression
							{
								$current.merge(this_Expression_19);
							}
							{
								afterParserOrEnumRuleCall();
							}
						)*
					)
				)
				    |
				(
					(
						kw=','
						{
							$current.merge(kw);
							newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getCommaKeyword_0_4_2_0_0());
						}
						{
							newCompositeNode(grammarAccess.getForStmtLinhaAccess().getExpressionParserRuleCall_0_4_2_0_1());
						}
						this_Expression_21=ruleExpression
						{
							$current.merge(this_Expression_21);
						}
						{
							afterParserOrEnumRuleCall();
						}
					)*
					kw='='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getEqualsSignKeyword_0_4_2_1());
					}
				)
				    |
				(
					{
						newCompositeNode(grammarAccess.getForStmtLinhaAccess().getIdentifierListParserRuleCall_0_4_3_0());
					}
					this_IdentifierList_23=ruleIdentifierList
					{
						$current.merge(this_IdentifierList_23);
					}
					{
						afterParserOrEnumRuleCall();
					}
					kw=':='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getColonEqualsSignKeyword_0_4_3_1());
					}
				)
			)
			kw='range'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getForStmtLinhaAccess().getRangeKeyword_0_5());
			}
			{
				newCompositeNode(grammarAccess.getForStmtLinhaAccess().getExpressionParserRuleCall_0_6());
			}
			this_Expression_26=ruleExpression
			{
				$current.merge(this_Expression_26);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_ANY_OTHER_27=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_27);
		}
		{
			newLeafNode(this_ANY_OTHER_27, grammarAccess.getForStmtLinhaAccess().getANY_OTHERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePostStmt
entryRulePostStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPostStmtRule()); }
	iv_rulePostStmt=rulePostStmt
	{ $current=$iv_rulePostStmt.current.getText(); }
	EOF;

// Rule PostStmt
rulePostStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPostStmtAccess().getSimpleStmtParserRuleCall());
	}
	this_SimpleStmt_0=ruleSimpleStmt
	{
		$current.merge(this_SimpleStmt_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleInitStmt
entryRuleInitStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInitStmtRule()); }
	iv_ruleInitStmt=ruleInitStmt
	{ $current=$iv_ruleInitStmt.current.getText(); }
	EOF;

// Rule InitStmt
ruleInitStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInitStmtAccess().getSimpleStmtParserRuleCall());
	}
	this_SimpleStmt_0=ruleSimpleStmt
	{
		$current.merge(this_SimpleStmt_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCondition
entryRuleCondition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current.getText(); }
	EOF;

// Rule Condition
ruleCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConditionAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current.merge(this_Expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSelectStmt
entryRuleSelectStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSelectStmtRule()); }
	iv_ruleSelectStmt=ruleSelectStmt
	{ $current=$iv_ruleSelectStmt.current.getText(); }
	EOF;

// Rule SelectStmt
ruleSelectStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='select'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectStmtAccess().getSelectKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectStmtAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getSelectStmtAccess().getCommClauseParserRuleCall_2());
			}
			this_CommClause_2=ruleCommClause
			{
				$current.merge(this_CommClause_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectStmtAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleCommClause
entryRuleCommClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommClauseRule()); }
	iv_ruleCommClause=ruleCommClause
	{ $current=$iv_ruleCommClause.current.getText(); }
	EOF;

// Rule CommClause
ruleCommClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommClauseAccess().getCommCaseParserRuleCall_0());
		}
		this_CommCase_0=ruleCommCase
		{
			$current.merge(this_CommCase_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommClauseAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getCommClauseAccess().getStatementListParserRuleCall_2());
		}
		this_StatementList_2=ruleStatementList
		{
			$current.merge(this_StatementList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommCase
entryRuleCommCase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommCaseRule()); }
	iv_ruleCommCase=ruleCommCase
	{ $current=$iv_ruleCommCase.current.getText(); }
	EOF;

// Rule CommCase
ruleCommCase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='case'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommCaseAccess().getCaseKeyword_0_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getCommCaseAccess().getExpressionParserRuleCall_0_1_0());
				}
				this_Expression_1=ruleExpression
				{
					$current.merge(this_Expression_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getCommCaseAccess().getCommCaseLinhaParserRuleCall_0_1_1());
				}
				this_CommCaseLinha_2=ruleCommCaseLinha
				{
					$current.merge(this_CommCaseLinha_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuleCommCaseLinha
entryRuleCommCaseLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommCaseLinhaRule()); }
	iv_ruleCommCaseLinha=ruleCommCaseLinha
	{ $current=$iv_ruleCommCaseLinha.current.getText(); }
	EOF;

// Rule CommCaseLinha
ruleCommCaseLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='<-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommCaseLinhaAccess().getLessThanSignHyphenMinusKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getCommCaseLinhaAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current.merge(this_Expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				(
					(
						kw=','
						{
							$current.merge(kw);
							newLeafNode(kw, grammarAccess.getCommCaseLinhaAccess().getCommaKeyword_1_0_0_0_0());
						}
						{
							newCompositeNode(grammarAccess.getCommCaseLinhaAccess().getExpressionParserRuleCall_1_0_0_0_1());
						}
						this_Expression_3=ruleExpression
						{
							$current.merge(this_Expression_3);
						}
						{
							afterParserOrEnumRuleCall();
						}
					)*
					kw='='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getCommCaseLinhaAccess().getEqualsSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					{
						newCompositeNode(grammarAccess.getCommCaseLinhaAccess().getIdentifierListParserRuleCall_1_0_1_0());
					}
					this_IdentifierList_5=ruleIdentifierList
					{
						$current.merge(this_IdentifierList_5);
					}
					{
						afterParserOrEnumRuleCall();
					}
					kw=':='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getCommCaseLinhaAccess().getColonEqualsSignKeyword_1_0_1_1());
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getCommCaseLinhaAccess().getRecvExprParserRuleCall_1_1());
			}
			this_RecvExpr_7=ruleRecvExpr
			{
				$current.merge(this_RecvExpr_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleRecvExpr
entryRuleRecvExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRecvExprRule()); }
	iv_ruleRecvExpr=ruleRecvExpr
	{ $current=$iv_ruleRecvExpr.current.getText(); }
	EOF;

// Rule RecvExpr
ruleRecvExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRecvExprAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current.merge(this_Expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSwitchStmt
entryRuleSwitchStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStmtRule()); }
	iv_ruleSwitchStmt=ruleSwitchStmt
	{ $current=$iv_ruleSwitchStmt.current.getText(); }
	EOF;

// Rule SwitchStmt
ruleSwitchStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='switch'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSwitchStmtAccess().getSwitchKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getSwitchStmtAccess().getSimpleStmtParserRuleCall_1_0());
			}
			this_SimpleStmt_1=ruleSimpleStmt
			{
				$current.merge(this_SimpleStmt_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSwitchStmtAccess().getSemicolonKeyword_1_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getSwitchStmtAccess().getSwitchStmtLinhaParserRuleCall_2());
		}
		this_SwitchStmtLinha_3=ruleSwitchStmtLinha
		{
			$current.merge(this_SwitchStmtLinha_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSwitchStmtLinha
entryRuleSwitchStmtLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStmtLinhaRule()); }
	iv_ruleSwitchStmtLinha=ruleSwitchStmtLinha
	{ $current=$iv_ruleSwitchStmtLinha.current.getText(); }
	EOF;

// Rule SwitchStmtLinha
ruleSwitchStmtLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSwitchStmtLinhaAccess().getExpressionParserRuleCall_0_0());
			}
			this_Expression_0=ruleExpression
			{
				$current.merge(this_Expression_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSwitchStmtLinhaAccess().getLeftCurlyBracketKeyword_0_1());
			}
			(
				{
					newCompositeNode(grammarAccess.getSwitchStmtLinhaAccess().getExprCaseClauseParserRuleCall_0_2());
				}
				this_ExprCaseClause_2=ruleExprCaseClause
				{
					$current.merge(this_ExprCaseClause_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSwitchStmtLinhaAccess().getRightCurlyBracketKeyword_0_3());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getSwitchStmtLinhaAccess().getTypeSwitchGuardParserRuleCall_1_0());
			}
			this_TypeSwitchGuard_4=ruleTypeSwitchGuard
			{
				$current.merge(this_TypeSwitchGuard_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSwitchStmtLinhaAccess().getLeftCurlyBracketKeyword_1_1());
			}
			(
				{
					newCompositeNode(grammarAccess.getSwitchStmtLinhaAccess().getTypeCaseClauseParserRuleCall_1_2());
				}
				this_TypeCaseClause_6=ruleTypeCaseClause
				{
					$current.merge(this_TypeCaseClause_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSwitchStmtLinhaAccess().getRightCurlyBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleTypeCaseClause
entryRuleTypeCaseClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeCaseClauseRule()); }
	iv_ruleTypeCaseClause=ruleTypeCaseClause
	{ $current=$iv_ruleTypeCaseClause.current.getText(); }
	EOF;

// Rule TypeCaseClause
ruleTypeCaseClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeCaseClauseAccess().getTypeSwitchCaseParserRuleCall_0());
		}
		this_TypeSwitchCase_0=ruleTypeSwitchCase
		{
			$current.merge(this_TypeSwitchCase_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeCaseClauseAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getTypeCaseClauseAccess().getStatementListParserRuleCall_2());
		}
		this_StatementList_2=ruleStatementList
		{
			$current.merge(this_StatementList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeSwitchCase
entryRuleTypeSwitchCase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchCaseRule()); }
	iv_ruleTypeSwitchCase=ruleTypeSwitchCase
	{ $current=$iv_ruleTypeSwitchCase.current.getText(); }
	EOF;

// Rule TypeSwitchCase
ruleTypeSwitchCase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='case'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeSwitchCaseAccess().getCaseKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeSwitchCaseAccess().getTypeListParserRuleCall_0_1());
			}
			this_TypeList_1=ruleTypeList
			{
				$current.merge(this_TypeList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuleTypeList
entryRuleTypeList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeListRule()); }
	iv_ruleTypeList=ruleTypeList
	{ $current=$iv_ruleTypeList.current.getText(); }
	EOF;

// Rule TypeList
ruleTypeList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeListAccess().getTypeParserRuleCall_0());
		}
		this_Type_0=ruleType
		{
			$current.merge(this_Type_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeListAccess().getTypeParserRuleCall_1_1());
			}
			this_Type_2=ruleType
			{
				$current.merge(this_Type_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleTypeSwitchGuard
entryRuleTypeSwitchGuard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchGuardRule()); }
	iv_ruleTypeSwitchGuard=ruleTypeSwitchGuard
	{ $current=$iv_ruleTypeSwitchGuard.current.getText(); }
	EOF;

// Rule TypeSwitchGuard
ruleTypeSwitchGuard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_IDENTIFIER_0=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_0);
			}
			{
				newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeSwitchGuardAccess().getIDENTIFIERTerminalRuleCall_0_0());
			}
			kw=':='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getColonEqualsSignKeyword_0_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getTypeSwitchGuardAccess().getPrimaryExprParserRuleCall_1());
		}
		this_PrimaryExpr_2=rulePrimaryExpr
		{
			$current.merge(this_PrimaryExpr_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getFullStopKeyword_2());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getLeftParenthesisKeyword_3());
		}
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getTypeKeyword_4());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleExprCaseClause
entryRuleExprCaseClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprCaseClauseRule()); }
	iv_ruleExprCaseClause=ruleExprCaseClause
	{ $current=$iv_ruleExprCaseClause.current.getText(); }
	EOF;

// Rule ExprCaseClause
ruleExprCaseClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprCaseClauseAccess().getExprSwitchCaseParserRuleCall_0());
		}
		this_ExprSwitchCase_0=ruleExprSwitchCase
		{
			$current.merge(this_ExprSwitchCase_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprCaseClauseAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getExprCaseClauseAccess().getStatementListParserRuleCall_2());
		}
		this_StatementList_2=ruleStatementList
		{
			$current.merge(this_StatementList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprSwitchCase
entryRuleExprSwitchCase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprSwitchCaseRule()); }
	iv_ruleExprSwitchCase=ruleExprSwitchCase
	{ $current=$iv_ruleExprSwitchCase.current.getText(); }
	EOF;

// Rule ExprSwitchCase
ruleExprSwitchCase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='case'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSwitchCaseAccess().getCaseKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getExprSwitchCaseAccess().getExpressionListParserRuleCall_0_1());
			}
			this_ExpressionList_1=ruleExpressionList
			{
				$current.merge(this_ExpressionList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprSwitchCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuleIfStmt
entryRuleIfStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	iv_ruleIfStmt=ruleIfStmt
	{ $current=$iv_ruleIfStmt.current.getText(); }
	EOF;

// Rule IfStmt
ruleIfStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIfStmtAccess().getIfKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getIfStmtAccess().getSimpleStmtParserRuleCall_1_0());
			}
			this_SimpleStmt_1=ruleSimpleStmt
			{
				$current.merge(this_SimpleStmt_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfStmtAccess().getSemicolonKeyword_1_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getExpressionParserRuleCall_2());
		}
		this_Expression_3=ruleExpression
		{
			$current.merge(this_Expression_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_3());
		}
		this_Block_4=ruleBlock
		{
			$current.merge(this_Block_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='else'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfStmtAccess().getElseKeyword_4_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getIfStmtParserRuleCall_4_1_0());
				}
				this_IfStmt_6=ruleIfStmt
				{
					$current.merge(this_IfStmt_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_4_1_1());
				}
				this_Block_7=ruleBlock
				{
					$current.merge(this_Block_7);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFallthroughStmt
entryRuleFallthroughStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFallthroughStmtRule()); }
	iv_ruleFallthroughStmt=ruleFallthroughStmt
	{ $current=$iv_ruleFallthroughStmt.current.getText(); }
	EOF;

// Rule FallthroughStmt
ruleFallthroughStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='fallthrough'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFallthroughStmtAccess().getFallthroughKeyword());
	}
;

// Entry rule entryRuleGotoStmt
entryRuleGotoStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGotoStmtRule()); }
	iv_ruleGotoStmt=ruleGotoStmt
	{ $current=$iv_ruleGotoStmt.current.getText(); }
	EOF;

// Rule GotoStmt
ruleGotoStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='goto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGotoStmtAccess().getGotoKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getGotoStmtAccess().getLabelParserRuleCall_1());
		}
		this_Label_1=ruleLabel
		{
			$current.merge(this_Label_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContinueStmt
entryRuleContinueStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContinueStmtRule()); }
	iv_ruleContinueStmt=ruleContinueStmt
	{ $current=$iv_ruleContinueStmt.current.getText(); }
	EOF;

// Rule ContinueStmt
ruleContinueStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='continue'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContinueStmtAccess().getContinueKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getContinueStmtAccess().getLabelParserRuleCall_1());
		}
		this_Label_1=ruleLabel
		{
			$current.merge(this_Label_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBreakStmt
entryRuleBreakStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBreakStmtRule()); }
	iv_ruleBreakStmt=ruleBreakStmt
	{ $current=$iv_ruleBreakStmt.current.getText(); }
	EOF;

// Rule BreakStmt
ruleBreakStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='break'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreakStmtAccess().getBreakKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBreakStmtAccess().getLabelParserRuleCall_1());
		}
		this_Label_1=ruleLabel
		{
			$current.merge(this_Label_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReturnStmt
entryRuleReturnStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReturnStmtRule()); }
	iv_ruleReturnStmt=ruleReturnStmt
	{ $current=$iv_ruleReturnStmt.current.getText(); }
	EOF;

// Rule ReturnStmt
ruleReturnStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='return'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getReturnStmtAccess().getReturnKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getReturnStmtAccess().getExpressionListParserRuleCall_1());
		}
		this_ExpressionList_1=ruleExpressionList
		{
			$current.merge(this_ExpressionList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGoStmt
entryRuleGoStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGoStmtRule()); }
	iv_ruleGoStmt=ruleGoStmt
	{ $current=$iv_ruleGoStmt.current.getText(); }
	EOF;

// Rule GoStmt
ruleGoStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='go'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGoStmtAccess().getGoKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getGoStmtAccess().getLabelParserRuleCall_1());
		}
		this_Label_1=ruleLabel
		{
			$current.merge(this_Label_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleStmt
entryRuleSimpleStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStmtRule()); }
	iv_ruleSimpleStmt=ruleSimpleStmt
	{ $current=$iv_ruleSimpleStmt.current.getText(); }
	EOF;

// Rule SimpleStmt
ruleSimpleStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSimpleStmtAccess().getExpressionParserRuleCall_0_0());
			}
			this_Expression_0=ruleExpression
			{
				$current.merge(this_Expression_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getSimpleStmtAccess().getSimpleStmtLinhaParserRuleCall_0_1());
			}
			this_SimpleStmtLinha_1=ruleSimpleStmtLinha
			{
				$current.merge(this_SimpleStmtLinha_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				this_IDENTIFIER_2=RULE_IDENTIFIER
				{
					$current.merge(this_IDENTIFIER_2);
				}
				{
					newLeafNode(this_IDENTIFIER_2, grammarAccess.getSimpleStmtAccess().getIDENTIFIERTerminalRuleCall_1_0_0());
				}
				(
					kw=','
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getSimpleStmtAccess().getCommaKeyword_1_0_1_0());
					}
					this_IDENTIFIER_4=RULE_IDENTIFIER
					{
						$current.merge(this_IDENTIFIER_4);
					}
					{
						newLeafNode(this_IDENTIFIER_4, grammarAccess.getSimpleStmtAccess().getIDENTIFIERTerminalRuleCall_1_0_1_1());
					}
				)*
			)
			kw=':='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSimpleStmtAccess().getColonEqualsSignKeyword_1_1());
			}
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getExpressionParserRuleCall_1_2_0());
				}
				this_Expression_6=ruleExpression
				{
					$current.merge(this_Expression_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
				(
					kw=','
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getSimpleStmtAccess().getCommaKeyword_1_2_1_0());
					}
					{
						newCompositeNode(grammarAccess.getSimpleStmtAccess().getExpressionParserRuleCall_1_2_1_1());
					}
					this_Expression_8=ruleExpression
					{
						$current.merge(this_Expression_8);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)*
			)
		)
	)
;

// Entry rule entryRuleSimpleStmtLinha
entryRuleSimpleStmtLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStmtLinhaRule()); }
	iv_ruleSimpleStmtLinha=ruleSimpleStmtLinha
	{ $current=$iv_ruleSimpleStmtLinha.current.getText(); }
	EOF;

// Rule SimpleStmtLinha
ruleSimpleStmtLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='<-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSimpleStmtLinhaAccess().getLessThanSignHyphenMinusKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getSimpleStmtLinhaAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current.merge(this_Expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='++'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSimpleStmtLinhaAccess().getPlusSignPlusSignKeyword_1_0());
			}
			    |
			kw='--'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSimpleStmtLinhaAccess().getHyphenMinusHyphenMinusKeyword_1_1());
			}
		)
		    |
		(
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSimpleStmtLinhaAccess().getCommaKeyword_2_0_0());
				}
				{
					newCompositeNode(grammarAccess.getSimpleStmtLinhaAccess().getExpressionParserRuleCall_2_0_1());
				}
				this_Expression_5=ruleExpression
				{
					$current.merge(this_Expression_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			{
				newCompositeNode(grammarAccess.getSimpleStmtLinhaAccess().getAssign_opParserRuleCall_2_1());
			}
			this_assign_op_6=ruleassign_op
			{
				$current.merge(this_assign_op_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtLinhaAccess().getExpressionParserRuleCall_2_2_0());
				}
				this_Expression_7=ruleExpression
				{
					$current.merge(this_Expression_7);
				}
				{
					afterParserOrEnumRuleCall();
				}
				(
					kw=','
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getSimpleStmtLinhaAccess().getCommaKeyword_2_2_1_0());
					}
					{
						newCompositeNode(grammarAccess.getSimpleStmtLinhaAccess().getExpressionParserRuleCall_2_2_1_1());
					}
					this_Expression_9=ruleExpression
					{
						$current.merge(this_Expression_9);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)*
			)
		)
	)
;

// Entry rule entryRuleassign_op
entryRuleassign_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssign_opRule()); }
	iv_ruleassign_op=ruleassign_op
	{ $current=$iv_ruleassign_op.current.getText(); }
	EOF;

// Rule assign_op
ruleassign_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ADD_OP_0=RULE_ADD_OP
			{
				$current.merge(this_ADD_OP_0);
			}
			{
				newLeafNode(this_ADD_OP_0, grammarAccess.getAssign_opAccess().getADD_OPTerminalRuleCall_0_0());
			}
			    |
			this_MUL_OP_1=RULE_MUL_OP
			{
				$current.merge(this_MUL_OP_1);
			}
			{
				newLeafNode(this_MUL_OP_1, grammarAccess.getAssign_opAccess().getMUL_OPTerminalRuleCall_0_1());
			}
		)
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAssign_opAccess().getEqualsSignKeyword_1());
		}
	)
;

// Entry rule entryRuleChannel
entryRuleChannel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChannelRule()); }
	iv_ruleChannel=ruleChannel
	{ $current=$iv_ruleChannel.current.getText(); }
	EOF;

// Rule Channel
ruleChannel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getChannelAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current.merge(this_Expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLabeledStmt
entryRuleLabeledStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLabeledStmtRule()); }
	iv_ruleLabeledStmt=ruleLabeledStmt
	{ $current=$iv_ruleLabeledStmt.current.getText(); }
	EOF;

// Rule LabeledStmt
ruleLabeledStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLabeledStmtAccess().getLabelParserRuleCall_0());
		}
		this_Label_0=ruleLabel
		{
			$current.merge(this_Label_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLabeledStmtAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getLabeledStmtAccess().getStatementParserRuleCall_2());
		}
		this_Statement_2=ruleStatement
		{
			$current.merge(this_Statement_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLabel
entryRuleLabel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_ruleLabel=ruleLabel
	{ $current=$iv_ruleLabel.current.getText(); }
	EOF;

// Rule Label
ruleLabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_IDENTIFIER_0=RULE_IDENTIFIER
	{
		$current.merge(this_IDENTIFIER_0);
	}
	{
		newLeafNode(this_IDENTIFIER_0, grammarAccess.getLabelAccess().getIDENTIFIERTerminalRuleCall());
	}
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current.getText(); }
	EOF;

// Rule Declaration
ruleDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getConstDeclParserRuleCall_0());
		}
		this_ConstDecl_0=ruleConstDecl
		{
			$current.merge(this_ConstDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclParserRuleCall_1());
		}
		this_TypeDecl_1=ruleTypeDecl
		{
			$current.merge(this_TypeDecl_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getVarDeclParserRuleCall_2());
		}
		this_VarDecl_2=ruleVarDecl
		{
			$current.merge(this_VarDecl_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTopLevelDecl
entryRuleTopLevelDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelDeclRule()); }
	iv_ruleTopLevelDecl=ruleTopLevelDecl
	{ $current=$iv_ruleTopLevelDecl.current.getText(); }
	EOF;

// Rule TopLevelDecl
ruleTopLevelDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getDeclarationParserRuleCall_0());
		}
		this_Declaration_0=ruleDeclaration
		{
			$current.merge(this_Declaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getFunctionDeclParserRuleCall_1());
		}
		this_FunctionDecl_1=ruleFunctionDecl
		{
			$current.merge(this_FunctionDecl_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getMethodDeclParserRuleCall_2());
		}
		this_MethodDecl_2=ruleMethodDecl
		{
			$current.merge(this_MethodDecl_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConstDecl
entryRuleConstDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstDeclRule()); }
	iv_ruleConstDecl=ruleConstDecl
	{ $current=$iv_ruleConstDecl.current.getText(); }
	EOF;

// Rule ConstDecl
ruleConstDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='const'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConstDeclAccess().getConstKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_0());
			}
			this_ConstSpec_1=ruleConstSpec
			{
				$current.merge(this_ConstSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getConstDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_1_1_0());
					}
					this_ConstSpec_3=ruleConstSpec
					{
						$current.merge(this_ConstSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					kw=';'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getConstDeclAccess().getSemicolonKeyword_1_1_1_1());
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getConstDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleConstSpec
entryRuleConstSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstSpecRule()); }
	iv_ruleConstSpec=ruleConstSpec
	{ $current=$iv_ruleConstSpec.current.getText(); }
	EOF;

// Rule ConstSpec
ruleConstSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstSpecAccess().getIdentifierListParserRuleCall_0());
		}
		this_IdentifierList_0=ruleIdentifierList
		{
			$current.merge(this_IdentifierList_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstSpecAccess().getTypeParserRuleCall_1_0());
				}
				this_Type_1=ruleType
				{
					$current.merge(this_Type_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			kw='='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstSpecAccess().getEqualsSignKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getConstSpecAccess().getExpressionListParserRuleCall_1_2());
			}
			this_ExpressionList_3=ruleExpressionList
			{
				$current.merge(this_ExpressionList_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	iv_ruleTypeDecl=ruleTypeDecl
	{ $current=$iv_ruleTypeDecl.current.getText(); }
	EOF;

// Rule TypeDecl
ruleTypeDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_0());
			}
			this_TypeSpec_1=ruleTypeSpec
			{
				$current.merge(this_TypeSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_1_1_0());
					}
					this_TypeSpec_3=ruleTypeSpec
					{
						$current.merge(this_TypeSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					kw=';'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getTypeDeclAccess().getSemicolonKeyword_1_1_1_1());
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleTypeSpec
entryRuleTypeSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeSpecRule()); }
	iv_ruleTypeSpec=ruleTypeSpec
	{ $current=$iv_ruleTypeSpec.current.getText(); }
	EOF;

// Rule TypeSpec
ruleTypeSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeSpecAccess().getAliasDeclParserRuleCall_0());
		}
		this_AliasDecl_0=ruleAliasDecl
		{
			$current.merge(this_AliasDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeSpecAccess().getTypeDefParserRuleCall_1());
		}
		this_TypeDef_1=ruleTypeDef
		{
			$current.merge(this_TypeDef_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAliasDecl
entryRuleAliasDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAliasDeclRule()); }
	iv_ruleAliasDecl=ruleAliasDecl
	{ $current=$iv_ruleAliasDecl.current.getText(); }
	EOF;

// Rule AliasDecl
ruleAliasDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getAliasDeclAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAliasDeclAccess().getEqualsSignKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getAliasDeclAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current.merge(this_Type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	iv_ruleTypeDef=ruleTypeDef
	{ $current=$iv_ruleTypeDef.current.getText(); }
	EOF;

// Rule TypeDef
ruleTypeDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeDefAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getTypeDefAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current.merge(this_Type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_ruleVarDecl=ruleVarDecl
	{ $current=$iv_ruleVarDecl.current.getText(); }
	EOF;

// Rule VarDecl
ruleVarDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='var'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarDeclAccess().getVarKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_0());
			}
			this_VarSpec_1=ruleVarSpec
			{
				$current.merge(this_VarSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVarDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_1_1_0());
					}
					this_VarSpec_3=ruleVarSpec
					{
						$current.merge(this_VarSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					kw=';'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getVarDeclAccess().getSemicolonKeyword_1_1_1_1());
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVarDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleVarSpec
entryRuleVarSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarSpecRule()); }
	iv_ruleVarSpec=ruleVarSpec
	{ $current=$iv_ruleVarSpec.current.getText(); }
	EOF;

// Rule VarSpec
ruleVarSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVarSpecAccess().getIdentifierListParserRuleCall_0());
		}
		this_IdentifierList_0=ruleIdentifierList
		{
			$current.merge(this_IdentifierList_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarSpecAccess().getTypeParserRuleCall_1_0_0());
				}
				this_Type_1=ruleType
				{
					$current.merge(this_Type_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				(
					kw='='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_0_1_0());
					}
					{
						newCompositeNode(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_0_1_1());
					}
					this_ExpressionList_3=ruleExpressionList
					{
						$current.merge(this_ExpressionList_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			(
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_1_0());
				}
				{
					newCompositeNode(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_1_1());
				}
				this_ExpressionList_5=ruleExpressionList
				{
					$current.merge(this_ExpressionList_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	iv_ruleFunctionDecl=ruleFunctionDecl
	{ $current=$iv_ruleFunctionDecl.current.getText(); }
	EOF;

// Rule FunctionDecl
ruleFunctionDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionDeclAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionNameParserRuleCall_1());
		}
		this_FunctionName_1=ruleFunctionName
		{
			$current.merge(this_FunctionName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getFunctionDeclAccess().getSignatureParserRuleCall_2());
		}
		this_Signature_2=ruleSignature
		{
			$current.merge(this_Signature_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionBodyParserRuleCall_3());
			}
			this_FunctionBody_3=ruleFunctionBody
			{
				$current.merge(this_FunctionBody_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current.getText(); }
	EOF;

// Rule FunctionName
ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_IDENTIFIER_0=RULE_IDENTIFIER
	{
		$current.merge(this_IDENTIFIER_0);
	}
	{
		newLeafNode(this_IDENTIFIER_0, grammarAccess.getFunctionNameAccess().getIDENTIFIERTerminalRuleCall());
	}
;

// Entry rule entryRuleFunctionBody
entryRuleFunctionBody returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionBodyRule()); }
	iv_ruleFunctionBody=ruleFunctionBody
	{ $current=$iv_ruleFunctionBody.current.getText(); }
	EOF;

// Rule FunctionBody
ruleFunctionBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFunctionBodyAccess().getBlockParserRuleCall());
	}
	this_Block_0=ruleBlock
	{
		$current.merge(this_Block_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleMethodDecl
entryRuleMethodDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclRule()); }
	iv_ruleMethodDecl=ruleMethodDecl
	{ $current=$iv_ruleMethodDecl.current.getText(); }
	EOF;

// Rule MethodDecl
ruleMethodDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMethodDeclAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getMethodDeclAccess().getReceiverParserRuleCall_1());
		}
		this_Receiver_1=ruleReceiver
		{
			$current.merge(this_Receiver_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getMethodDeclAccess().getMethodNameParserRuleCall_2());
		}
		this_MethodName_2=ruleMethodName
		{
			$current.merge(this_MethodName_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getMethodDeclAccess().getSignatureParserRuleCall_3());
		}
		this_Signature_3=ruleSignature
		{
			$current.merge(this_Signature_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getMethodDeclAccess().getFunctionBodyParserRuleCall_4());
			}
			this_FunctionBody_4=ruleFunctionBody
			{
				$current.merge(this_FunctionBody_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleReceiver
entryRuleReceiver returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReceiverRule()); }
	iv_ruleReceiver=ruleReceiver
	{ $current=$iv_ruleReceiver.current.getText(); }
	EOF;

// Rule Receiver
ruleReceiver returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getReceiverAccess().getParametersParserRuleCall());
	}
	this_Parameters_0=ruleParameters
	{
		$current.merge(this_Parameters_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current.getText(); }
	EOF;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBasicLitParserRuleCall_0());
		}
		this_BasicLit_0=ruleBasicLit
		{
			$current.merge(this_BasicLit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getCompositeLitParserRuleCall_1());
		}
		this_CompositeLit_1=ruleCompositeLit
		{
			$current.merge(this_CompositeLit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getFunctionLitParserRuleCall_2());
		}
		this_FunctionLit_2=ruleFunctionLit
		{
			$current.merge(this_FunctionLit_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicLit
entryRuleBasicLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicLitRule()); }
	iv_ruleBasicLit=ruleBasicLit
	{ $current=$iv_ruleBasicLit.current.getText(); }
	EOF;

// Rule BasicLit
ruleBasicLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_LITERAL_0=RULE_INT_LITERAL
		{
			$current.merge(this_INT_LITERAL_0);
		}
		{
			newLeafNode(this_INT_LITERAL_0, grammarAccess.getBasicLitAccess().getINT_LITERALTerminalRuleCall_0());
		}
		    |
		this_STRING_LIT_1=RULE_STRING_LIT
		{
			$current.merge(this_STRING_LIT_1);
		}
		{
			newLeafNode(this_STRING_LIT_1, grammarAccess.getBasicLitAccess().getSTRING_LITTerminalRuleCall_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicLitAccess().getFloat_literalParserRuleCall_2());
		}
		this_float_literal_2=rulefloat_literal
		{
			$current.merge(this_float_literal_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicLitAccess().getImaginary_litParserRuleCall_3());
		}
		this_Imaginary_lit_3=ruleImaginary_lit
		{
			$current.merge(this_Imaginary_lit_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperandName
entryRuleOperandName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperandNameRule()); }
	iv_ruleOperandName=ruleOperandName
	{ $current=$iv_ruleOperandName.current.getText(); }
	EOF;

// Rule OperandName
ruleOperandName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getOperandNameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getOperandNameAccess().getOperandNameLinhaParserRuleCall_1());
		}
		this_OperandNameLinha_1=ruleOperandNameLinha
		{
			$current.merge(this_OperandNameLinha_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperandNameLinha
entryRuleOperandNameLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperandNameLinhaRule()); }
	iv_ruleOperandNameLinha=ruleOperandNameLinha
	{ $current=$iv_ruleOperandNameLinha.current.getText(); }
	EOF;

// Rule OperandNameLinha
ruleOperandNameLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOperandNameLinhaAccess().getFullStopKeyword_0_0());
			}
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getOperandNameLinhaAccess().getIDENTIFIERTerminalRuleCall_0_1());
			}
		)
		    |
		this_ANY_OTHER_2=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_2);
		}
		{
			newLeafNode(this_ANY_OTHER_2, grammarAccess.getOperandNameLinhaAccess().getANY_OTHERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCompositeLit
entryRuleCompositeLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompositeLitRule()); }
	iv_ruleCompositeLit=ruleCompositeLit
	{ $current=$iv_ruleCompositeLit.current.getText(); }
	EOF;

// Rule CompositeLit
ruleCompositeLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralTypeParserRuleCall_0());
		}
		this_LiteralType_0=ruleLiteralType
		{
			$current.merge(this_LiteralType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralValueParserRuleCall_1());
		}
		this_LiteralValue_1=ruleLiteralValue
		{
			$current.merge(this_LiteralValue_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLiteralType
entryRuleLiteralType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralTypeRule()); }
	iv_ruleLiteralType=ruleLiteralType
	{ $current=$iv_ruleLiteralType.current.getText(); }
	EOF;

// Rule LiteralType
ruleLiteralType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getStructTypeParserRuleCall_0());
		}
		this_StructType_0=ruleStructType
		{
			$current.merge(this_StructType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getMapTypeParserRuleCall_1());
		}
		this_MapType_1=ruleMapType
		{
			$current.merge(this_MapType_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeNameParserRuleCall_2());
		}
		this_TypeName_2=ruleTypeName
		{
			$current.merge(this_TypeName_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralTypeAccess().getLeftSquareBracketKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getLiteralTypeAccess().getLiteralTypeLinhaParserRuleCall_3_1());
			}
			this_LiteralTypeLinha_4=ruleLiteralTypeLinha
			{
				$current.merge(this_LiteralTypeLinha_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleLiteralTypeLinha
entryRuleLiteralTypeLinha returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralTypeLinhaRule()); }
	iv_ruleLiteralTypeLinha=ruleLiteralTypeLinha
	{ $current=$iv_ruleLiteralTypeLinha.current.getText(); }
	EOF;

// Rule LiteralTypeLinha
ruleLiteralTypeLinha returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(ruleArrayLength)=>
				{
					newCompositeNode(grammarAccess.getLiteralTypeLinhaAccess().getArrayLengthParserRuleCall_0_0());
				}
				this_ArrayLength_0=ruleArrayLength
				{
					$current.merge(this_ArrayLength_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralTypeLinhaAccess().getRightSquareBracketKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getLiteralTypeLinhaAccess().getElementTypeParserRuleCall_0_2());
			}
			this_ElementType_2=ruleElementType
			{
				$current.merge(this_ElementType_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralTypeLinhaAccess().getFullStopFullStopFullStopKeyword_1_0());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralTypeLinhaAccess().getRightSquareBracketKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getLiteralTypeLinhaAccess().getElementTypeParserRuleCall_1_2());
			}
			this_ElementType_5=ruleElementType
			{
				$current.merge(this_ElementType_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralTypeLinhaAccess().getRightSquareBracketKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getLiteralTypeLinhaAccess().getElementTypeParserRuleCall_2_1());
			}
			this_ElementType_7=ruleElementType
			{
				$current.merge(this_ElementType_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleLiteralValue
entryRuleLiteralValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	iv_ruleLiteralValue=ruleLiteralValue
	{ $current=$iv_ruleLiteralValue.current.getText(); }
	EOF;

// Rule LiteralValue
ruleLiteralValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLiteralValueAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				((
					ruleKey
					':'
				)
				)=>
				{
					newCompositeNode(grammarAccess.getLiteralValueAccess().getElementListParserRuleCall_1_0());
				}
				this_ElementList_1=ruleElementList
				{
					$current.merge(this_ElementList_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLiteralValueAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLiteralValueAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleElementList
entryRuleElementList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementListRule()); }
	iv_ruleElementList=ruleElementList
	{ $current=$iv_ruleElementList.current.getText(); }
	EOF;

// Rule ElementList
ruleElementList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleKey
				':'
			)
			)=>
			{
				newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_0());
			}
			this_KeyedElement_0=ruleKeyedElement
			{
				$current.merge(this_KeyedElement_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getElementListAccess().getCommaKeyword_1_0());
			}
			(
				((
					ruleKey
					':'
				)
				)=>
				{
					newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_1_1());
				}
				this_KeyedElement_2=ruleKeyedElement
				{
					$current.merge(this_KeyedElement_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleKeyedElement
entryRuleKeyedElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKeyedElementRule()); }
	iv_ruleKeyedElement=ruleKeyedElement
	{ $current=$iv_ruleKeyedElement.current.getText(); }
	EOF;

// Rule KeyedElement
ruleKeyedElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleKey
				':'
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getKeyedElementAccess().getKeyParserRuleCall_0_0_0());
				}
				this_Key_0=ruleKey
				{
					$current.merge(this_Key_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getKeyedElementAccess().getColonKeyword_0_0_1());
				}
			)
		)?
		{
			newCompositeNode(grammarAccess.getKeyedElementAccess().getElementParserRuleCall_1());
		}
		this_Element_2=ruleElement
		{
			$current.merge(this_Element_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleKey
entryRuleKey returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_ruleKey=ruleKey
	{ $current=$iv_ruleKey.current.getText(); }
	EOF;

// Rule Key
ruleKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getKeyAccess().getFieldNameParserRuleCall_0());
		}
		this_FieldName_0=ruleFieldName
		{
			$current.merge(this_FieldName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getKeyAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current.merge(this_Expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getKeyAccess().getLiteralValueParserRuleCall_2());
		}
		this_LiteralValue_2=ruleLiteralValue
		{
			$current.merge(this_LiteralValue_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFieldName
entryRuleFieldName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFieldNameRule()); }
	iv_ruleFieldName=ruleFieldName
	{ $current=$iv_ruleFieldName.current.getText(); }
	EOF;

// Rule FieldName
ruleFieldName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_IDENTIFIER_0=RULE_IDENTIFIER
	{
		$current.merge(this_IDENTIFIER_0);
	}
	{
		newLeafNode(this_IDENTIFIER_0, grammarAccess.getFieldNameAccess().getIDENTIFIERTerminalRuleCall());
	}
;

// Entry rule entryRuleElement
entryRuleElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current.getText(); }
	EOF;

// Rule Element
ruleElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current.merge(this_Expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getLiteralValueParserRuleCall_1());
		}
		this_LiteralValue_1=ruleLiteralValue
		{
			$current.merge(this_LiteralValue_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionLit
entryRuleFunctionLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionLitRule()); }
	iv_ruleFunctionLit=ruleFunctionLit
	{ $current=$iv_ruleFunctionLit.current.getText(); }
	EOF;

// Rule FunctionLit
ruleFunctionLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionLitAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunctionLitAccess().getSignatureParserRuleCall_1());
		}
		this_Signature_1=ruleSignature
		{
			$current.merge(this_Signature_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getFunctionLitAccess().getFunctionBodyParserRuleCall_2());
		}
		this_FunctionBody_2=ruleFunctionBody
		{
			$current.merge(this_FunctionBody_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReceiverType
entryRuleReceiverType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReceiverTypeRule()); }
	iv_ruleReceiverType=ruleReceiverType
	{ $current=$iv_ruleReceiverType.current.getText(); }
	EOF;

// Rule ReceiverType
ruleReceiverType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getReceiverTypeAccess().getTypeParserRuleCall());
	}
	this_Type_0=ruleType
	{
		$current.merge(this_Type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSourceFile
entryRuleSourceFile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSourceFileRule()); }
	iv_ruleSourceFile=ruleSourceFile
	{ $current=$iv_ruleSourceFile.current.getText(); }
	EOF;

// Rule SourceFile
ruleSourceFile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSourceFileAccess().getPackageClauseParserRuleCall_0());
		}
		this_PackageClause_0=rulePackageClause
		{
			$current.merge(this_PackageClause_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSourceFileAccess().getSemicolonKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_2_0());
			}
			this_ImportDecl_2=ruleImportDecl
			{
				$current.merge(this_ImportDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSourceFileAccess().getSemicolonKeyword_2_1());
			}
		)*
		(
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getTopLevelDeclParserRuleCall_3_0());
			}
			this_TopLevelDecl_4=ruleTopLevelDecl
			{
				$current.merge(this_TopLevelDecl_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSourceFileAccess().getSemicolonKeyword_3_1());
			}
		)*
	)
;

// Entry rule entryRulePackageClause
entryRulePackageClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackageClauseRule()); }
	iv_rulePackageClause=rulePackageClause
	{ $current=$iv_rulePackageClause.current.getText(); }
	EOF;

// Rule PackageClause
rulePackageClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='package'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPackageClauseAccess().getPackageKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getPackageClauseAccess().getPackageNameParserRuleCall_1());
		}
		this_PackageName_1=rulePackageName
		{
			$current.merge(this_PackageName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImportDecl
entryRuleImportDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportDeclRule()); }
	iv_ruleImportDecl=ruleImportDecl
	{ $current=$iv_ruleImportDecl.current.getText(); }
	EOF;

// Rule ImportDecl
ruleImportDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImportDeclAccess().getImportKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_0());
			}
			this_ImportSpec_1=ruleImportSpec
			{
				$current.merge(this_ImportSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_1_1_0());
					}
					this_ImportSpec_3=ruleImportSpec
					{
						$current.merge(this_ImportSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					kw=';'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getImportDeclAccess().getSemicolonKeyword_1_1_1_1());
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleImportSpec
entryRuleImportSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportSpecRule()); }
	iv_ruleImportSpec=ruleImportSpec
	{ $current=$iv_ruleImportSpec.current.getText(); }
	EOF;

// Rule ImportSpec
ruleImportSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getImportSpecAccess().getPackageNameParserRuleCall_0_1());
			}
			this_PackageName_1=rulePackageName
			{
				$current.merge(this_PackageName_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getImportSpecAccess().getImportPathParserRuleCall_1());
		}
		this_ImportPath_2=ruleImportPath
		{
			$current.merge(this_ImportPath_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImportPath
entryRuleImportPath returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportPathRule()); }
	iv_ruleImportPath=ruleImportPath
	{ $current=$iv_ruleImportPath.current.getText(); }
	EOF;

// Rule ImportPath
ruleImportPath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_LIT_0=RULE_STRING_LIT
	{
		$current.merge(this_STRING_LIT_0);
	}
	{
		newLeafNode(this_STRING_LIT_0, grammarAccess.getImportPathAccess().getSTRING_LITTerminalRuleCall());
	}
;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z'|'_');

fragment RULE_NEW_LINE : ('\n'|'\r'|'\n\r');

RULE_UNICODE_CHAR : ~(RULE_NEW_LINE);

RULE_INT_LITERAL : ('1'..'9' ('0'..'9')*|('0'..'7')*|'0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+);

RULE_DECIMAL_DIGITS : '0'..'9' ('0'..'9')*;

RULE_EXPONENT_PART : 'e' ('+'|'-') RULE_DECIMAL_DIGITS;

RULE_STRING_LIT : 'oi';

RULE_RUNE_LIT : 'oiiii';

RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

RULE_ADD_OP : ('+'|'-'|'|'|'^');

RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
