/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Greeting*;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=Greeting*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Greeting");
		private final RuleCall cSourceFileParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Greeting:
		//	SourceFile;
		@Override public ParserRule getRule() { return rule; }
		
		//SourceFile
		public RuleCall getSourceFileParserRuleCall() { return cSourceFileParserRuleCall; }
	}
	public class FLOAT_LITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FLOAT_LIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMALSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDECIMALSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cEXPONENTTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDECIMALSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cEXPONENTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDECIMALSTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cEXPONENTTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//FLOAT_LIT:
		//	DECIMALS "." DECIMALS? EXPONENT? | DECIMALS EXPONENT |
		//	"." DECIMALS EXPONENT?;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMALS "." DECIMALS? EXPONENT? | DECIMALS EXPONENT | "." DECIMALS EXPONENT?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMALS "." DECIMALS? EXPONENT?
		public Group getGroup_0() { return cGroup_0; }
		
		//DECIMALS
		public RuleCall getDECIMALSTerminalRuleCall_0_0() { return cDECIMALSTerminalRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//DECIMALS?
		public RuleCall getDECIMALSTerminalRuleCall_0_2() { return cDECIMALSTerminalRuleCall_0_2; }
		
		//EXPONENT?
		public RuleCall getEXPONENTTerminalRuleCall_0_3() { return cEXPONENTTerminalRuleCall_0_3; }
		
		//DECIMALS EXPONENT
		public Group getGroup_1() { return cGroup_1; }
		
		//DECIMALS
		public RuleCall getDECIMALSTerminalRuleCall_1_0() { return cDECIMALSTerminalRuleCall_1_0; }
		
		//EXPONENT
		public RuleCall getEXPONENTTerminalRuleCall_1_1() { return cEXPONENTTerminalRuleCall_1_1; }
		
		//"." DECIMALS EXPONENT?
		public Group getGroup_2() { return cGroup_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//DECIMALS
		public RuleCall getDECIMALSTerminalRuleCall_2_1() { return cDECIMALSTerminalRuleCall_2_1; }
		
		//EXPONENT?
		public RuleCall getEXPONENTTerminalRuleCall_2_2() { return cEXPONENTTerminalRuleCall_2_2; }
	}
	public class IMAGINARY_LITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IMAGINARY_LIT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDECIMALSTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFLOAT_LITParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IMAGINARY_LIT:
		//	(DECIMALS | FLOAT_LIT) "i";
		@Override public ParserRule getRule() { return rule; }
		
		//(DECIMALS | FLOAT_LIT) "i"
		public Group getGroup() { return cGroup; }
		
		//(DECIMALS | FLOAT_LIT)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//DECIMALS
		public RuleCall getDECIMALSTerminalRuleCall_0_0() { return cDECIMALSTerminalRuleCall_0_0; }
		
		//FLOAT_LIT
		public RuleCall getFLOAT_LITParserRuleCall_0_1() { return cFLOAT_LITParserRuleCall_0_1; }
		
		//"i"
		public Keyword getIKeyword_1() { return cIKeyword_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Type:
		//	TypeName | TypeLit | "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName | TypeLit | "(" Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_0() { return cTypeNameParserRuleCall_0; }
		
		//TypeLit
		public RuleCall getTypeLitParserRuleCall_1() { return cTypeLitParserRuleCall_1; }
		
		//"(" Type ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2_1() { return cTypeParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeNameLinhaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeName:
		//	IDENTIFIER TypeNameLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER TypeNameLinha
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//TypeNameLinha
		public RuleCall getTypeNameLinhaParserRuleCall_1() { return cTypeNameLinhaParserRuleCall_1; }
	}
	public class TypeNameLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeNameLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeNameLinha:
		//	"." IDENTIFIER | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." IDENTIFIER
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_1() { return cIDENTIFIERTerminalRuleCall_0_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class TypeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTypeLitLinhaParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointerTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInterfaceTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMapTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cChannelTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//TypeLit:
		//	"[" TypeLitLinha | StructType | PointerType | FunctionType | InterfaceType | MapType | ChannelType;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" TypeLitLinha | StructType | PointerType | FunctionType | InterfaceType | MapType | ChannelType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" TypeLitLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//TypeLitLinha
		public RuleCall getTypeLitLinhaParserRuleCall_0_1() { return cTypeLitLinhaParserRuleCall_0_1; }
		
		//StructType
		public RuleCall getStructTypeParserRuleCall_1() { return cStructTypeParserRuleCall_1; }
		
		//PointerType
		public RuleCall getPointerTypeParserRuleCall_2() { return cPointerTypeParserRuleCall_2; }
		
		//FunctionType
		public RuleCall getFunctionTypeParserRuleCall_3() { return cFunctionTypeParserRuleCall_3; }
		
		//InterfaceType
		public RuleCall getInterfaceTypeParserRuleCall_4() { return cInterfaceTypeParserRuleCall_4; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_5() { return cMapTypeParserRuleCall_5; }
		
		//ChannelType
		public RuleCall getChannelTypeParserRuleCall_6() { return cChannelTypeParserRuleCall_6; }
	}
	public class TypeLitLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeLitLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cElementTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TypeLitLinha:
		//	ArrayLength "]" ElementType
		//	| "]" ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayLength "]" ElementType | "]" ElementType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayLength "]" ElementType
		public Group getGroup_0() { return cGroup_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_0_0() { return cArrayLengthParserRuleCall_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_0_2() { return cElementTypeParserRuleCall_0_2; }
		
		//"]" ElementType
		public Group getGroup_1() { return cGroup_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0() { return cRightSquareBracketKeyword_1_0; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_1_1() { return cElementTypeParserRuleCall_1_1; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArrayLength");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArrayLength:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElementType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ElementType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRUCTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cFieldDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StructType:
		//	STRUCT "{" (FieldDecl ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//STRUCT "{" (FieldDecl ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//STRUCT
		public RuleCall getSTRUCTTerminalRuleCall_0() { return cSTRUCTTerminalRuleCall_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(FieldDecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//FieldDecl
		public RuleCall getFieldDeclParserRuleCall_2_0() { return cFieldDeclParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdentifierListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cEmbeddedFieldParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTagParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FieldDecl:
		//	(IdentifierList Type | EmbeddedField) Tag?;
		@Override public ParserRule getRule() { return rule; }
		
		//(IdentifierList Type | EmbeddedField) Tag?
		public Group getGroup() { return cGroup; }
		
		//(IdentifierList Type | EmbeddedField)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//IdentifierList Type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_0_0() { return cIdentifierListParserRuleCall_0_0_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0_0_1() { return cTypeParserRuleCall_0_0_1; }
		
		//EmbeddedField
		public RuleCall getEmbeddedFieldParserRuleCall_0_1() { return cEmbeddedFieldParserRuleCall_0_1; }
		
		//Tag?
		public RuleCall getTagParserRuleCall_1() { return cTagParserRuleCall_1; }
	}
	public class EmbeddedFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EmbeddedField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EmbeddedField:
		//	"*"? TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//"*"? TypeName
		public Group getGroup() { return cGroup; }
		
		//"*"?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Tag");
		private final RuleCall cSTRING_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Tag:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall() { return cSTRING_LITTerminalRuleCall; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBaseTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PointerType:
		//	"*" BaseType;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" BaseType
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//BaseType
		public RuleCall getBaseTypeParserRuleCall_1() { return cBaseTypeParserRuleCall_1; }
	}
	public class BaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BaseType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BaseType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFUNCTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FunctionType:
		//	FUNC Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//FUNC Signature
		public Group getGroup() { return cGroup; }
		
		//FUNC
		public RuleCall getFUNCTerminalRuleCall_0() { return cFUNCTerminalRuleCall_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cResultParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Signature:
		//	Parameters => Result?;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters => Result?
		public Group getGroup() { return cGroup; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//=> Result?
		public RuleCall getResultParserRuleCall_1() { return cResultParserRuleCall_1; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Result:
		//	=> Parameters | Type;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Parameters | Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cParameterListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameters:
		//	"(" (ParameterList ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" (ParameterList ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ParameterList ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_1_0() { return cParameterListParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterDeclParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cParameterDeclParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ParameterList:
		//	ParameterDecl ("," ParameterDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterDecl ("," ParameterDecl)*
		public Group getGroup() { return cGroup; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_0() { return cParameterDeclParserRuleCall_0; }
		
		//("," ParameterDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_1_1() { return cParameterDeclParserRuleCall_1_1; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ParameterDecl:
		//	IdentifierList? "..."? Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList? "..."? Type
		public Group getGroup() { return cGroup; }
		
		//IdentifierList?
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTERFACETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMethodSpecParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InterfaceType:
		//	INTERFACE "{" (MethodSpec ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//INTERFACE "{" (MethodSpec ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//INTERFACE
		public RuleCall getINTERFACETerminalRuleCall_0() { return cINTERFACETerminalRuleCall_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(MethodSpec ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//MethodSpec
		public RuleCall getMethodSpecParserRuleCall_2_0() { return cMethodSpecParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MethodSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMethodNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cInterfaceTypeNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MethodSpec:
		//	MethodName Signature | InterfaceTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodName Signature | InterfaceTypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodName Signature
		public Group getGroup_0() { return cGroup_0; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_0_0() { return cMethodNameParserRuleCall_0_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_0_1() { return cSignatureParserRuleCall_0_1; }
		
		//InterfaceTypeName
		public RuleCall getInterfaceTypeNameParserRuleCall_1() { return cInterfaceTypeNameParserRuleCall_1; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodName");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class InterfaceTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InterfaceTypeName");
		private final RuleCall cTypeNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InterfaceTypeName:
		//	TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall() { return cTypeNameParserRuleCall; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAPTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cKeyTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cElementTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//MapType:
		//	MAP "[" KeyType "]" ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//MAP "[" KeyType "]" ElementType
		public Group getGroup() { return cGroup; }
		
		//MAP
		public RuleCall getMAPTerminalRuleCall_0() { return cMAPTerminalRuleCall_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//KeyType
		public RuleCall getKeyTypeParserRuleCall_2() { return cKeyTypeParserRuleCall_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_4() { return cElementTypeParserRuleCall_4; }
	}
	public class KeyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.KeyType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//KeyType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ChannelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cCHANTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cChannelTypeLinhaParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cCHANTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ChannelType:
		//	(CHAN ChannelTypeLinha | "<-" CHAN) ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//(CHAN ChannelTypeLinha | "<-" CHAN) ElementType
		public Group getGroup() { return cGroup; }
		
		//(CHAN ChannelTypeLinha | "<-" CHAN)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//CHAN ChannelTypeLinha
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//CHAN
		public RuleCall getCHANTerminalRuleCall_0_0_0() { return cCHANTerminalRuleCall_0_0_0; }
		
		//ChannelTypeLinha
		public RuleCall getChannelTypeLinhaParserRuleCall_0_0_1() { return cChannelTypeLinhaParserRuleCall_0_0_1; }
		
		//"<-" CHAN
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_0() { return cLessThanSignHyphenMinusKeyword_0_1_0; }
		
		//CHAN
		public RuleCall getCHANTerminalRuleCall_0_1_1() { return cCHANTerminalRuleCall_0_1_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_1() { return cElementTypeParserRuleCall_1; }
	}
	public class ChannelTypeLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ChannelTypeLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ChannelTypeLinha:
		//	"<-" | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0() { return cLessThanSignHyphenMinusKeyword_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" StatementList "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" StatementList "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StatementList:
		//	(Statement ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Statement ";")*
		public Group getGroup() { return cGroup; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declaration:
		//	ConstDecl | TypeDecl | VarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstDecl | TypeDecl | VarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstDecl
		public RuleCall getConstDeclParserRuleCall_0() { return cConstDeclParserRuleCall_0; }
		
		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_1() { return cTypeDeclParserRuleCall_1; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_2() { return cVarDeclParserRuleCall_2; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TopLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TopLevelDecl:
		//	Declaration | FunctionDecl | MethodDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | FunctionDecl | MethodDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//FunctionDecl
		public RuleCall getFunctionDeclParserRuleCall_1() { return cFunctionDeclParserRuleCall_1; }
		
		//MethodDecl
		public RuleCall getMethodDeclParserRuleCall_2() { return cMethodDeclParserRuleCall_2; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConstDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCONSTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cConstSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ConstDecl:
		//	CONST (ConstSpec | "(" (ConstSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//CONST (ConstSpec | "(" (ConstSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//CONST
		public RuleCall getCONSTTerminalRuleCall_0() { return cCONSTTerminalRuleCall_0; }
		
		//(ConstSpec | "(" (ConstSpec ";")* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ConstSpec
		public RuleCall getConstSpecParserRuleCall_1_0() { return cConstSpecParserRuleCall_1_0; }
		
		//"(" (ConstSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(ConstSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ConstSpec
		public RuleCall getConstSpecParserRuleCall_1_1_1_0() { return cConstSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ConstSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConstSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ConstSpec:
		//	IdentifierList (Type? "=" ExpressionList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList (Type? "=" ExpressionList)?
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//(Type? "=" ExpressionList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//Type?
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_2() { return cExpressionListParserRuleCall_1_2; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IdentifierList:
		//	IDENTIFIER ("," IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER ("," IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ExpressionList:
		//	Expression ("," Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ("," Expression)*
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//("," Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPEKEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//TypeDecl:
		//	TYPEKEYWORD (TypeSpec | "(" (TypeSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//TYPEKEYWORD (TypeSpec | "(" (TypeSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//TYPEKEYWORD
		public RuleCall getTYPEKEYWORDTerminalRuleCall_0() { return cTYPEKEYWORDTerminalRuleCall_0; }
		
		//(TypeSpec | "(" (TypeSpec ";")* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TypeSpec
		public RuleCall getTypeSpecParserRuleCall_1_0() { return cTypeSpecParserRuleCall_1_0; }
		
		//"(" (TypeSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(TypeSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//TypeSpec
		public RuleCall getTypeSpecParserRuleCall_1_1_1_0() { return cTypeSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpec:
		//	AliasDecl | TypeDef;
		@Override public ParserRule getRule() { return rule; }
		
		//AliasDecl | TypeDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AliasDecl
		public RuleCall getAliasDeclParserRuleCall_0() { return cAliasDeclParserRuleCall_0; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_1() { return cTypeDefParserRuleCall_1; }
	}
	public class AliasDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AliasDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AliasDecl:
		//	IDENTIFIER "=" Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER "=" Type
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeDef:
		//	IDENTIFIER Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER Type
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVarSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cVarSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//VarDecl:
		//	VAR (VarSpec | "(" (VarSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//VAR (VarSpec | "(" (VarSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//VAR
		public RuleCall getVARTerminalRuleCall_0() { return cVARTerminalRuleCall_0; }
		
		//(VarSpec | "(" (VarSpec ";")* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//VarSpec
		public RuleCall getVarSpecParserRuleCall_1_0() { return cVarSpecParserRuleCall_1_0; }
		
		//"(" (VarSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(VarSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//VarSpec
		public RuleCall getVarSpecParserRuleCall_1_1_1_0() { return cVarSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//VarSpec:
		//	IdentifierList (Type ("=" ExpressionList)? | "=" ExpressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList (Type ("=" ExpressionList)? | "=" ExpressionList)
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//(Type ("=" ExpressionList)? | "=" ExpressionList)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Type ("=" ExpressionList)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0_0() { return cTypeParserRuleCall_1_0_0; }
		
		//("=" ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_0_1_1() { return cExpressionListParserRuleCall_1_0_1_1; }
		
		//"=" ExpressionList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_1_1() { return cExpressionListParserRuleCall_1_1_1; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ShortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ShortVarDecl:
		//	IdentifierList ":=" ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList ":=" ExpressionList
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_2() { return cExpressionListParserRuleCall_2; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFUNCTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSignatureParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FunctionDecl:
		//	FUNC FunctionName Signature FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//FUNC FunctionName Signature FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//FUNC
		public RuleCall getFUNCTerminalRuleCall_0() { return cFUNCTerminalRuleCall_0; }
		
		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_1() { return cFunctionNameParserRuleCall_1; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_2() { return cSignatureParserRuleCall_2; }
		
		//FunctionBody?
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionName");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionBody");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionBody:
		//	Block;
		@Override public ParserRule getRule() { return rule; }
		
		//Block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFUNCTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cReceiverParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cMethodNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSignatureParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cFunctionBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//MethodDecl:
		//	FUNC Receiver MethodName Signature FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//FUNC Receiver MethodName Signature FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//FUNC
		public RuleCall getFUNCTerminalRuleCall_0() { return cFUNCTerminalRuleCall_0; }
		
		//Receiver
		public RuleCall getReceiverParserRuleCall_1() { return cReceiverParserRuleCall_1; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_2() { return cMethodNameParserRuleCall_2; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_3() { return cSignatureParserRuleCall_3; }
		
		//FunctionBody?
		public RuleCall getFunctionBodyParserRuleCall_4() { return cFunctionBodyParserRuleCall_4; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Receiver");
		private final RuleCall cParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Receiver:
		//	Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall() { return cParametersParserRuleCall; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperandNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Operand:
		//	Literal | OperandName | "(" Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | OperandName | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//OperandName
		public RuleCall getOperandNameParserRuleCall_1() { return cOperandNameParserRuleCall_1; }
		
		//"(" Expression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionLitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	BasicLit | CompositeLit | FunctionLit;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicLit | CompositeLit | FunctionLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicLit
		public RuleCall getBasicLitParserRuleCall_0() { return cBasicLitParserRuleCall_0; }
		
		//CompositeLit
		public RuleCall getCompositeLitParserRuleCall_1() { return cCompositeLitParserRuleCall_1; }
		
		//FunctionLit
		public RuleCall getFunctionLitParserRuleCall_2() { return cFunctionLitParserRuleCall_2; }
	}
	public class BasicLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BasicLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINT_LITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOAT_LITParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIMAGINARY_LITParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRING_LITTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BasicLit:
		//	INT_LIT | FLOAT_LIT | IMAGINARY_LIT | STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LIT | FLOAT_LIT | IMAGINARY_LIT | STRING_LIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT_LIT
		public RuleCall getINT_LITTerminalRuleCall_0() { return cINT_LITTerminalRuleCall_0; }
		
		//FLOAT_LIT
		public RuleCall getFLOAT_LITParserRuleCall_1() { return cFLOAT_LITParserRuleCall_1; }
		
		//IMAGINARY_LIT
		public RuleCall getIMAGINARY_LITParserRuleCall_2() { return cIMAGINARY_LITParserRuleCall_2; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall_3() { return cSTRING_LITTerminalRuleCall_3; }
	}
	public class OperandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperandName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOperandNameLinhaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OperandName:
		//	IDENTIFIER OperandNameLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER OperandNameLinha
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//OperandNameLinha
		public RuleCall getOperandNameLinhaParserRuleCall_1() { return cOperandNameLinhaParserRuleCall_1; }
	}
	public class OperandNameLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperandNameLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperandNameLinha:
		//	"." IDENTIFIER | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." IDENTIFIER
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_1() { return cIDENTIFIERTerminalRuleCall_0_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class CompositeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CompositeLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteralTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CompositeLit:
		//	LiteralType LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralType LiteralValue
		public Group getGroup() { return cGroup; }
		
		//LiteralType
		public RuleCall getLiteralTypeParserRuleCall_0() { return cLiteralTypeParserRuleCall_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMapTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralTypeLinhaParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//LiteralType:
		//	StructType | MapType | TypeName | "[" LiteralTypeLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//StructType | MapType | TypeName | "[" LiteralTypeLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StructType
		public RuleCall getStructTypeParserRuleCall_0() { return cStructTypeParserRuleCall_0; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_1() { return cMapTypeParserRuleCall_1; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_2() { return cTypeNameParserRuleCall_2; }
		
		//"[" LiteralTypeLinha
		public Group getGroup_3() { return cGroup_3; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//LiteralTypeLinha
		public RuleCall getLiteralTypeLinhaParserRuleCall_3_1() { return cLiteralTypeLinhaParserRuleCall_3_1; }
	}
	public class LiteralTypeLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralTypeLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cElementTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//LiteralTypeLinha:
		//	ArrayLength "]" ElementType | "..." "]" ElementType | "]" ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayLength "]" ElementType | "..." "]" ElementType | "]" ElementType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayLength "]" ElementType
		public Group getGroup_0() { return cGroup_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_0_0() { return cArrayLengthParserRuleCall_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_0_2() { return cElementTypeParserRuleCall_0_2; }
		
		//"..." "]" ElementType
		public Group getGroup_1() { return cGroup_1; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_0() { return cFullStopFullStopFullStopKeyword_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_1_2() { return cElementTypeParserRuleCall_1_2; }
		
		//"]" ElementType
		public Group getGroup_2() { return cGroup_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_0() { return cRightSquareBracketKeyword_2_0; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_2_1() { return cElementTypeParserRuleCall_2_1; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cElementListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LiteralValue:
		//	"{" (ElementList ","?)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (ElementList ","?)? "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(ElementList ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ElementList
		public RuleCall getElementListParserRuleCall_1_0() { return cElementListParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyedElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cKeyedElementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ElementList:
		//	KeyedElement ("," KeyedElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//KeyedElement ("," KeyedElement)*
		public Group getGroup() { return cGroup; }
		
		//KeyedElement
		public RuleCall getKeyedElementParserRuleCall_0() { return cKeyedElementParserRuleCall_0; }
		
		//("," KeyedElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//KeyedElement
		public RuleCall getKeyedElementParserRuleCall_1_1() { return cKeyedElementParserRuleCall_1_1; }
	}
	public class KeyedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.KeyedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//KeyedElement:
		//	=> (Key ":")? Element;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (Key ":")? Element
		public Group getGroup() { return cGroup; }
		
		//=> (Key ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//(Key ":")
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//Key
		public RuleCall getKeyParserRuleCall_0_0_0() { return cKeyParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//Element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Key:
		//	FieldName | Expression | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//FieldName | Expression | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FieldName
		public RuleCall getFieldNameParserRuleCall_0() { return cFieldNameParserRuleCall_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_2() { return cLiteralValueParserRuleCall_2; }
	}
	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldName");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Expression | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class FunctionLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFUNCTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cFunctionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FunctionLit:
		//	FUNC Signature FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//FUNC Signature FunctionBody
		public Group getGroup() { return cGroup; }
		
		//FUNC
		public RuleCall getFUNCTerminalRuleCall_0() { return cFUNCTerminalRuleCall_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_2() { return cFunctionBodyParserRuleCall_2; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cBasicLitParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cPrimaryExpr4ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cMapTypeParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cPrimaryExpr4ParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cIDENTIFIERTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cTypeNameLinhaParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cPrimaryExpr5ParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cPrimaryExpr6ParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cFUNCTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cPrimaryExpr7ParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cPointerTypeParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final RuleCall cPrimaryExpr1ParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cInterfaceTypeParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final RuleCall cPrimaryExpr1ParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cChannelTypeParserRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final RuleCall cPrimaryExpr1ParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cPrimaryExpr3ParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		
		//PrimaryExpr:
		//	BasicLit PrimaryExprLinha | StructType PrimaryExpr4 PrimaryExprLinha | MapType PrimaryExpr4 PrimaryExprLinha |
		//	IDENTIFIER TypeNameLinha PrimaryExpr5 PrimaryExprLinha |
		//	"[" PrimaryExpr6 PrimaryExprLinha | FUNC Signature PrimaryExpr7 PrimaryExprLinha | PointerType PrimaryExpr1
		//	PrimaryExprLinha | InterfaceType PrimaryExpr1 PrimaryExprLinha | ChannelType PrimaryExpr1 PrimaryExprLinha |
		//	"(" PrimaryExpr3 PrimaryExprLinha
		//	/ *BasicLit PrimaryExprLinha |
		//	StructType LiteralValue PrimaryExprLinha|
		//	MapType LiteralValue PrimaryExprLinha|
		//	TypeName LiteralValue PrimaryExprLinha|
		//	"[" LiteralTypeLinha LiteralValue PrimaryExprLinha|
		//	FunctionLit PrimaryExprLinha |
		//	"[" TypeLitLinha PrimaryExpr1 PrimaryExprLinha|
		//	StructType PrimaryExpr1 PrimaryExprLinha|
		//	PointerType PrimaryExpr1 PrimaryExprLinha|
		//	FunctionType PrimaryExpr1 PrimaryExprLinha|
		//	InterfaceType PrimaryExpr1 PrimaryExprLinha|
		//	MapType PrimaryExpr1 PrimaryExprLinha|
		//	ChannelType PrimaryExpr1 PrimaryExprLinha|
		//	"(" PrimaryExpr3 PrimaryExprLinha |
		//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
		/// *BasicLit PrimaryExprLinha |
		//	(StructType | MapType | TypeName | "[" LiteralTypeLinha) LiteralValue PrimaryExprLinha |
		//	FunctionLit PrimaryExprLinha |
		//	"[" TypeLitLinha PrimaryExpr1 PrimaryExprLinha|
		//	StructType PrimaryExpr1 PrimaryExprLinha|
		//	PointerType PrimaryExpr1 PrimaryExprLinha|
		//	FunctionType PrimaryExpr1 PrimaryExprLinha|
		//	InterfaceType PrimaryExpr1 PrimaryExprLinha|
		//	MapType PrimaryExpr1 PrimaryExprLinha|
		//	ChannelType PrimaryExpr1 PrimaryExprLinha|
		//	"(" PrimaryExpr3 PrimaryExprLinha |
		//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
		/// *(BasicLit | CompositeLit | FunctionLit) PrimaryExprLinha |
		//	( "[" TypeLitLinha | StructType | PointerType | FunctionType | InterfaceType |
		//	  MapType | ChannelType) PrimaryExpr1 PrimaryExprLinha |
		//	"(" PrimaryExpr3 PrimaryExprLinha |
		//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
		/// *Literal PrimaryExprLinha |
		//	TypeLit PrimaryExpr1 PrimaryExprLinha |
		//	"(" PrimaryExpr3 PrimaryExprLinha |
		//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
		/// *(Literal | "(" Expression ")") PrimaryExprLinha|
		//	(TypeLit |  "(" Type ")") PrimaryExpr1 PrimaryExprLinha |
		//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
		/// *(Literal | IDENTIFIER OperandNameLinha | "(" Expression ")") PrimaryExprLinha|
		//	(IDENTIFIER TypeNameLinha | TypeLit | "(" Type ")") PrimaryExpr1 PrimaryExprLinha* /
		/// *(Literal | OperandName | "(" Expression ")") PrimaryExprLinha | 
		//	Type "(" Expression ( "," )? ")" PrimaryExprLinha |
		//	Type "." MethodName PrimaryExprLinha* /
		//	/ *Operand PrimaryExprLinha | Conversion PrimaryExprLinha | MethodExpr PrimaryExprLinha * /;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicLit PrimaryExprLinha | StructType PrimaryExpr4 PrimaryExprLinha | MapType PrimaryExpr4 PrimaryExprLinha |
		//IDENTIFIER TypeNameLinha PrimaryExpr5 PrimaryExprLinha | "[" PrimaryExpr6 PrimaryExprLinha | FUNC Signature
		//PrimaryExpr7 PrimaryExprLinha | PointerType PrimaryExpr1 PrimaryExprLinha | InterfaceType PrimaryExpr1
		//PrimaryExprLinha | ChannelType PrimaryExpr1 PrimaryExprLinha | "(" PrimaryExpr3 PrimaryExprLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicLit PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//BasicLit
		public RuleCall getBasicLitParserRuleCall_0_0() { return cBasicLitParserRuleCall_0_0; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_0_1() { return cPrimaryExprLinhaParserRuleCall_0_1; }
		
		//StructType PrimaryExpr4 PrimaryExprLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//StructType
		public RuleCall getStructTypeParserRuleCall_1_0() { return cStructTypeParserRuleCall_1_0; }
		
		//PrimaryExpr4
		public RuleCall getPrimaryExpr4ParserRuleCall_1_1() { return cPrimaryExpr4ParserRuleCall_1_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_1_2() { return cPrimaryExprLinhaParserRuleCall_1_2; }
		
		//MapType PrimaryExpr4 PrimaryExprLinha
		public Group getGroup_2() { return cGroup_2; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_2_0() { return cMapTypeParserRuleCall_2_0; }
		
		//PrimaryExpr4
		public RuleCall getPrimaryExpr4ParserRuleCall_2_1() { return cPrimaryExpr4ParserRuleCall_2_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_2_2() { return cPrimaryExprLinhaParserRuleCall_2_2; }
		
		//IDENTIFIER TypeNameLinha PrimaryExpr5 PrimaryExprLinha
		public Group getGroup_3() { return cGroup_3; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_3_0() { return cIDENTIFIERTerminalRuleCall_3_0; }
		
		//TypeNameLinha
		public RuleCall getTypeNameLinhaParserRuleCall_3_1() { return cTypeNameLinhaParserRuleCall_3_1; }
		
		//PrimaryExpr5
		public RuleCall getPrimaryExpr5ParserRuleCall_3_2() { return cPrimaryExpr5ParserRuleCall_3_2; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_3_3() { return cPrimaryExprLinhaParserRuleCall_3_3; }
		
		//"[" PrimaryExpr6 PrimaryExprLinha
		public Group getGroup_4() { return cGroup_4; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//PrimaryExpr6
		public RuleCall getPrimaryExpr6ParserRuleCall_4_1() { return cPrimaryExpr6ParserRuleCall_4_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_4_2() { return cPrimaryExprLinhaParserRuleCall_4_2; }
		
		//FUNC Signature PrimaryExpr7 PrimaryExprLinha
		public Group getGroup_5() { return cGroup_5; }
		
		//FUNC
		public RuleCall getFUNCTerminalRuleCall_5_0() { return cFUNCTerminalRuleCall_5_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_5_1() { return cSignatureParserRuleCall_5_1; }
		
		//PrimaryExpr7
		public RuleCall getPrimaryExpr7ParserRuleCall_5_2() { return cPrimaryExpr7ParserRuleCall_5_2; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_5_3() { return cPrimaryExprLinhaParserRuleCall_5_3; }
		
		//PointerType PrimaryExpr1 PrimaryExprLinha
		public Group getGroup_6() { return cGroup_6; }
		
		//PointerType
		public RuleCall getPointerTypeParserRuleCall_6_0() { return cPointerTypeParserRuleCall_6_0; }
		
		//PrimaryExpr1
		public RuleCall getPrimaryExpr1ParserRuleCall_6_1() { return cPrimaryExpr1ParserRuleCall_6_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_6_2() { return cPrimaryExprLinhaParserRuleCall_6_2; }
		
		//InterfaceType PrimaryExpr1 PrimaryExprLinha
		public Group getGroup_7() { return cGroup_7; }
		
		//InterfaceType
		public RuleCall getInterfaceTypeParserRuleCall_7_0() { return cInterfaceTypeParserRuleCall_7_0; }
		
		//PrimaryExpr1
		public RuleCall getPrimaryExpr1ParserRuleCall_7_1() { return cPrimaryExpr1ParserRuleCall_7_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_7_2() { return cPrimaryExprLinhaParserRuleCall_7_2; }
		
		//ChannelType PrimaryExpr1 PrimaryExprLinha
		public Group getGroup_8() { return cGroup_8; }
		
		//ChannelType
		public RuleCall getChannelTypeParserRuleCall_8_0() { return cChannelTypeParserRuleCall_8_0; }
		
		//PrimaryExpr1
		public RuleCall getPrimaryExpr1ParserRuleCall_8_1() { return cPrimaryExpr1ParserRuleCall_8_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_8_2() { return cPrimaryExprLinhaParserRuleCall_8_2; }
		
		//"(" PrimaryExpr3 PrimaryExprLinha
		public Group getGroup_9() { return cGroup_9; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }
		
		//PrimaryExpr3
		public RuleCall getPrimaryExpr3ParserRuleCall_9_1() { return cPrimaryExpr3ParserRuleCall_9_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_9_2() { return cPrimaryExprLinhaParserRuleCall_9_2; }
	}
	public class PrimaryExpr1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cMethodNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PrimaryExpr1:
		//	"(" Expression ","? ")" | "." MethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Expression ","? ")" | "." MethodName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Expression ","? ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//","?
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//"." MethodName
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_1_1() { return cMethodNameParserRuleCall_1_1; }
	}
	public class PrimaryExpr2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpr1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpr2:
		//	PrimaryExpr1 | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr1 | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpr1
		public RuleCall getPrimaryExpr1ParserRuleCall_0() { return cPrimaryExpr1ParserRuleCall_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class PrimaryExpr3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExpr1ParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//PrimaryExpr3:
		//	=> Expression ")" | Type ")" PrimaryExpr1;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Expression ")" | Type ")" PrimaryExpr1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> Expression ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//=> Expression
		public RuleCall getExpressionParserRuleCall_0_0() { return cExpressionParserRuleCall_0_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_1() { return cRightParenthesisKeyword_0_1; }
		
		//Type ")" PrimaryExpr1
		public Group getGroup_1() { return cGroup_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
		
		//PrimaryExpr1
		public RuleCall getPrimaryExpr1ParserRuleCall_1_2() { return cPrimaryExpr1ParserRuleCall_1_2; }
	}
	public class PrimaryExpr4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExpr1ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpr4:
		//	LiteralValue | PrimaryExpr1;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralValue | PrimaryExpr1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_0() { return cLiteralValueParserRuleCall_0; }
		
		//PrimaryExpr1
		public RuleCall getPrimaryExpr1ParserRuleCall_1() { return cPrimaryExpr1ParserRuleCall_1; }
	}
	public class PrimaryExpr5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr5");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExpr2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpr5:
		//	LiteralValue | PrimaryExpr2;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralValue | PrimaryExpr2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_0() { return cLiteralValueParserRuleCall_0; }
		
		//PrimaryExpr2
		public RuleCall getPrimaryExpr2ParserRuleCall_1() { return cPrimaryExpr2ParserRuleCall_1; }
	}
	public class PrimaryExpr6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr6");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cPrimaryExpr4ParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cLiteralValueParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cElementTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryExpr4ParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//PrimaryExpr6:
		//	ArrayLength "]" ElementType PrimaryExpr4 |
		//	"..." "]" ElementType LiteralValue |
		//	"]" ElementType PrimaryExpr4
		//	/ *(ArrayLength "]" ElementType | "..." "]" ElementType | "]" ElementType) LiteralValue | 
		//	(ArrayLength "]" ElementType | "]" ElementType) PrimaryExpr1* /;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayLength "]" ElementType PrimaryExpr4 | "..." "]" ElementType LiteralValue | "]" ElementType PrimaryExpr4
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayLength "]" ElementType PrimaryExpr4
		public Group getGroup_0() { return cGroup_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_0_0() { return cArrayLengthParserRuleCall_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_0_2() { return cElementTypeParserRuleCall_0_2; }
		
		//PrimaryExpr4
		public RuleCall getPrimaryExpr4ParserRuleCall_0_3() { return cPrimaryExpr4ParserRuleCall_0_3; }
		
		//"..." "]" ElementType LiteralValue
		public Group getGroup_1() { return cGroup_1; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_0() { return cFullStopFullStopFullStopKeyword_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_1_2() { return cElementTypeParserRuleCall_1_2; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1_3() { return cLiteralValueParserRuleCall_1_3; }
		
		//"]" ElementType PrimaryExpr4
		public Group getGroup_2() { return cGroup_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_0() { return cRightSquareBracketKeyword_2_0; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_2_1() { return cElementTypeParserRuleCall_2_1; }
		
		//PrimaryExpr4
		public RuleCall getPrimaryExpr4ParserRuleCall_2_2() { return cPrimaryExpr4ParserRuleCall_2_2; }
	}
	public class PrimaryExpr7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr7");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExpr1ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpr7:
		//	FunctionBody | PrimaryExpr1;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionBody | PrimaryExpr1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_0() { return cFunctionBodyParserRuleCall_0; }
		
		//PrimaryExpr1
		public RuleCall getPrimaryExpr1ParserRuleCall_1() { return cPrimaryExpr1ParserRuleCall_1; }
	}
	public class PrimaryExprLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryExprLinha1ParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPrimaryExprLinha2ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cArgumentsParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cPrimaryExprLinhaParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//PrimaryExprLinha:
		//	"." PrimaryExprLinha1 PrimaryExprLinha |
		//	"[" PrimaryExprLinha2 PrimaryExprLinha | Arguments PrimaryExprLinha
		//	/ *"." IDENTIFIER PrimaryExprLinha| "[" Expression "]" PrimaryExprLinha| 
		//	 * ("[" ( Expression )? ":" ( Expression )? "]" | "[" ( Expression )? ":" Expression ":" Expression "]" ) PrimaryExprLinha| 
		//	"." "(" Type ")"  PrimaryExprLinha| 
		//	* "(" ( ( ExpressionList | Type ( "," ExpressionList )? ) ( "..." )? ( "," )? )? ")"  PrimaryExprLinha* /;
		@Override public ParserRule getRule() { return rule; }
		
		//"." PrimaryExprLinha1 PrimaryExprLinha | "[" PrimaryExprLinha2 PrimaryExprLinha | Arguments PrimaryExprLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." PrimaryExprLinha1 PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//PrimaryExprLinha1
		public RuleCall getPrimaryExprLinha1ParserRuleCall_0_1() { return cPrimaryExprLinha1ParserRuleCall_0_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_0_2() { return cPrimaryExprLinhaParserRuleCall_0_2; }
		
		//"[" PrimaryExprLinha2 PrimaryExprLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//PrimaryExprLinha2
		public RuleCall getPrimaryExprLinha2ParserRuleCall_1_1() { return cPrimaryExprLinha2ParserRuleCall_1_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_1_2() { return cPrimaryExprLinhaParserRuleCall_1_2; }
		
		//Arguments PrimaryExprLinha
		public Group getGroup_2() { return cGroup_2; }
		
		//Arguments
		public RuleCall getArgumentsParserRuleCall_2_0() { return cArgumentsParserRuleCall_2_0; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaParserRuleCall_2_1() { return cPrimaryExprLinhaParserRuleCall_2_1; }
	}
	public class PrimaryExprLinha1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExprLinha1:
		//	IDENTIFIER | "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | "(" Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//"(" Type ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class PrimaryExprLinha2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryExprLinha21ParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPrimaryExprLinha22ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PrimaryExprLinha2:
		//	Expression PrimaryExprLinha21 | ":" PrimaryExprLinha22
		//	/ *Expression "]" | 
		//	( Expression ) ":" ( Expression ) "]" |
		//	":" ( Expression ) "]" |
		//	( Expression ) ":" "]" |
		//	 ":"  "]" |
		//	 ( Expression ) ":" Expression ":" Expression "]"|
		//	 ":" Expression ":" Expression "]"* /;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression PrimaryExprLinha21 | ":" PrimaryExprLinha22
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression PrimaryExprLinha21
		public Group getGroup_0() { return cGroup_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_0() { return cExpressionParserRuleCall_0_0; }
		
		//PrimaryExprLinha21
		public RuleCall getPrimaryExprLinha21ParserRuleCall_0_1() { return cPrimaryExprLinha21ParserRuleCall_0_1; }
		
		//":" PrimaryExprLinha22
		public Group getGroup_1() { return cGroup_1; }
		
		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//PrimaryExprLinha22
		public RuleCall getPrimaryExprLinha22ParserRuleCall_1_1() { return cPrimaryExprLinha22ParserRuleCall_1_1; }
	}
	public class PrimaryExprLinha21Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha21");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPrimaryExprLinha211ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PrimaryExprLinha21:
		//	"]" | ":" PrimaryExprLinha211;
		@Override public ParserRule getRule() { return rule; }
		
		//"]" | ":" PrimaryExprLinha211
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0() { return cRightSquareBracketKeyword_0; }
		
		//":" PrimaryExprLinha211
		public Group getGroup_1() { return cGroup_1; }
		
		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//PrimaryExprLinha211
		public RuleCall getPrimaryExprLinha211ParserRuleCall_1_1() { return cPrimaryExprLinha211ParserRuleCall_1_1; }
	}
	public class PrimaryExprLinha211Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha211");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryExprLinha2111ParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PrimaryExprLinha211:
		//	Expression PrimaryExprLinha2111 | "]";
		@Override public ParserRule getRule() { return rule; }
		
		//Expression PrimaryExprLinha2111 | "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression PrimaryExprLinha2111
		public Group getGroup_0() { return cGroup_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_0() { return cExpressionParserRuleCall_0_0; }
		
		//PrimaryExprLinha2111
		public RuleCall getPrimaryExprLinha2111ParserRuleCall_0_1() { return cPrimaryExprLinha2111ParserRuleCall_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
	}
	public class PrimaryExprLinha2111Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha2111");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExprLinha2111:
		//	"]" | ":" Expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"]" | ":" Expression "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0() { return cRightSquareBracketKeyword_0; }
		
		//":" Expression "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class PrimaryExprLinha22Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha22");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryExprLinha221ParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PrimaryExprLinha22:
		//	Expression PrimaryExprLinha221 | "]";
		@Override public ParserRule getRule() { return rule; }
		
		//Expression PrimaryExprLinha221 | "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression PrimaryExprLinha221
		public Group getGroup_0() { return cGroup_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_0() { return cExpressionParserRuleCall_0_0; }
		
		//PrimaryExprLinha221
		public RuleCall getPrimaryExprLinha221ParserRuleCall_0_1() { return cPrimaryExprLinha221ParserRuleCall_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
	}
	public class PrimaryExprLinha221Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha221");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExprLinha221:
		//	"]" | ":" Expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"]" | ":" Expression "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0() { return cRightSquareBracketKeyword_0; }
		
		//":" Expression "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Selector:
		//	"." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Index:
		//	"[" Expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" Expression "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Slice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final RuleCall cExpressionParserRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Keyword cRightSquareBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//Slice:
		//	"[" Expression? ":" Expression? "]" |
		//	"[" Expression? ":" Expression ":" Expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" Expression? ":" Expression? "]" | "[" Expression? ":" Expression ":" Expression "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" Expression? ":" Expression? "]"
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//Expression?
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//Expression?
		public RuleCall getExpressionParserRuleCall_0_3() { return cExpressionParserRuleCall_0_3; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//"[" Expression? ":" Expression ":" Expression "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//Expression?
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_3() { return cExpressionParserRuleCall_1_3; }
		
		//":"
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_5() { return cExpressionParserRuleCall_1_5; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_6() { return cRightSquareBracketKeyword_1_6; }
	}
	public class TypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeAssertion:
		//	"." "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"." "(" Type ")"
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_1_1_1 = (RuleCall)cGroup_1_0_1_1.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Arguments:
		//	"(" ((=> ExpressionList | Type ("," ExpressionList)?) "..."? ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" ((=> ExpressionList | Type ("," ExpressionList)?) "..."? ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//((=> ExpressionList | Type ("," ExpressionList)?) "..."? ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(=> ExpressionList | Type ("," ExpressionList)?)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//=> ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_0_0() { return cExpressionListParserRuleCall_1_0_0; }
		
		//Type ("," ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0_1_0() { return cTypeParserRuleCall_1_0_1_0; }
		
		//("," ExpressionList)?
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_0_1_1_1() { return cExpressionListParserRuleCall_1_0_1_1_1; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
		
		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MethodExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReceiverTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cMethodNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MethodExpr:
		//	ReceiverType "." MethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//ReceiverType "." MethodName
		public Group getGroup() { return cGroup; }
		
		//ReceiverType
		public RuleCall getReceiverTypeParserRuleCall_0() { return cReceiverTypeParserRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_2() { return cMethodNameParserRuleCall_2; }
	}
	public class ReceiverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReceiverType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ReceiverType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpression_LinhaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Expression:
		//	UnaryExpr Expression_Linha;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr Expression_Linha
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//Expression_Linha
		public RuleCall getExpression_LinhaParserRuleCall_1() { return cExpression_LinhaParserRuleCall_1; }
	}
	public class Expression_LinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression_Linha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cBINARY_OPParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExpression_LinhaParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression_Linha:
		//	BINARY_OP Expression Expression_Linha | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//BINARY_OP Expression Expression_Linha | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BINARY_OP Expression Expression_Linha
		public Group getGroup_0() { return cGroup_0; }
		
		//BINARY_OP
		public RuleCall getBINARY_OPParserRuleCall_0_0() { return cBINARY_OPParserRuleCall_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//Expression_Linha
		public RuleCall getExpression_LinhaParserRuleCall_0_2() { return cExpression_LinhaParserRuleCall_0_2; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUNARY_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//UnaryExpr:
		//	PrimaryExpr | UNARY_OP UnaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr | UNARY_OP UnaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0() { return cPrimaryExprParserRuleCall_0; }
		
		//UNARY_OP UnaryExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//UNARY_OP
		public RuleCall getUNARY_OPTerminalRuleCall_1_0() { return cUNARY_OPTerminalRuleCall_1_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_1_1() { return cUnaryExprParserRuleCall_1_1; }
	}
	public class BINARY_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BINARY_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cREL_OPTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cADD_OPTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMUL_OPTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BINARY_OP:
		//	"||" | "&&" | REL_OP | ADD_OP | MUL_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//"||" | "&&" | REL_OP | ADD_OP | MUL_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
		
		//REL_OP
		public RuleCall getREL_OPTerminalRuleCall_2() { return cREL_OPTerminalRuleCall_2; }
		
		//ADD_OP
		public RuleCall getADD_OPTerminalRuleCall_3() { return cADD_OPTerminalRuleCall_3; }
		
		//MUL_OP
		public RuleCall getMUL_OPTerminalRuleCall_4() { return cMUL_OPTerminalRuleCall_4; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conversion:
		//	Type "(" Expression ","? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Type "(" Expression ","? ")"
		public Group getGroup() { return cGroup; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabeledStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGoStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReturnStmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBreakStmtParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cContinueStmtParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGotoStmtParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFallthroughStmtParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBlockParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIfStmtParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSwitchStmtParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSelectStmtParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cForStmtParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDeferStmtParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//Statement:
		//	Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt
		//	| Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt |
		//Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//LabeledStmt
		public RuleCall getLabeledStmtParserRuleCall_1() { return cLabeledStmtParserRuleCall_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_2() { return cSimpleStmtParserRuleCall_2; }
		
		//GoStmt
		public RuleCall getGoStmtParserRuleCall_3() { return cGoStmtParserRuleCall_3; }
		
		//ReturnStmt
		public RuleCall getReturnStmtParserRuleCall_4() { return cReturnStmtParserRuleCall_4; }
		
		//BreakStmt
		public RuleCall getBreakStmtParserRuleCall_5() { return cBreakStmtParserRuleCall_5; }
		
		//ContinueStmt
		public RuleCall getContinueStmtParserRuleCall_6() { return cContinueStmtParserRuleCall_6; }
		
		//GotoStmt
		public RuleCall getGotoStmtParserRuleCall_7() { return cGotoStmtParserRuleCall_7; }
		
		//FallthroughStmt
		public RuleCall getFallthroughStmtParserRuleCall_8() { return cFallthroughStmtParserRuleCall_8; }
		
		//Block
		public RuleCall getBlockParserRuleCall_9() { return cBlockParserRuleCall_9; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_10() { return cIfStmtParserRuleCall_10; }
		
		//SwitchStmt
		public RuleCall getSwitchStmtParserRuleCall_11() { return cSwitchStmtParserRuleCall_11; }
		
		//SelectStmt
		public RuleCall getSelectStmtParserRuleCall_12() { return cSelectStmtParserRuleCall_12; }
		
		//ForStmt
		public RuleCall getForStmtParserRuleCall_13() { return cForStmtParserRuleCall_13; }
		
		//DeferStmt
		public RuleCall getDeferStmtParserRuleCall_14() { return cDeferStmtParserRuleCall_14; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSimpleStmtLinhaParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cShortVarDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleStmt:
		//	EmptyStmt | Expression SimpleStmtLinha | ShortVarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyStmt | Expression SimpleStmtLinha | ShortVarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtParserRuleCall_0() { return cEmptyStmtParserRuleCall_0; }
		
		//Expression SimpleStmtLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }
		
		//SimpleStmtLinha
		public RuleCall getSimpleStmtLinhaParserRuleCall_1_1() { return cSimpleStmtLinhaParserRuleCall_1_1; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_2() { return cShortVarDeclParserRuleCall_2; }
	}
	public class SimpleStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final RuleCall cAssign_opParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cANY_OTHERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleStmtLinha:
		//	"<-" Expression | ("++" | "--") | ("," Expression)* assign_op ExpressionList | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" Expression | ("++" | "--") | ("," Expression)* assign_op ExpressionList | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-" Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_0() { return cLessThanSignHyphenMinusKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//("++" | "--")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
		
		//("," Expression)* assign_op ExpressionList
		public Group getGroup_2() { return cGroup_2; }
		
		//("," Expression)*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//","
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_0_1() { return cExpressionParserRuleCall_2_0_1; }
		
		//assign_op
		public RuleCall getAssign_opParserRuleCall_2_1() { return cAssign_opParserRuleCall_2_1; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_2_2() { return cExpressionListParserRuleCall_2_2; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_3() { return cANY_OTHERTerminalRuleCall_3; }
	}
	public class EmptyStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EmptyStmt");
		private final RuleCall cANY_OTHERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EmptyStmt:
		//	ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall() { return cANY_OTHERTerminalRuleCall; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LabeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//LabeledStmt:
		//	Label ":" Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//Label ":" Statement
		public Group getGroup() { return cGroup; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_2() { return cStatementParserRuleCall_2; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Label");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Label:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class Assign_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assign_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cADD_OPTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMUL_OPTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// *ExpressionStmt: 
		//	Expression
		//;
		//
		//SendStmt:
		//	Channel "<-" Expression
		//;
		//
		//Channel:
		//	Expression
		//;
		//
		//IncDecStmt:
		//	Expression ( "++" | "--" )
		//;
		//
		//Assignment: 
		//	ExpressionList assign_op ExpressionList
		//;* / assign_op:
		//	(ADD_OP | MUL_OP)? "=";
		@Override public ParserRule getRule() { return rule; }
		
		//(ADD_OP | MUL_OP)? "="
		public Group getGroup() { return cGroup; }
		
		//(ADD_OP | MUL_OP)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ADD_OP
		public RuleCall getADD_OPTerminalRuleCall_0_0() { return cADD_OPTerminalRuleCall_0_0; }
		
		//MUL_OP
		public RuleCall getMUL_OPTerminalRuleCall_0_1() { return cMUL_OPTerminalRuleCall_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIFTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIfStmtLinhaParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIFTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cEmptyStmtParserRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cShortVarDeclParserRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final RuleCall cELSETerminalRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final Alternatives cAlternatives_1_4_1 = (Alternatives)cGroup_1_4.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_1_4_1_0 = (RuleCall)cAlternatives_1_4_1.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1_4_1_1 = (RuleCall)cAlternatives_1_4_1.eContents().get(1);
		
		//IfStmt:
		//	IF Expression IfStmtLinha | IF ((EmptyStmt | ShortVarDecl) ";") Expression Block (ELSE (IfStmt | Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//IF Expression IfStmtLinha | IF ((EmptyStmt | ShortVarDecl) ";") Expression Block (ELSE (IfStmt | Block))?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IF Expression IfStmtLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_0_0() { return cIFTerminalRuleCall_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//IfStmtLinha
		public RuleCall getIfStmtLinhaParserRuleCall_0_2() { return cIfStmtLinhaParserRuleCall_0_2; }
		
		//IF ((EmptyStmt | ShortVarDecl) ";") Expression Block (ELSE (IfStmt | Block))?
		public Group getGroup_1() { return cGroup_1; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_1_0() { return cIFTerminalRuleCall_1_0; }
		
		//((EmptyStmt | ShortVarDecl) ";")
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(EmptyStmt | ShortVarDecl)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtParserRuleCall_1_1_0_0() { return cEmptyStmtParserRuleCall_1_1_0_0; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_1_1_0_1() { return cShortVarDeclParserRuleCall_1_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_2() { return cExpressionParserRuleCall_1_2; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1_3() { return cBlockParserRuleCall_1_3; }
		
		//(ELSE (IfStmt | Block))?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_1_4_0() { return cELSETerminalRuleCall_1_4_0; }
		
		//(IfStmt | Block)
		public Alternatives getAlternatives_1_4_1() { return cAlternatives_1_4_1; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_1_4_1_0() { return cIfStmtParserRuleCall_1_4_1_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1_4_1_1() { return cBlockParserRuleCall_1_4_1_1; }
	}
	public class IfStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleStmtLinhaParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final RuleCall cELSETerminalRuleCall_0_4_0 = (RuleCall)cGroup_0_4.eContents().get(0);
		private final Alternatives cAlternatives_0_4_1 = (Alternatives)cGroup_0_4.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_0_4_1_0 = (RuleCall)cAlternatives_0_4_1.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_0_4_1_1 = (RuleCall)cAlternatives_0_4_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cELSETerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//IfStmtLinha:
		//	SimpleStmtLinha ";" Expression Block (ELSE (IfStmt | Block))? | Block (ELSE (IfStmt | Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmtLinha ";" Expression Block (ELSE (IfStmt | Block))? | Block (ELSE (IfStmt | Block))?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleStmtLinha ";" Expression Block (ELSE (IfStmt | Block))?
		public Group getGroup_0() { return cGroup_0; }
		
		//SimpleStmtLinha
		public RuleCall getSimpleStmtLinhaParserRuleCall_0_0() { return cSimpleStmtLinhaParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_2() { return cExpressionParserRuleCall_0_2; }
		
		//Block
		public RuleCall getBlockParserRuleCall_0_3() { return cBlockParserRuleCall_0_3; }
		
		//(ELSE (IfStmt | Block))?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_0_4_0() { return cELSETerminalRuleCall_0_4_0; }
		
		//(IfStmt | Block)
		public Alternatives getAlternatives_0_4_1() { return cAlternatives_0_4_1; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_0_4_1_0() { return cIfStmtParserRuleCall_0_4_1_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_0_4_1_1() { return cBlockParserRuleCall_0_4_1_1; }
		
		//Block (ELSE (IfStmt | Block))?
		public Group getGroup_1() { return cGroup_1; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1_0() { return cBlockParserRuleCall_1_0; }
		
		//(ELSE (IfStmt | Block))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_1_1_0() { return cELSETerminalRuleCall_1_1_0; }
		
		//(IfStmt | Block)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_1_1_1_0() { return cIfStmtParserRuleCall_1_1_1_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1_1_1_1() { return cBlockParserRuleCall_1_1_1_1; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSWITCHTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cSwitchStmtLinhaParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SwitchStmt:
		//	SWITCH (=> SimpleStmt ";")? SwitchStmtLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//SWITCH (=> SimpleStmt ";")? SwitchStmtLinha
		public Group getGroup() { return cGroup; }
		
		//SWITCH
		public RuleCall getSWITCHTerminalRuleCall_0() { return cSWITCHTerminalRuleCall_0; }
		
		//(=> SimpleStmt ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//SwitchStmtLinha
		public RuleCall getSwitchStmtLinhaParserRuleCall_2() { return cSwitchStmtLinhaParserRuleCall_2; }
	}
	public class SwitchStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SwitchStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExprParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSwitchStmtLinhaLinhaParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final RuleCall cUNARY_OPTerminalRuleCall_1_0_0_0 = (RuleCall)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cUnaryExprParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cExpression_LinhaParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExprCaseClauseParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cTYPEKEYWORDTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final RuleCall cTypeCaseClauseParserRuleCall_2_7 = (RuleCall)cGroup_2.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		
		//SwitchStmtLinha:
		//	PrimaryExpr SwitchStmtLinhaLinha | ((UNARY_OP UnaryExpr) Expression_Linha)? "{" ExprCaseClause* "}" | (IDENTIFIER
		//	":=") PrimaryExpr "." "(" TYPEKEYWORD ")" "{" TypeCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr SwitchStmtLinhaLinha | ((UNARY_OP UnaryExpr) Expression_Linha)? "{" ExprCaseClause* "}" | (IDENTIFIER ":=")
		//PrimaryExpr "." "(" TYPEKEYWORD ")" "{" TypeCaseClause* "}"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpr SwitchStmtLinhaLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0_0() { return cPrimaryExprParserRuleCall_0_0; }
		
		//SwitchStmtLinhaLinha
		public RuleCall getSwitchStmtLinhaLinhaParserRuleCall_0_1() { return cSwitchStmtLinhaLinhaParserRuleCall_0_1; }
		
		//((UNARY_OP UnaryExpr) Expression_Linha)? "{" ExprCaseClause* "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//((UNARY_OP UnaryExpr) Expression_Linha)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(UNARY_OP UnaryExpr)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//UNARY_OP
		public RuleCall getUNARY_OPTerminalRuleCall_1_0_0_0() { return cUNARY_OPTerminalRuleCall_1_0_0_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_1_0_0_1() { return cUnaryExprParserRuleCall_1_0_0_1; }
		
		//Expression_Linha
		public RuleCall getExpression_LinhaParserRuleCall_1_0_1() { return cExpression_LinhaParserRuleCall_1_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//ExprCaseClause*
		public RuleCall getExprCaseClauseParserRuleCall_1_2() { return cExprCaseClauseParserRuleCall_1_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//(IDENTIFIER ":=") PrimaryExpr "." "(" TYPEKEYWORD ")" "{" TypeCaseClause* "}"
		public Group getGroup_2() { return cGroup_2; }
		
		//(IDENTIFIER ":=")
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2_0_0() { return cIDENTIFIERTerminalRuleCall_2_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2_0_1() { return cColonEqualsSignKeyword_2_0_1; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_2_1() { return cPrimaryExprParserRuleCall_2_1; }
		
		//"."
		public Keyword getFullStopKeyword_2_2() { return cFullStopKeyword_2_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }
		
		//TYPEKEYWORD
		public RuleCall getTYPEKEYWORDTerminalRuleCall_2_4() { return cTYPEKEYWORDTerminalRuleCall_2_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_6() { return cLeftCurlyBracketKeyword_2_6; }
		
		//TypeCaseClause*
		public RuleCall getTypeCaseClauseParserRuleCall_2_7() { return cTypeCaseClauseParserRuleCall_2_7; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_8() { return cRightCurlyBracketKeyword_2_8; }
	}
	public class SwitchStmtLinhaLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SwitchStmtLinhaLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExprCaseClauseParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cTYPEKEYWORDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final RuleCall cTypeCaseClauseParserRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//SwitchStmtLinhaLinha:
		//	"{" ExprCaseClause* "}" | "." "(" TYPEKEYWORD ")" "{" TypeCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" ExprCaseClause* "}" | "." "(" TYPEKEYWORD ")" "{" TypeCaseClause* "}"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"{" ExprCaseClause* "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//ExprCaseClause*
		public RuleCall getExprCaseClauseParserRuleCall_0_1() { return cExprCaseClauseParserRuleCall_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//"." "(" TYPEKEYWORD ")" "{" TypeCaseClause* "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//TYPEKEYWORD
		public RuleCall getTYPEKEYWORDTerminalRuleCall_1_2() { return cTYPEKEYWORDTerminalRuleCall_1_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//TypeCaseClause*
		public RuleCall getTypeCaseClauseParserRuleCall_1_5() { return cTypeCaseClauseParserRuleCall_1_5; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}
	public class ExprCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/// *ExprSwitchStmt:
		//	SWITCH (SimpleStmt ";")? (Expression)? "{" ( ExprCaseClause )* "}"
		//;* / ExprCaseClause:
		//	ExprSwitchCase ":" StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSwitchCase ":" StatementList
		public Group getGroup() { return cGroup; }
		
		//ExprSwitchCase
		public RuleCall getExprSwitchCaseParserRuleCall_0() { return cExprSwitchCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class ExprSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCASETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cDEFAULTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprSwitchCase:
		//	CASE ExpressionList | DEFAULT;
		@Override public ParserRule getRule() { return rule; }
		
		//CASE ExpressionList | DEFAULT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CASE ExpressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//CASE
		public RuleCall getCASETerminalRuleCall_0_0() { return cCASETerminalRuleCall_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_1() { return cExpressionListParserRuleCall_0_1; }
		
		//DEFAULT
		public RuleCall getDEFAULTTerminalRuleCall_1() { return cDEFAULTTerminalRuleCall_1; }
	}
	public class TypeCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/// *TypeSwitchStmt:
		//	SWITCH (SimpleStmt ";")? TypeSwitchGuard "{" (TypeCaseClause)* "}"	
		//;* / / *TypeSwitchGuard:
		//	(IDENTIFIER ":=")? PrimaryExpr "." "(" TYPEKEYWORD ")"
		//;* / TypeCaseClause:
		//	TypeSwitchCase ":" StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSwitchCase ":" StatementList
		public Group getGroup() { return cGroup; }
		
		//TypeSwitchCase
		public RuleCall getTypeSwitchCaseParserRuleCall_0() { return cTypeSwitchCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class TypeSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCASETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cTypeListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cDEFAULTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSwitchCase:
		//	CASE TypeList | DEFAULT;
		@Override public ParserRule getRule() { return rule; }
		
		//CASE TypeList | DEFAULT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CASE TypeList
		public Group getGroup_0() { return cGroup_0; }
		
		//CASE
		public RuleCall getCASETerminalRuleCall_0_0() { return cCASETerminalRuleCall_0_0; }
		
		//TypeList
		public RuleCall getTypeListParserRuleCall_0_1() { return cTypeListParserRuleCall_0_1; }
		
		//DEFAULT
		public RuleCall getDEFAULTTerminalRuleCall_1() { return cDEFAULTTerminalRuleCall_1; }
	}
	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TypeList:
		//	Type ("," Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Type ("," Type)*
		public Group getGroup() { return cGroup; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//("," Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFORTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cForStmtLinhaParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cEmptyStmtParserRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cShortVarDeclParserRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final RuleCall cPostStmtParserRuleCall_1_1_4 = (RuleCall)cGroup_1_1.eContents().get(4);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cIdentifierListParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cRANGETerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_1_2_3 = (RuleCall)cGroup_1_2.eContents().get(3);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ForStmt:
		//	FOR (Expression ForStmtLinha | (EmptyStmt | ShortVarDecl) ";" Condition ";" PostStmt | IdentifierList ":=" RANGE
		//	Expression)? Block;
		@Override public ParserRule getRule() { return rule; }
		
		//FOR (Expression ForStmtLinha | (EmptyStmt | ShortVarDecl) ";" Condition ";" PostStmt | IdentifierList ":=" RANGE
		//Expression)? Block
		public Group getGroup() { return cGroup; }
		
		//FOR
		public RuleCall getFORTerminalRuleCall_0() { return cFORTerminalRuleCall_0; }
		
		//(Expression ForStmtLinha | (EmptyStmt | ShortVarDecl) ";" Condition ";" PostStmt | IdentifierList ":=" RANGE
		//Expression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Expression ForStmtLinha
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0_0() { return cExpressionParserRuleCall_1_0_0; }
		
		//ForStmtLinha
		public RuleCall getForStmtLinhaParserRuleCall_1_0_1() { return cForStmtLinhaParserRuleCall_1_0_1; }
		
		//(EmptyStmt | ShortVarDecl) ";" Condition ";" PostStmt
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(EmptyStmt | ShortVarDecl)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtParserRuleCall_1_1_0_0() { return cEmptyStmtParserRuleCall_1_1_0_0; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_1_1_0_1() { return cShortVarDeclParserRuleCall_1_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1_1_2() { return cConditionParserRuleCall_1_1_2; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
		
		//PostStmt
		public RuleCall getPostStmtParserRuleCall_1_1_4() { return cPostStmtParserRuleCall_1_1_4; }
		
		//IdentifierList ":=" RANGE Expression
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_1_2_0() { return cIdentifierListParserRuleCall_1_2_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_2_1() { return cColonEqualsSignKeyword_1_2_1; }
		
		//RANGE
		public RuleCall getRANGETerminalRuleCall_1_2_2() { return cRANGETerminalRuleCall_1_2_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_2_3() { return cExpressionParserRuleCall_1_2_3; }
		
		//Block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }
	}
	public class ForStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cForStmtLinhaLinhaParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_0_0_1 = (RuleCall)cGroup_2_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cAlternatives_2_0.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_2_0_1_0 = (Keyword)cAlternatives_2_0_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_0_1_1 = (Keyword)cAlternatives_2_0_1.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_2_0_2 = (RuleCall)cAlternatives_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cPostStmtParserRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		
		//ForStmtLinha:
		//	ANY_OTHER | ("," Expression)* ForStmtLinhaLinha | ("<-" Expression | ("++" | "--") | ANY_OTHER) ";" Condition ";"
		//	PostStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//ANY_OTHER | ("," Expression)* ForStmtLinhaLinha | ("<-" Expression | ("++" | "--") | ANY_OTHER) ";" Condition ";"
		//PostStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_0() { return cANY_OTHERTerminalRuleCall_0; }
		
		//("," Expression)* ForStmtLinhaLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//("," Expression)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0_1() { return cExpressionParserRuleCall_1_0_1; }
		
		//ForStmtLinhaLinha
		public RuleCall getForStmtLinhaLinhaParserRuleCall_1_1() { return cForStmtLinhaLinhaParserRuleCall_1_1; }
		
		//("<-" Expression | ("++" | "--") | ANY_OTHER) ";" Condition ";" PostStmt
		public Group getGroup_2() { return cGroup_2; }
		
		//("<-" Expression | ("++" | "--") | ANY_OTHER)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//"<-" Expression
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_2_0_0_0() { return cLessThanSignHyphenMinusKeyword_2_0_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_0_0_1() { return cExpressionParserRuleCall_2_0_0_1; }
		
		//("++" | "--")
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_0_1_0() { return cPlusSignPlusSignKeyword_2_0_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_0_1_1() { return cHyphenMinusHyphenMinusKeyword_2_0_1_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2_0_2() { return cANY_OTHERTerminalRuleCall_2_0_2; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_2_2() { return cConditionParserRuleCall_2_2; }
		
		//";"
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
		
		//PostStmt
		public RuleCall getPostStmtParserRuleCall_2_4() { return cPostStmtParserRuleCall_2_4; }
	}
	public class ForStmtLinhaLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForStmtLinhaLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAssign_opParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cConditionParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cPostStmtParserRuleCall_0_5 = (RuleCall)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRANGETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ForStmtLinhaLinha:
		//	assign_op ExpressionList ";" Condition ";" PostStmt | "=" RANGE Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//assign_op ExpressionList ";" Condition ";" PostStmt | "=" RANGE Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//assign_op ExpressionList ";" Condition ";" PostStmt
		public Group getGroup_0() { return cGroup_0; }
		
		//assign_op
		public RuleCall getAssign_opParserRuleCall_0_0() { return cAssign_opParserRuleCall_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_1() { return cExpressionListParserRuleCall_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_0_3() { return cConditionParserRuleCall_0_3; }
		
		//";"
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//PostStmt
		public RuleCall getPostStmtParserRuleCall_0_5() { return cPostStmtParserRuleCall_0_5; }
		
		//"=" RANGE Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//RANGE
		public RuleCall getRANGETerminalRuleCall_1_1() { return cRANGETerminalRuleCall_1_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_2() { return cExpressionParserRuleCall_1_2; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class PostStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PostStmt");
		private final RuleCall cSimpleStmtParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *ForClause:
		//	( InitStmt ) ";" ( Condition ) ";" ( PostStmt )
		//;* / PostStmt:
		//	SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall() { return cSimpleStmtParserRuleCall; }
	}
	public class GoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGOTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// *InitStmt:
		//	SimpleStmt
		//;* / / *RangeClause:
		//	( ExpressionList "=" | IdentifierList ":=" ) RANGE Expression
		//;* / GoStmt:
		//	GO Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//GO Expression
		public Group getGroup() { return cGroup; }
		
		//GO
		public RuleCall getGOTerminalRuleCall_0() { return cGOTerminalRuleCall_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SelectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSELECTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCommClauseParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectStmt:
		//	SELECT "{" CommClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//SELECT "{" CommClause* "}"
		public Group getGroup() { return cGroup; }
		
		//SELECT
		public RuleCall getSELECTTerminalRuleCall_0() { return cSELECTTerminalRuleCall_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//CommClause*
		public RuleCall getCommClauseParserRuleCall_2() { return cCommClauseParserRuleCall_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CommClause:
		//	CommCase ":" StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//CommCase ":" StatementList
		public Group getGroup() { return cGroup; }
		
		//CommCase
		public RuleCall getCommCaseParserRuleCall_0() { return cCommCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCASETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cCommCaseLinhaParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cDEFAULTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CommCase:
		//	CASE (Expression CommCaseLinha) | DEFAULT;
		@Override public ParserRule getRule() { return rule; }
		
		//CASE (Expression CommCaseLinha) | DEFAULT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CASE (Expression CommCaseLinha)
		public Group getGroup_0() { return cGroup_0; }
		
		//CASE
		public RuleCall getCASETerminalRuleCall_0_0() { return cCASETerminalRuleCall_0_0; }
		
		//(Expression CommCaseLinha)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1_0() { return cExpressionParserRuleCall_0_1_0; }
		
		//CommCaseLinha
		public RuleCall getCommCaseLinhaParserRuleCall_0_1_1() { return cCommCaseLinhaParserRuleCall_0_1_1; }
		
		//DEFAULT
		public RuleCall getDEFAULTTerminalRuleCall_1() { return cDEFAULTTerminalRuleCall_1; }
	}
	public class CommCaseLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommCaseLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0_0_0 = (Keyword)cGroup_1_0_0_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_0_0_0_1 = (RuleCall)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cRecvExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CommCaseLinha:
		//	"<-" Expression | (("," Expression)* "=" | IdentifierList ":=") RecvExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" Expression | (("," Expression)* "=" | IdentifierList ":=") RecvExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-" Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_0() { return cLessThanSignHyphenMinusKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//(("," Expression)* "=" | IdentifierList ":=") RecvExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//(("," Expression)* "=" | IdentifierList ":=")
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//("," Expression)* "="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//("," Expression)*
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//","
		public Keyword getCommaKeyword_1_0_0_0_0() { return cCommaKeyword_1_0_0_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0_0_0_1() { return cExpressionParserRuleCall_1_0_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }
		
		//IdentifierList ":="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_1_0_1_0() { return cIdentifierListParserRuleCall_1_0_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_0_1_1() { return cColonEqualsSignKeyword_1_0_1_1; }
		
		//RecvExpr
		public RuleCall getRecvExprParserRuleCall_1_1() { return cRecvExprParserRuleCall_1_1; }
	}
	public class RecvExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RecvExpr");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *RecvStmt:
		//	(ExpressionList "=" | IdentifierList ":=") RecvExpr
		//;* / RecvExpr:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRETURNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReturnStmt:
		//	RETURN ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//RETURN ExpressionList
		public Group getGroup() { return cGroup; }
		
		//RETURN
		public RuleCall getRETURNTerminalRuleCall_0() { return cRETURNTerminalRuleCall_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1() { return cExpressionListParserRuleCall_1; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BreakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBREAKTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BreakStmt:
		//	BREAK Label;
		@Override public ParserRule getRule() { return rule; }
		
		//BREAK Label
		public Group getGroup() { return cGroup; }
		
		//BREAK
		public RuleCall getBREAKTerminalRuleCall_0() { return cBREAKTerminalRuleCall_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ContinueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCONTINUETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ContinueStmt:
		//	CONTINUE Label;
		@Override public ParserRule getRule() { return rule; }
		
		//CONTINUE Label
		public Group getGroup() { return cGroup; }
		
		//CONTINUE
		public RuleCall getCONTINUETerminalRuleCall_0() { return cCONTINUETerminalRuleCall_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGOTOTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GotoStmt:
		//	GOTO Label;
		@Override public ParserRule getRule() { return rule; }
		
		//GOTO Label
		public Group getGroup() { return cGroup; }
		
		//GOTO
		public RuleCall getGOTOTerminalRuleCall_0() { return cGOTOTerminalRuleCall_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class FallthroughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FallthroughStmt");
		private final RuleCall cFALLTHROUGHTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FallthroughStmt:
		//	FALLTHROUGH;
		@Override public ParserRule getRule() { return rule; }
		
		//FALLTHROUGH
		public RuleCall getFALLTHROUGHTerminalRuleCall() { return cFALLTHROUGHTerminalRuleCall; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DeferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEFERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DeferStmt:
		//	DEFER Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//DEFER Expression
		public Group getGroup() { return cGroup; }
		
		//DEFER
		public RuleCall getDEFERTerminalRuleCall_0() { return cDEFERTerminalRuleCall_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class SourceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SourceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageClauseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cImportDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cTopLevelDeclParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//SourceFile:
		//	PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")*
		public Group getGroup() { return cGroup; }
		
		//PackageClause
		public RuleCall getPackageClauseParserRuleCall_0() { return cPackageClauseParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//(ImportDecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//ImportDecl
		public RuleCall getImportDeclParserRuleCall_2_0() { return cImportDeclParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//(TopLevelDecl ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//TopLevelDecl
		public RuleCall getTopLevelDeclParserRuleCall_3_0() { return cTopLevelDeclParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class PackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PackageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPACKAGETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackageNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PackageClause:
		//	PACKAGE PackageName;
		@Override public ParserRule getRule() { return rule; }
		
		//PACKAGE PackageName
		public Group getGroup() { return cGroup; }
		
		//PACKAGE
		public RuleCall getPACKAGETerminalRuleCall_0() { return cPACKAGETerminalRuleCall_0; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_1() { return cPackageNameParserRuleCall_1; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PackageName");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PackageName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIMPORTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ImportDecl:
		//	IMPORT (ImportSpec | "(" (ImportSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//IMPORT (ImportSpec | "(" (ImportSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//IMPORT
		public RuleCall getIMPORTTerminalRuleCall_0() { return cIMPORTTerminalRuleCall_0; }
		
		//(ImportSpec | "(" (ImportSpec ";")* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_0() { return cImportSpecParserRuleCall_1_0; }
		
		//"(" (ImportSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(ImportSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_1_1_0() { return cImportSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cPackageNameParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cImportPathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImportSpec:
		//	("." | PackageName)? ImportPath;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | PackageName)? ImportPath
		public Group getGroup() { return cGroup; }
		
		//("." | PackageName)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_0_1() { return cPackageNameParserRuleCall_0_1; }
		
		//ImportPath
		public RuleCall getImportPathParserRuleCall_1() { return cImportPathParserRuleCall_1; }
	}
	public class ImportPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportPath");
		private final RuleCall cSTRING_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImportPath:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall() { return cSTRING_LITTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tLETTER;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tBREAK;
	private final TerminalRule tDEFAULT;
	private final TerminalRule tFUNC;
	private final TerminalRule tINTERFACE;
	private final TerminalRule tSELECT;
	private final TerminalRule tCASE;
	private final TerminalRule tDEFER;
	private final TerminalRule tGO;
	private final TerminalRule tMAP;
	private final TerminalRule tSTRUCT;
	private final TerminalRule tCHAN;
	private final TerminalRule tELSE;
	private final TerminalRule tGOTO;
	private final TerminalRule tPACKAGE;
	private final TerminalRule tSWITCH;
	private final TerminalRule tCONST;
	private final TerminalRule tFALLTHROUGH;
	private final TerminalRule tIF;
	private final TerminalRule tRANGE;
	private final TerminalRule tTYPEKEYWORD;
	private final TerminalRule tCONTINUE;
	private final TerminalRule tFOR;
	private final TerminalRule tIMPORT;
	private final TerminalRule tRETURN;
	private final TerminalRule tVAR;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tUNICODE_CHAR;
	private final TerminalRule tINT_LIT;
	private final FLOAT_LITElements pFLOAT_LIT;
	private final TerminalRule tDECIMALS;
	private final TerminalRule tEXPONENT;
	private final IMAGINARY_LITElements pIMAGINARY_LIT;
	private final TerminalRule tRUNE_LIT;
	private final TerminalRule tUNICODE_VALUE;
	private final TerminalRule tBYTE_VALUE;
	private final TerminalRule tOCTAL_BYTE_VALUE;
	private final TerminalRule tHEX_BYTE_VALUE;
	private final TerminalRule tLITTLE_U_VALUE;
	private final TerminalRule tBIG_U_VALUE;
	private final TerminalRule tESCAPED_CHAR;
	private final TerminalRule tSTRING_LIT;
	private final TerminalRule tRAW_STRING_LIT;
	private final TerminalRule tINTERPRETED_STRING_LIT;
	private final TypeElements pType;
	private final TypeNameElements pTypeName;
	private final TypeNameLinhaElements pTypeNameLinha;
	private final TypeLitElements pTypeLit;
	private final TypeLitLinhaElements pTypeLitLinha;
	private final ArrayLengthElements pArrayLength;
	private final ElementTypeElements pElementType;
	private final StructTypeElements pStructType;
	private final FieldDeclElements pFieldDecl;
	private final EmbeddedFieldElements pEmbeddedField;
	private final TagElements pTag;
	private final PointerTypeElements pPointerType;
	private final BaseTypeElements pBaseType;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final InterfaceTypeElements pInterfaceType;
	private final MethodSpecElements pMethodSpec;
	private final MethodNameElements pMethodName;
	private final InterfaceTypeNameElements pInterfaceTypeName;
	private final MapTypeElements pMapType;
	private final KeyTypeElements pKeyType;
	private final ChannelTypeElements pChannelType;
	private final ChannelTypeLinhaElements pChannelTypeLinha;
	private final BlockElements pBlock;
	private final StatementListElements pStatementList;
	private final DeclarationElements pDeclaration;
	private final TopLevelDeclElements pTopLevelDecl;
	private final ConstDeclElements pConstDecl;
	private final ConstSpecElements pConstSpec;
	private final IdentifierListElements pIdentifierList;
	private final ExpressionListElements pExpressionList;
	private final TypeDeclElements pTypeDecl;
	private final TypeSpecElements pTypeSpec;
	private final AliasDeclElements pAliasDecl;
	private final TypeDefElements pTypeDef;
	private final VarDeclElements pVarDecl;
	private final VarSpecElements pVarSpec;
	private final ShortVarDeclElements pShortVarDecl;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionNameElements pFunctionName;
	private final FunctionBodyElements pFunctionBody;
	private final MethodDeclElements pMethodDecl;
	private final ReceiverElements pReceiver;
	private final OperandElements pOperand;
	private final LiteralElements pLiteral;
	private final BasicLitElements pBasicLit;
	private final OperandNameElements pOperandName;
	private final OperandNameLinhaElements pOperandNameLinha;
	private final CompositeLitElements pCompositeLit;
	private final LiteralTypeElements pLiteralType;
	private final LiteralTypeLinhaElements pLiteralTypeLinha;
	private final LiteralValueElements pLiteralValue;
	private final ElementListElements pElementList;
	private final KeyedElementElements pKeyedElement;
	private final KeyElements pKey;
	private final FieldNameElements pFieldName;
	private final ElementElements pElement;
	private final FunctionLitElements pFunctionLit;
	private final PrimaryExprElements pPrimaryExpr;
	private final PrimaryExpr1Elements pPrimaryExpr1;
	private final PrimaryExpr2Elements pPrimaryExpr2;
	private final PrimaryExpr3Elements pPrimaryExpr3;
	private final PrimaryExpr4Elements pPrimaryExpr4;
	private final PrimaryExpr5Elements pPrimaryExpr5;
	private final PrimaryExpr6Elements pPrimaryExpr6;
	private final PrimaryExpr7Elements pPrimaryExpr7;
	private final PrimaryExprLinhaElements pPrimaryExprLinha;
	private final PrimaryExprLinha1Elements pPrimaryExprLinha1;
	private final PrimaryExprLinha2Elements pPrimaryExprLinha2;
	private final PrimaryExprLinha21Elements pPrimaryExprLinha21;
	private final PrimaryExprLinha211Elements pPrimaryExprLinha211;
	private final PrimaryExprLinha2111Elements pPrimaryExprLinha2111;
	private final PrimaryExprLinha22Elements pPrimaryExprLinha22;
	private final PrimaryExprLinha221Elements pPrimaryExprLinha221;
	private final SelectorElements pSelector;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final TypeAssertionElements pTypeAssertion;
	private final ArgumentsElements pArguments;
	private final MethodExprElements pMethodExpr;
	private final ReceiverTypeElements pReceiverType;
	private final ExpressionElements pExpression;
	private final Expression_LinhaElements pExpression_Linha;
	private final UnaryExprElements pUnaryExpr;
	private final BINARY_OPElements pBINARY_OP;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tMUL_OP;
	private final TerminalRule tUNARY_OP;
	private final ConversionElements pConversion;
	private final StatementElements pStatement;
	private final SimpleStmtElements pSimpleStmt;
	private final SimpleStmtLinhaElements pSimpleStmtLinha;
	private final EmptyStmtElements pEmptyStmt;
	private final LabeledStmtElements pLabeledStmt;
	private final LabelElements pLabel;
	private final Assign_opElements pAssign_op;
	private final IfStmtElements pIfStmt;
	private final IfStmtLinhaElements pIfStmtLinha;
	private final SwitchStmtElements pSwitchStmt;
	private final SwitchStmtLinhaElements pSwitchStmtLinha;
	private final SwitchStmtLinhaLinhaElements pSwitchStmtLinhaLinha;
	private final ExprCaseClauseElements pExprCaseClause;
	private final ExprSwitchCaseElements pExprSwitchCase;
	private final TypeCaseClauseElements pTypeCaseClause;
	private final TypeSwitchCaseElements pTypeSwitchCase;
	private final TypeListElements pTypeList;
	private final ForStmtElements pForStmt;
	private final ForStmtLinhaElements pForStmtLinha;
	private final ForStmtLinhaLinhaElements pForStmtLinhaLinha;
	private final ConditionElements pCondition;
	private final PostStmtElements pPostStmt;
	private final GoStmtElements pGoStmt;
	private final SelectStmtElements pSelectStmt;
	private final CommClauseElements pCommClause;
	private final CommCaseElements pCommCase;
	private final CommCaseLinhaElements pCommCaseLinha;
	private final RecvExprElements pRecvExpr;
	private final ReturnStmtElements pReturnStmt;
	private final BreakStmtElements pBreakStmt;
	private final ContinueStmtElements pContinueStmt;
	private final GotoStmtElements pGotoStmt;
	private final FallthroughStmtElements pFallthroughStmt;
	private final DeferStmtElements pDeferStmt;
	private final SourceFileElements pSourceFile;
	private final PackageClauseElements pPackageClause;
	private final PackageNameElements pPackageName;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final ImportPathElements pImportPath;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NEWLINE");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECIMAL_DIGIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OCTAL_DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HEX_DIGIT");
		this.tBREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BREAK");
		this.tDEFAULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DEFAULT");
		this.tFUNC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FUNC");
		this.tINTERFACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTERFACE");
		this.tSELECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SELECT");
		this.tCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CASE");
		this.tDEFER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DEFER");
		this.tGO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GO");
		this.tMAP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MAP");
		this.tSTRUCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRUCT");
		this.tCHAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CHAN");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ELSE");
		this.tGOTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GOTO");
		this.tPACKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PACKAGE");
		this.tSWITCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SWITCH");
		this.tCONST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CONST");
		this.tFALLTHROUGH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FALLTHROUGH");
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IF");
		this.tRANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RANGE");
		this.tTYPEKEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TYPEKEYWORD");
		this.tCONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CONTINUE");
		this.tFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FOR");
		this.tIMPORT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IMPORT");
		this.tRETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RETURN");
		this.tVAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VAR");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IDENTIFIER");
		this.tUNICODE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNICODE_CHAR");
		this.tINT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INT_LIT");
		this.pFLOAT_LIT = new FLOAT_LITElements();
		this.tDECIMALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECIMALS");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXPONENT");
		this.pIMAGINARY_LIT = new IMAGINARY_LITElements();
		this.tRUNE_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RUNE_LIT");
		this.tUNICODE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNICODE_VALUE");
		this.tBYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BYTE_VALUE");
		this.tOCTAL_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OCTAL_BYTE_VALUE");
		this.tHEX_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HEX_BYTE_VALUE");
		this.tLITTLE_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LITTLE_U_VALUE");
		this.tBIG_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BIG_U_VALUE");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ESCAPED_CHAR");
		this.tSTRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING_LIT");
		this.tRAW_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RAW_STRING_LIT");
		this.tINTERPRETED_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTERPRETED_STRING_LIT");
		this.pType = new TypeElements();
		this.pTypeName = new TypeNameElements();
		this.pTypeNameLinha = new TypeNameLinhaElements();
		this.pTypeLit = new TypeLitElements();
		this.pTypeLitLinha = new TypeLitLinhaElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pElementType = new ElementTypeElements();
		this.pStructType = new StructTypeElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pEmbeddedField = new EmbeddedFieldElements();
		this.pTag = new TagElements();
		this.pPointerType = new PointerTypeElements();
		this.pBaseType = new BaseTypeElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pMethodSpec = new MethodSpecElements();
		this.pMethodName = new MethodNameElements();
		this.pInterfaceTypeName = new InterfaceTypeNameElements();
		this.pMapType = new MapTypeElements();
		this.pKeyType = new KeyTypeElements();
		this.pChannelType = new ChannelTypeElements();
		this.pChannelTypeLinha = new ChannelTypeLinhaElements();
		this.pBlock = new BlockElements();
		this.pStatementList = new StatementListElements();
		this.pDeclaration = new DeclarationElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstSpec = new ConstSpecElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pExpressionList = new ExpressionListElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pAliasDecl = new AliasDeclElements();
		this.pTypeDef = new TypeDefElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarSpec = new VarSpecElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pOperand = new OperandElements();
		this.pLiteral = new LiteralElements();
		this.pBasicLit = new BasicLitElements();
		this.pOperandName = new OperandNameElements();
		this.pOperandNameLinha = new OperandNameLinhaElements();
		this.pCompositeLit = new CompositeLitElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pLiteralTypeLinha = new LiteralTypeLinhaElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pElementList = new ElementListElements();
		this.pKeyedElement = new KeyedElementElements();
		this.pKey = new KeyElements();
		this.pFieldName = new FieldNameElements();
		this.pElement = new ElementElements();
		this.pFunctionLit = new FunctionLitElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pPrimaryExpr1 = new PrimaryExpr1Elements();
		this.pPrimaryExpr2 = new PrimaryExpr2Elements();
		this.pPrimaryExpr3 = new PrimaryExpr3Elements();
		this.pPrimaryExpr4 = new PrimaryExpr4Elements();
		this.pPrimaryExpr5 = new PrimaryExpr5Elements();
		this.pPrimaryExpr6 = new PrimaryExpr6Elements();
		this.pPrimaryExpr7 = new PrimaryExpr7Elements();
		this.pPrimaryExprLinha = new PrimaryExprLinhaElements();
		this.pPrimaryExprLinha1 = new PrimaryExprLinha1Elements();
		this.pPrimaryExprLinha2 = new PrimaryExprLinha2Elements();
		this.pPrimaryExprLinha21 = new PrimaryExprLinha21Elements();
		this.pPrimaryExprLinha211 = new PrimaryExprLinha211Elements();
		this.pPrimaryExprLinha2111 = new PrimaryExprLinha2111Elements();
		this.pPrimaryExprLinha22 = new PrimaryExprLinha22Elements();
		this.pPrimaryExprLinha221 = new PrimaryExprLinha221Elements();
		this.pSelector = new SelectorElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pTypeAssertion = new TypeAssertionElements();
		this.pArguments = new ArgumentsElements();
		this.pMethodExpr = new MethodExprElements();
		this.pReceiverType = new ReceiverTypeElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_Linha = new Expression_LinhaElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pBINARY_OP = new BINARY_OPElements();
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ADD_OP");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MUL_OP");
		this.tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNARY_OP");
		this.pConversion = new ConversionElements();
		this.pStatement = new StatementElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pSimpleStmtLinha = new SimpleStmtLinhaElements();
		this.pEmptyStmt = new EmptyStmtElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pLabel = new LabelElements();
		this.pAssign_op = new Assign_opElements();
		this.pIfStmt = new IfStmtElements();
		this.pIfStmtLinha = new IfStmtLinhaElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pSwitchStmtLinha = new SwitchStmtLinhaElements();
		this.pSwitchStmtLinhaLinha = new SwitchStmtLinhaLinhaElements();
		this.pExprCaseClause = new ExprCaseClauseElements();
		this.pExprSwitchCase = new ExprSwitchCaseElements();
		this.pTypeCaseClause = new TypeCaseClauseElements();
		this.pTypeSwitchCase = new TypeSwitchCaseElements();
		this.pTypeList = new TypeListElements();
		this.pForStmt = new ForStmtElements();
		this.pForStmtLinha = new ForStmtLinhaElements();
		this.pForStmtLinhaLinha = new ForStmtLinhaLinhaElements();
		this.pCondition = new ConditionElements();
		this.pPostStmt = new PostStmtElements();
		this.pGoStmt = new GoStmtElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pCommClause = new CommClauseElements();
		this.pCommCase = new CommCaseElements();
		this.pCommCaseLinha = new CommCaseLinhaElements();
		this.pRecvExpr = new RecvExprElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pFallthroughStmt = new FallthroughStmtElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pSourceFile = new SourceFileElements();
		this.pPackageClause = new PackageClauseElements();
		this.pPackageName = new PackageNameElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pImportPath = new ImportPathElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greeting:
	//	SourceFile;
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//terminal NEWLINE:
	//	"\n" | "\r" | "\n\r";
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal LETTER:
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DECIMAL_DIGIT:
	//	"0".."9";
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal OCTAL_DIGIT:
	//	"0".."7";
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal HEX_DIGIT:
	//	"0".."9" | "A".."F" | "a".."f";
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal BREAK:
	//	"break";
	public TerminalRule getBREAKRule() {
		return tBREAK;
	}
	
	//terminal DEFAULT:
	//	"default";
	public TerminalRule getDEFAULTRule() {
		return tDEFAULT;
	}
	
	//terminal FUNC:
	//	"func";
	public TerminalRule getFUNCRule() {
		return tFUNC;
	}
	
	//terminal INTERFACE:
	//	"interface";
	public TerminalRule getINTERFACERule() {
		return tINTERFACE;
	}
	
	//terminal SELECT:
	//	"select";
	public TerminalRule getSELECTRule() {
		return tSELECT;
	}
	
	//terminal CASE:
	//	"case";
	public TerminalRule getCASERule() {
		return tCASE;
	}
	
	//terminal DEFER:
	//	"defer";
	public TerminalRule getDEFERRule() {
		return tDEFER;
	}
	
	//terminal GO:
	//	"go";
	public TerminalRule getGORule() {
		return tGO;
	}
	
	//terminal MAP:
	//	"map";
	public TerminalRule getMAPRule() {
		return tMAP;
	}
	
	//terminal STRUCT:
	//	"struct";
	public TerminalRule getSTRUCTRule() {
		return tSTRUCT;
	}
	
	//terminal CHAN:
	//	"chan";
	public TerminalRule getCHANRule() {
		return tCHAN;
	}
	
	//terminal ELSE:
	//	"else";
	public TerminalRule getELSERule() {
		return tELSE;
	}
	
	//terminal GOTO:
	//	"goto";
	public TerminalRule getGOTORule() {
		return tGOTO;
	}
	
	//terminal PACKAGE:
	//	"package";
	public TerminalRule getPACKAGERule() {
		return tPACKAGE;
	}
	
	//terminal SWITCH:
	//	"switch";
	public TerminalRule getSWITCHRule() {
		return tSWITCH;
	}
	
	//terminal CONST:
	//	"const";
	public TerminalRule getCONSTRule() {
		return tCONST;
	}
	
	//terminal FALLTHROUGH:
	//	"fallthrough";
	public TerminalRule getFALLTHROUGHRule() {
		return tFALLTHROUGH;
	}
	
	//terminal IF:
	//	"if";
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal RANGE:
	//	"range";
	public TerminalRule getRANGERule() {
		return tRANGE;
	}
	
	//terminal TYPEKEYWORD:
	//	"type";
	public TerminalRule getTYPEKEYWORDRule() {
		return tTYPEKEYWORD;
	}
	
	//terminal CONTINUE:
	//	"continue";
	public TerminalRule getCONTINUERule() {
		return tCONTINUE;
	}
	
	//terminal FOR:
	//	"for";
	public TerminalRule getFORRule() {
		return tFOR;
	}
	
	//terminal IMPORT:
	//	"import";
	public TerminalRule getIMPORTRule() {
		return tIMPORT;
	}
	
	//terminal RETURN:
	//	"return";
	public TerminalRule getRETURNRule() {
		return tRETURN;
	}
	
	//terminal VAR:
	//	"var";
	public TerminalRule getVARRule() {
		return tVAR;
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | "0".."9")*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal UNICODE_CHAR:
	//	"fazeer";
	public TerminalRule getUNICODE_CHARRule() {
		return tUNICODE_CHAR;
	}
	
	//terminal INT_LIT:
	//	'1'..'9' DECIMAL_DIGIT* | "0" OCTAL_DIGIT*
	//	| '0' ('x' | "X") HEX_DIGIT+;
	public TerminalRule getINT_LITRule() {
		return tINT_LIT;
	}
	
	//FLOAT_LIT:
	//	DECIMALS "." DECIMALS? EXPONENT? | DECIMALS EXPONENT |
	//	"." DECIMALS EXPONENT?;
	public FLOAT_LITElements getFLOAT_LITAccess() {
		return pFLOAT_LIT;
	}
	
	public ParserRule getFLOAT_LITRule() {
		return getFLOAT_LITAccess().getRule();
	}
	
	//terminal DECIMALS:
	//	INT;
	public TerminalRule getDECIMALSRule() {
		return tDECIMALS;
	}
	
	//terminal EXPONENT:
	//	("e" | "E") ('+' | '-')? DECIMALS;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//IMAGINARY_LIT:
	//	(DECIMALS | FLOAT_LIT) "i";
	public IMAGINARY_LITElements getIMAGINARY_LITAccess() {
		return pIMAGINARY_LIT;
	}
	
	public ParserRule getIMAGINARY_LITRule() {
		return getIMAGINARY_LITAccess().getRule();
	}
	
	//terminal RUNE_LIT:
	//	"'" (UNICODE_VALUE | BYTE_VALUE) "'";
	public TerminalRule getRUNE_LITRule() {
		return tRUNE_LIT;
	}
	
	//terminal UNICODE_VALUE:
	//	UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR;
	public TerminalRule getUNICODE_VALUERule() {
		return tUNICODE_VALUE;
	}
	
	//terminal BYTE_VALUE:
	//	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE;
	public TerminalRule getBYTE_VALUERule() {
		return tBYTE_VALUE;
	}
	
	//terminal OCTAL_BYTE_VALUE:
	//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public TerminalRule getOCTAL_BYTE_VALUERule() {
		return tOCTAL_BYTE_VALUE;
	}
	
	//terminal HEX_BYTE_VALUE:
	//	'\\' "x" HEX_DIGIT HEX_DIGIT;
	public TerminalRule getHEX_BYTE_VALUERule() {
		return tHEX_BYTE_VALUE;
	}
	
	//terminal LITTLE_U_VALUE:
	//	'\\' "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getLITTLE_U_VALUERule() {
		return tLITTLE_U_VALUE;
	}
	
	//terminal BIG_U_VALUE:
	//	'\\' "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getBIG_U_VALUERule() {
		return tBIG_U_VALUE;
	}
	
	//terminal ESCAPED_CHAR:
	//	'\\' ("a" | "b" | "f" | "n" | "r" | "t" | "v" | '\\' | "'" | '"');
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//terminal STRING_LIT:
	//	RAW_STRING_LIT | INTERPRETED_STRING_LIT;
	public TerminalRule getSTRING_LITRule() {
		return tSTRING_LIT;
	}
	
	//terminal RAW_STRING_LIT:
	//	"'" (UNICODE_CHAR | NEWLINE)* "'";
	public TerminalRule getRAW_STRING_LITRule() {
		return tRAW_STRING_LIT;
	}
	
	//terminal INTERPRETED_STRING_LIT:
	//	'"' (UNICODE_VALUE | BYTE_VALUE)* '"';
	public TerminalRule getINTERPRETED_STRING_LITRule() {
		return tINTERPRETED_STRING_LIT;
	}
	
	//Type:
	//	TypeName | TypeLit | "(" Type ")";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeName:
	//	IDENTIFIER TypeNameLinha;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//TypeNameLinha:
	//	"." IDENTIFIER | ANY_OTHER;
	public TypeNameLinhaElements getTypeNameLinhaAccess() {
		return pTypeNameLinha;
	}
	
	public ParserRule getTypeNameLinhaRule() {
		return getTypeNameLinhaAccess().getRule();
	}
	
	//TypeLit:
	//	"[" TypeLitLinha | StructType | PointerType | FunctionType | InterfaceType | MapType | ChannelType;
	public TypeLitElements getTypeLitAccess() {
		return pTypeLit;
	}
	
	public ParserRule getTypeLitRule() {
		return getTypeLitAccess().getRule();
	}
	
	//TypeLitLinha:
	//	ArrayLength "]" ElementType
	//	| "]" ElementType;
	public TypeLitLinhaElements getTypeLitLinhaAccess() {
		return pTypeLitLinha;
	}
	
	public ParserRule getTypeLitLinhaRule() {
		return getTypeLitLinhaAccess().getRule();
	}
	
	//ArrayLength:
	//	Expression;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//ElementType:
	//	Type;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	//StructType:
	//	STRUCT "{" (FieldDecl ";")* "}";
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//FieldDecl:
	//	(IdentifierList Type | EmbeddedField) Tag?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//EmbeddedField:
	//	"*"? TypeName;
	public EmbeddedFieldElements getEmbeddedFieldAccess() {
		return pEmbeddedField;
	}
	
	public ParserRule getEmbeddedFieldRule() {
		return getEmbeddedFieldAccess().getRule();
	}
	
	//Tag:
	//	STRING_LIT;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//PointerType:
	//	"*" BaseType;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//BaseType:
	//	Type;
	public BaseTypeElements getBaseTypeAccess() {
		return pBaseType;
	}
	
	public ParserRule getBaseTypeRule() {
		return getBaseTypeAccess().getRule();
	}
	
	//FunctionType:
	//	FUNC Signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//Signature:
	//	Parameters => Result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	=> Parameters | Type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	"(" (ParameterList ","?)? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ParameterList:
	//	ParameterDecl ("," ParameterDecl)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDecl:
	//	IdentifierList? "..."? Type;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	//InterfaceType:
	//	INTERFACE "{" (MethodSpec ";")* "}";
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	//MethodSpec:
	//	MethodName Signature | InterfaceTypeName;
	public MethodSpecElements getMethodSpecAccess() {
		return pMethodSpec;
	}
	
	public ParserRule getMethodSpecRule() {
		return getMethodSpecAccess().getRule();
	}
	
	//MethodName:
	//	IDENTIFIER;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//InterfaceTypeName:
	//	TypeName;
	public InterfaceTypeNameElements getInterfaceTypeNameAccess() {
		return pInterfaceTypeName;
	}
	
	public ParserRule getInterfaceTypeNameRule() {
		return getInterfaceTypeNameAccess().getRule();
	}
	
	//MapType:
	//	MAP "[" KeyType "]" ElementType;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//KeyType:
	//	Type;
	public KeyTypeElements getKeyTypeAccess() {
		return pKeyType;
	}
	
	public ParserRule getKeyTypeRule() {
		return getKeyTypeAccess().getRule();
	}
	
	//ChannelType:
	//	(CHAN ChannelTypeLinha | "<-" CHAN) ElementType;
	public ChannelTypeElements getChannelTypeAccess() {
		return pChannelType;
	}
	
	public ParserRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}
	
	//ChannelTypeLinha:
	//	"<-" | ANY_OTHER;
	public ChannelTypeLinhaElements getChannelTypeLinhaAccess() {
		return pChannelTypeLinha;
	}
	
	public ParserRule getChannelTypeLinhaRule() {
		return getChannelTypeLinhaAccess().getRule();
	}
	
	//Block:
	//	"{" StatementList "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//StatementList:
	//	(Statement ";")*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Declaration:
	//	ConstDecl | TypeDecl | VarDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//TopLevelDecl:
	//	Declaration | FunctionDecl | MethodDecl;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	//ConstDecl:
	//	CONST (ConstSpec | "(" (ConstSpec ";")* ")");
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	//ConstSpec:
	//	IdentifierList (Type? "=" ExpressionList)?;
	public ConstSpecElements getConstSpecAccess() {
		return pConstSpec;
	}
	
	public ParserRule getConstSpecRule() {
		return getConstSpecAccess().getRule();
	}
	
	//IdentifierList:
	//	IDENTIFIER ("," IDENTIFIER)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//ExpressionList:
	//	Expression ("," Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	//TypeDecl:
	//	TYPEKEYWORD (TypeSpec | "(" (TypeSpec ";")* ")");
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//TypeSpec:
	//	AliasDecl | TypeDef;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//AliasDecl:
	//	IDENTIFIER "=" Type;
	public AliasDeclElements getAliasDeclAccess() {
		return pAliasDecl;
	}
	
	public ParserRule getAliasDeclRule() {
		return getAliasDeclAccess().getRule();
	}
	
	//TypeDef:
	//	IDENTIFIER Type;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//VarDecl:
	//	VAR (VarSpec | "(" (VarSpec ";")* ")");
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//VarSpec:
	//	IdentifierList (Type ("=" ExpressionList)? | "=" ExpressionList);
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	//ShortVarDecl:
	//	IdentifierList ":=" ExpressionList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//FunctionDecl:
	//	FUNC FunctionName Signature FunctionBody?;
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//FunctionName:
	//	IDENTIFIER;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//FunctionBody:
	//	Block;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//MethodDecl:
	//	FUNC Receiver MethodName Signature FunctionBody?;
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//Receiver:
	//	Parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//Operand:
	//	Literal | OperandName | "(" Expression ")";
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//Literal:
	//	BasicLit | CompositeLit | FunctionLit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BasicLit:
	//	INT_LIT | FLOAT_LIT | IMAGINARY_LIT | STRING_LIT;
	public BasicLitElements getBasicLitAccess() {
		return pBasicLit;
	}
	
	public ParserRule getBasicLitRule() {
		return getBasicLitAccess().getRule();
	}
	
	//OperandName:
	//	IDENTIFIER OperandNameLinha;
	public OperandNameElements getOperandNameAccess() {
		return pOperandName;
	}
	
	public ParserRule getOperandNameRule() {
		return getOperandNameAccess().getRule();
	}
	
	//OperandNameLinha:
	//	"." IDENTIFIER | ANY_OTHER;
	public OperandNameLinhaElements getOperandNameLinhaAccess() {
		return pOperandNameLinha;
	}
	
	public ParserRule getOperandNameLinhaRule() {
		return getOperandNameLinhaAccess().getRule();
	}
	
	//CompositeLit:
	//	LiteralType LiteralValue;
	public CompositeLitElements getCompositeLitAccess() {
		return pCompositeLit;
	}
	
	public ParserRule getCompositeLitRule() {
		return getCompositeLitAccess().getRule();
	}
	
	//LiteralType:
	//	StructType | MapType | TypeName | "[" LiteralTypeLinha;
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//LiteralTypeLinha:
	//	ArrayLength "]" ElementType | "..." "]" ElementType | "]" ElementType;
	public LiteralTypeLinhaElements getLiteralTypeLinhaAccess() {
		return pLiteralTypeLinha;
	}
	
	public ParserRule getLiteralTypeLinhaRule() {
		return getLiteralTypeLinhaAccess().getRule();
	}
	
	//LiteralValue:
	//	"{" (ElementList ","?)? "}";
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//ElementList:
	//	KeyedElement ("," KeyedElement)*;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//KeyedElement:
	//	=> (Key ":")? Element;
	public KeyedElementElements getKeyedElementAccess() {
		return pKeyedElement;
	}
	
	public ParserRule getKeyedElementRule() {
		return getKeyedElementAccess().getRule();
	}
	
	//Key:
	//	FieldName | Expression | LiteralValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//FieldName:
	//	IDENTIFIER;
	public FieldNameElements getFieldNameAccess() {
		return pFieldName;
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}
	
	//Element:
	//	Expression | LiteralValue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//FunctionLit:
	//	FUNC Signature FunctionBody;
	public FunctionLitElements getFunctionLitAccess() {
		return pFunctionLit;
	}
	
	public ParserRule getFunctionLitRule() {
		return getFunctionLitAccess().getRule();
	}
	
	//PrimaryExpr:
	//	BasicLit PrimaryExprLinha | StructType PrimaryExpr4 PrimaryExprLinha | MapType PrimaryExpr4 PrimaryExprLinha |
	//	IDENTIFIER TypeNameLinha PrimaryExpr5 PrimaryExprLinha |
	//	"[" PrimaryExpr6 PrimaryExprLinha | FUNC Signature PrimaryExpr7 PrimaryExprLinha | PointerType PrimaryExpr1
	//	PrimaryExprLinha | InterfaceType PrimaryExpr1 PrimaryExprLinha | ChannelType PrimaryExpr1 PrimaryExprLinha |
	//	"(" PrimaryExpr3 PrimaryExprLinha
	//	/ *BasicLit PrimaryExprLinha |
	//	StructType LiteralValue PrimaryExprLinha|
	//	MapType LiteralValue PrimaryExprLinha|
	//	TypeName LiteralValue PrimaryExprLinha|
	//	"[" LiteralTypeLinha LiteralValue PrimaryExprLinha|
	//	FunctionLit PrimaryExprLinha |
	//	"[" TypeLitLinha PrimaryExpr1 PrimaryExprLinha|
	//	StructType PrimaryExpr1 PrimaryExprLinha|
	//	PointerType PrimaryExpr1 PrimaryExprLinha|
	//	FunctionType PrimaryExpr1 PrimaryExprLinha|
	//	InterfaceType PrimaryExpr1 PrimaryExprLinha|
	//	MapType PrimaryExpr1 PrimaryExprLinha|
	//	ChannelType PrimaryExpr1 PrimaryExprLinha|
	//	"(" PrimaryExpr3 PrimaryExprLinha |
	//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
	/// *BasicLit PrimaryExprLinha |
	//	(StructType | MapType | TypeName | "[" LiteralTypeLinha) LiteralValue PrimaryExprLinha |
	//	FunctionLit PrimaryExprLinha |
	//	"[" TypeLitLinha PrimaryExpr1 PrimaryExprLinha|
	//	StructType PrimaryExpr1 PrimaryExprLinha|
	//	PointerType PrimaryExpr1 PrimaryExprLinha|
	//	FunctionType PrimaryExpr1 PrimaryExprLinha|
	//	InterfaceType PrimaryExpr1 PrimaryExprLinha|
	//	MapType PrimaryExpr1 PrimaryExprLinha|
	//	ChannelType PrimaryExpr1 PrimaryExprLinha|
	//	"(" PrimaryExpr3 PrimaryExprLinha |
	//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
	/// *(BasicLit | CompositeLit | FunctionLit) PrimaryExprLinha |
	//	( "[" TypeLitLinha | StructType | PointerType | FunctionType | InterfaceType |
	//	  MapType | ChannelType) PrimaryExpr1 PrimaryExprLinha |
	//	"(" PrimaryExpr3 PrimaryExprLinha |
	//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
	/// *Literal PrimaryExprLinha |
	//	TypeLit PrimaryExpr1 PrimaryExprLinha |
	//	"(" PrimaryExpr3 PrimaryExprLinha |
	//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
	/// *(Literal | "(" Expression ")") PrimaryExprLinha|
	//	(TypeLit |  "(" Type ")") PrimaryExpr1 PrimaryExprLinha |
	//	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha* /
	/// *(Literal | IDENTIFIER OperandNameLinha | "(" Expression ")") PrimaryExprLinha|
	//	(IDENTIFIER TypeNameLinha | TypeLit | "(" Type ")") PrimaryExpr1 PrimaryExprLinha* /
	/// *(Literal | OperandName | "(" Expression ")") PrimaryExprLinha | 
	//	Type "(" Expression ( "," )? ")" PrimaryExprLinha |
	//	Type "." MethodName PrimaryExprLinha* /
	//	/ *Operand PrimaryExprLinha | Conversion PrimaryExprLinha | MethodExpr PrimaryExprLinha * /;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//PrimaryExpr1:
	//	"(" Expression ","? ")" | "." MethodName;
	public PrimaryExpr1Elements getPrimaryExpr1Access() {
		return pPrimaryExpr1;
	}
	
	public ParserRule getPrimaryExpr1Rule() {
		return getPrimaryExpr1Access().getRule();
	}
	
	//PrimaryExpr2:
	//	PrimaryExpr1 | ANY_OTHER;
	public PrimaryExpr2Elements getPrimaryExpr2Access() {
		return pPrimaryExpr2;
	}
	
	public ParserRule getPrimaryExpr2Rule() {
		return getPrimaryExpr2Access().getRule();
	}
	
	//PrimaryExpr3:
	//	=> Expression ")" | Type ")" PrimaryExpr1;
	public PrimaryExpr3Elements getPrimaryExpr3Access() {
		return pPrimaryExpr3;
	}
	
	public ParserRule getPrimaryExpr3Rule() {
		return getPrimaryExpr3Access().getRule();
	}
	
	//PrimaryExpr4:
	//	LiteralValue | PrimaryExpr1;
	public PrimaryExpr4Elements getPrimaryExpr4Access() {
		return pPrimaryExpr4;
	}
	
	public ParserRule getPrimaryExpr4Rule() {
		return getPrimaryExpr4Access().getRule();
	}
	
	//PrimaryExpr5:
	//	LiteralValue | PrimaryExpr2;
	public PrimaryExpr5Elements getPrimaryExpr5Access() {
		return pPrimaryExpr5;
	}
	
	public ParserRule getPrimaryExpr5Rule() {
		return getPrimaryExpr5Access().getRule();
	}
	
	//PrimaryExpr6:
	//	ArrayLength "]" ElementType PrimaryExpr4 |
	//	"..." "]" ElementType LiteralValue |
	//	"]" ElementType PrimaryExpr4
	//	/ *(ArrayLength "]" ElementType | "..." "]" ElementType | "]" ElementType) LiteralValue | 
	//	(ArrayLength "]" ElementType | "]" ElementType) PrimaryExpr1* /;
	public PrimaryExpr6Elements getPrimaryExpr6Access() {
		return pPrimaryExpr6;
	}
	
	public ParserRule getPrimaryExpr6Rule() {
		return getPrimaryExpr6Access().getRule();
	}
	
	//PrimaryExpr7:
	//	FunctionBody | PrimaryExpr1;
	public PrimaryExpr7Elements getPrimaryExpr7Access() {
		return pPrimaryExpr7;
	}
	
	public ParserRule getPrimaryExpr7Rule() {
		return getPrimaryExpr7Access().getRule();
	}
	
	//PrimaryExprLinha:
	//	"." PrimaryExprLinha1 PrimaryExprLinha |
	//	"[" PrimaryExprLinha2 PrimaryExprLinha | Arguments PrimaryExprLinha
	//	/ *"." IDENTIFIER PrimaryExprLinha| "[" Expression "]" PrimaryExprLinha| 
	//	 * ("[" ( Expression )? ":" ( Expression )? "]" | "[" ( Expression )? ":" Expression ":" Expression "]" ) PrimaryExprLinha| 
	//	"." "(" Type ")"  PrimaryExprLinha| 
	//	* "(" ( ( ExpressionList | Type ( "," ExpressionList )? ) ( "..." )? ( "," )? )? ")"  PrimaryExprLinha* /;
	public PrimaryExprLinhaElements getPrimaryExprLinhaAccess() {
		return pPrimaryExprLinha;
	}
	
	public ParserRule getPrimaryExprLinhaRule() {
		return getPrimaryExprLinhaAccess().getRule();
	}
	
	//PrimaryExprLinha1:
	//	IDENTIFIER | "(" Type ")";
	public PrimaryExprLinha1Elements getPrimaryExprLinha1Access() {
		return pPrimaryExprLinha1;
	}
	
	public ParserRule getPrimaryExprLinha1Rule() {
		return getPrimaryExprLinha1Access().getRule();
	}
	
	//PrimaryExprLinha2:
	//	Expression PrimaryExprLinha21 | ":" PrimaryExprLinha22
	//	/ *Expression "]" | 
	//	( Expression ) ":" ( Expression ) "]" |
	//	":" ( Expression ) "]" |
	//	( Expression ) ":" "]" |
	//	 ":"  "]" |
	//	 ( Expression ) ":" Expression ":" Expression "]"|
	//	 ":" Expression ":" Expression "]"* /;
	public PrimaryExprLinha2Elements getPrimaryExprLinha2Access() {
		return pPrimaryExprLinha2;
	}
	
	public ParserRule getPrimaryExprLinha2Rule() {
		return getPrimaryExprLinha2Access().getRule();
	}
	
	//PrimaryExprLinha21:
	//	"]" | ":" PrimaryExprLinha211;
	public PrimaryExprLinha21Elements getPrimaryExprLinha21Access() {
		return pPrimaryExprLinha21;
	}
	
	public ParserRule getPrimaryExprLinha21Rule() {
		return getPrimaryExprLinha21Access().getRule();
	}
	
	//PrimaryExprLinha211:
	//	Expression PrimaryExprLinha2111 | "]";
	public PrimaryExprLinha211Elements getPrimaryExprLinha211Access() {
		return pPrimaryExprLinha211;
	}
	
	public ParserRule getPrimaryExprLinha211Rule() {
		return getPrimaryExprLinha211Access().getRule();
	}
	
	//PrimaryExprLinha2111:
	//	"]" | ":" Expression "]";
	public PrimaryExprLinha2111Elements getPrimaryExprLinha2111Access() {
		return pPrimaryExprLinha2111;
	}
	
	public ParserRule getPrimaryExprLinha2111Rule() {
		return getPrimaryExprLinha2111Access().getRule();
	}
	
	//PrimaryExprLinha22:
	//	Expression PrimaryExprLinha221 | "]";
	public PrimaryExprLinha22Elements getPrimaryExprLinha22Access() {
		return pPrimaryExprLinha22;
	}
	
	public ParserRule getPrimaryExprLinha22Rule() {
		return getPrimaryExprLinha22Access().getRule();
	}
	
	//PrimaryExprLinha221:
	//	"]" | ":" Expression "]";
	public PrimaryExprLinha221Elements getPrimaryExprLinha221Access() {
		return pPrimaryExprLinha221;
	}
	
	public ParserRule getPrimaryExprLinha221Rule() {
		return getPrimaryExprLinha221Access().getRule();
	}
	
	//Selector:
	//	"." IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Index:
	//	"[" Expression "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//Slice:
	//	"[" Expression? ":" Expression? "]" |
	//	"[" Expression? ":" Expression ":" Expression "]";
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//TypeAssertion:
	//	"." "(" Type ")";
	public TypeAssertionElements getTypeAssertionAccess() {
		return pTypeAssertion;
	}
	
	public ParserRule getTypeAssertionRule() {
		return getTypeAssertionAccess().getRule();
	}
	
	//Arguments:
	//	"(" ((=> ExpressionList | Type ("," ExpressionList)?) "..."? ","?)? ")";
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//MethodExpr:
	//	ReceiverType "." MethodName;
	public MethodExprElements getMethodExprAccess() {
		return pMethodExpr;
	}
	
	public ParserRule getMethodExprRule() {
		return getMethodExprAccess().getRule();
	}
	
	//ReceiverType:
	//	Type;
	public ReceiverTypeElements getReceiverTypeAccess() {
		return pReceiverType;
	}
	
	public ParserRule getReceiverTypeRule() {
		return getReceiverTypeAccess().getRule();
	}
	
	//Expression:
	//	UnaryExpr Expression_Linha;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression_Linha:
	//	BINARY_OP Expression Expression_Linha | ANY_OTHER;
	public Expression_LinhaElements getExpression_LinhaAccess() {
		return pExpression_Linha;
	}
	
	public ParserRule getExpression_LinhaRule() {
		return getExpression_LinhaAccess().getRule();
	}
	
	//UnaryExpr:
	//	PrimaryExpr | UNARY_OP UnaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//BINARY_OP:
	//	"||" | "&&" | REL_OP | ADD_OP | MUL_OP;
	public BINARY_OPElements getBINARY_OPAccess() {
		return pBINARY_OP;
	}
	
	public ParserRule getBINARY_OPRule() {
		return getBINARY_OPAccess().getRule();
	}
	
	//terminal REL_OP:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal ADD_OP:
	//	"+" | "-" | "|" | "^";
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal MUL_OP:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	//terminal UNARY_OP:
	//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
	public TerminalRule getUNARY_OPRule() {
		return tUNARY_OP;
	}
	
	//Conversion:
	//	Type "(" Expression ","? ")";
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//Statement:
	//	Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt
	//	| Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SimpleStmt:
	//	EmptyStmt | Expression SimpleStmtLinha | ShortVarDecl;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	//SimpleStmtLinha:
	//	"<-" Expression | ("++" | "--") | ("," Expression)* assign_op ExpressionList | ANY_OTHER;
	public SimpleStmtLinhaElements getSimpleStmtLinhaAccess() {
		return pSimpleStmtLinha;
	}
	
	public ParserRule getSimpleStmtLinhaRule() {
		return getSimpleStmtLinhaAccess().getRule();
	}
	
	//EmptyStmt:
	//	ANY_OTHER;
	public EmptyStmtElements getEmptyStmtAccess() {
		return pEmptyStmt;
	}
	
	public ParserRule getEmptyStmtRule() {
		return getEmptyStmtAccess().getRule();
	}
	
	//LabeledStmt:
	//	Label ":" Statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	//Label:
	//	IDENTIFIER;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	/// *ExpressionStmt: 
	//	Expression
	//;
	//
	//SendStmt:
	//	Channel "<-" Expression
	//;
	//
	//Channel:
	//	Expression
	//;
	//
	//IncDecStmt:
	//	Expression ( "++" | "--" )
	//;
	//
	//Assignment: 
	//	ExpressionList assign_op ExpressionList
	//;* / assign_op:
	//	(ADD_OP | MUL_OP)? "=";
	public Assign_opElements getAssign_opAccess() {
		return pAssign_op;
	}
	
	public ParserRule getAssign_opRule() {
		return getAssign_opAccess().getRule();
	}
	
	//IfStmt:
	//	IF Expression IfStmtLinha | IF ((EmptyStmt | ShortVarDecl) ";") Expression Block (ELSE (IfStmt | Block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//IfStmtLinha:
	//	SimpleStmtLinha ";" Expression Block (ELSE (IfStmt | Block))? | Block (ELSE (IfStmt | Block))?;
	public IfStmtLinhaElements getIfStmtLinhaAccess() {
		return pIfStmtLinha;
	}
	
	public ParserRule getIfStmtLinhaRule() {
		return getIfStmtLinhaAccess().getRule();
	}
	
	//SwitchStmt:
	//	SWITCH (=> SimpleStmt ";")? SwitchStmtLinha;
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	//SwitchStmtLinha:
	//	PrimaryExpr SwitchStmtLinhaLinha | ((UNARY_OP UnaryExpr) Expression_Linha)? "{" ExprCaseClause* "}" | (IDENTIFIER
	//	":=") PrimaryExpr "." "(" TYPEKEYWORD ")" "{" TypeCaseClause* "}";
	public SwitchStmtLinhaElements getSwitchStmtLinhaAccess() {
		return pSwitchStmtLinha;
	}
	
	public ParserRule getSwitchStmtLinhaRule() {
		return getSwitchStmtLinhaAccess().getRule();
	}
	
	//SwitchStmtLinhaLinha:
	//	"{" ExprCaseClause* "}" | "." "(" TYPEKEYWORD ")" "{" TypeCaseClause* "}";
	public SwitchStmtLinhaLinhaElements getSwitchStmtLinhaLinhaAccess() {
		return pSwitchStmtLinhaLinha;
	}
	
	public ParserRule getSwitchStmtLinhaLinhaRule() {
		return getSwitchStmtLinhaLinhaAccess().getRule();
	}
	
	/// *ExprSwitchStmt:
	//	SWITCH (SimpleStmt ";")? (Expression)? "{" ( ExprCaseClause )* "}"
	//;* / ExprCaseClause:
	//	ExprSwitchCase ":" StatementList;
	public ExprCaseClauseElements getExprCaseClauseAccess() {
		return pExprCaseClause;
	}
	
	public ParserRule getExprCaseClauseRule() {
		return getExprCaseClauseAccess().getRule();
	}
	
	//ExprSwitchCase:
	//	CASE ExpressionList | DEFAULT;
	public ExprSwitchCaseElements getExprSwitchCaseAccess() {
		return pExprSwitchCase;
	}
	
	public ParserRule getExprSwitchCaseRule() {
		return getExprSwitchCaseAccess().getRule();
	}
	
	/// *TypeSwitchStmt:
	//	SWITCH (SimpleStmt ";")? TypeSwitchGuard "{" (TypeCaseClause)* "}"	
	//;* / / *TypeSwitchGuard:
	//	(IDENTIFIER ":=")? PrimaryExpr "." "(" TYPEKEYWORD ")"
	//;* / TypeCaseClause:
	//	TypeSwitchCase ":" StatementList;
	public TypeCaseClauseElements getTypeCaseClauseAccess() {
		return pTypeCaseClause;
	}
	
	public ParserRule getTypeCaseClauseRule() {
		return getTypeCaseClauseAccess().getRule();
	}
	
	//TypeSwitchCase:
	//	CASE TypeList | DEFAULT;
	public TypeSwitchCaseElements getTypeSwitchCaseAccess() {
		return pTypeSwitchCase;
	}
	
	public ParserRule getTypeSwitchCaseRule() {
		return getTypeSwitchCaseAccess().getRule();
	}
	
	//TypeList:
	//	Type ("," Type)*;
	public TypeListElements getTypeListAccess() {
		return pTypeList;
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}
	
	//ForStmt:
	//	FOR (Expression ForStmtLinha | (EmptyStmt | ShortVarDecl) ";" Condition ";" PostStmt | IdentifierList ":=" RANGE
	//	Expression)? Block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//ForStmtLinha:
	//	ANY_OTHER | ("," Expression)* ForStmtLinhaLinha | ("<-" Expression | ("++" | "--") | ANY_OTHER) ";" Condition ";"
	//	PostStmt;
	public ForStmtLinhaElements getForStmtLinhaAccess() {
		return pForStmtLinha;
	}
	
	public ParserRule getForStmtLinhaRule() {
		return getForStmtLinhaAccess().getRule();
	}
	
	//ForStmtLinhaLinha:
	//	assign_op ExpressionList ";" Condition ";" PostStmt | "=" RANGE Expression;
	public ForStmtLinhaLinhaElements getForStmtLinhaLinhaAccess() {
		return pForStmtLinhaLinha;
	}
	
	public ParserRule getForStmtLinhaLinhaRule() {
		return getForStmtLinhaLinhaAccess().getRule();
	}
	
	//Condition:
	//	Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	/// *ForClause:
	//	( InitStmt ) ";" ( Condition ) ";" ( PostStmt )
	//;* / PostStmt:
	//	SimpleStmt;
	public PostStmtElements getPostStmtAccess() {
		return pPostStmt;
	}
	
	public ParserRule getPostStmtRule() {
		return getPostStmtAccess().getRule();
	}
	
	/// *InitStmt:
	//	SimpleStmt
	//;* / / *RangeClause:
	//	( ExpressionList "=" | IdentifierList ":=" ) RANGE Expression
	//;* / GoStmt:
	//	GO Expression;
	public GoStmtElements getGoStmtAccess() {
		return pGoStmt;
	}
	
	public ParserRule getGoStmtRule() {
		return getGoStmtAccess().getRule();
	}
	
	//SelectStmt:
	//	SELECT "{" CommClause* "}";
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//CommClause:
	//	CommCase ":" StatementList;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//CommCase:
	//	CASE (Expression CommCaseLinha) | DEFAULT;
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//CommCaseLinha:
	//	"<-" Expression | (("," Expression)* "=" | IdentifierList ":=") RecvExpr;
	public CommCaseLinhaElements getCommCaseLinhaAccess() {
		return pCommCaseLinha;
	}
	
	public ParserRule getCommCaseLinhaRule() {
		return getCommCaseLinhaAccess().getRule();
	}
	
	/// *RecvStmt:
	//	(ExpressionList "=" | IdentifierList ":=") RecvExpr
	//;* / RecvExpr:
	//	Expression;
	public RecvExprElements getRecvExprAccess() {
		return pRecvExpr;
	}
	
	public ParserRule getRecvExprRule() {
		return getRecvExprAccess().getRule();
	}
	
	//ReturnStmt:
	//	RETURN ExpressionList;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//BreakStmt:
	//	BREAK Label;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	//ContinueStmt:
	//	CONTINUE Label;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	//GotoStmt:
	//	GOTO Label;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	//FallthroughStmt:
	//	FALLTHROUGH;
	public FallthroughStmtElements getFallthroughStmtAccess() {
		return pFallthroughStmt;
	}
	
	public ParserRule getFallthroughStmtRule() {
		return getFallthroughStmtAccess().getRule();
	}
	
	//DeferStmt:
	//	DEFER Expression;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	//SourceFile:
	//	PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")*;
	public SourceFileElements getSourceFileAccess() {
		return pSourceFile;
	}
	
	public ParserRule getSourceFileRule() {
		return getSourceFileAccess().getRule();
	}
	
	//PackageClause:
	//	PACKAGE PackageName;
	public PackageClauseElements getPackageClauseAccess() {
		return pPackageClause;
	}
	
	public ParserRule getPackageClauseRule() {
		return getPackageClauseAccess().getRule();
	}
	
	//PackageName:
	//	IDENTIFIER;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//ImportDecl:
	//	IMPORT (ImportSpec | "(" (ImportSpec ";")* ")");
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//ImportSpec:
	//	("." | PackageName)? ImportPath;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//ImportPath:
	//	STRING_LIT;
	public ImportPathElements getImportPathAccess() {
		return pImportPath;
	}
	
	public ParserRule getImportPathRule() {
		return getImportPathAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
