/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Greeting*;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=Greeting*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Greeting");
		private final RuleCall cSourceFileParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Greeting:
		//	SourceFile;
		@Override public ParserRule getRule() { return rule; }
		
		//SourceFile
		public RuleCall getSourceFileParserRuleCall() { return cSourceFileParserRuleCall; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Type:
		//	TypeName | TypeLit | "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName | TypeLit | "(" Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_0() { return cTypeNameParserRuleCall_0; }
		
		//TypeLit
		public RuleCall getTypeLitParserRuleCall_1() { return cTypeLitParserRuleCall_1; }
		
		//"(" Type ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2_1() { return cTypeParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeNameLinhaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeName:
		//	IDENTIFIER TypeNameLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER TypeNameLinha
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//TypeNameLinha
		public RuleCall getTypeNameLinhaParserRuleCall_1() { return cTypeNameLinhaParserRuleCall_1; }
	}
	public class TypeNameLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeNameLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeNameLinha:
		//	"." IDENTIFIER | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." IDENTIFIER
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_1() { return cIDENTIFIERTerminalRuleCall_0_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class QualifiedIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.QualifiedIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedIdent:
		//	PackageName "." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageName "." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_0() { return cPackageNameParserRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PackageName");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PackageName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class TypeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointerTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInterfaceTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSliceTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMapTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cChannelTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//TypeLit:
		//	ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_0() { return cArrayTypeParserRuleCall_0; }
		
		//StructType
		public RuleCall getStructTypeParserRuleCall_1() { return cStructTypeParserRuleCall_1; }
		
		//PointerType
		public RuleCall getPointerTypeParserRuleCall_2() { return cPointerTypeParserRuleCall_2; }
		
		//FunctionType
		public RuleCall getFunctionTypeParserRuleCall_3() { return cFunctionTypeParserRuleCall_3; }
		
		//InterfaceType
		public RuleCall getInterfaceTypeParserRuleCall_4() { return cInterfaceTypeParserRuleCall_4; }
		
		//SliceType
		public RuleCall getSliceTypeParserRuleCall_5() { return cSliceTypeParserRuleCall_5; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_6() { return cMapTypeParserRuleCall_6; }
		
		//ChannelType
		public RuleCall getChannelTypeParserRuleCall_7() { return cChannelTypeParserRuleCall_7; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cElementTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ArrayType:
		//	"[" ArrayLength "]" ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" ArrayLength "]" ElementType
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_1() { return cArrayLengthParserRuleCall_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_3() { return cElementTypeParserRuleCall_3; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArrayLength");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArrayLength:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElementType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ElementType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class SliceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SliceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SliceType:
		//	"[" "]" ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" "]" ElementType
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_2() { return cElementTypeParserRuleCall_2; }
	}
	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cFieldDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StructType:
		//	"struct" "{" (FieldDecl ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" "{" (FieldDecl ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(FieldDecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//FieldDecl
		public RuleCall getFieldDeclParserRuleCall_2_0() { return cFieldDeclParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdentifierListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cEmbeddedFieldParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTagParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FieldDecl:
		//	(IdentifierList Type | EmbeddedField) Tag?;
		@Override public ParserRule getRule() { return rule; }
		
		//(IdentifierList Type | EmbeddedField) Tag?
		public Group getGroup() { return cGroup; }
		
		//(IdentifierList Type | EmbeddedField)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//IdentifierList Type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_0_0() { return cIdentifierListParserRuleCall_0_0_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0_0_1() { return cTypeParserRuleCall_0_0_1; }
		
		//EmbeddedField
		public RuleCall getEmbeddedFieldParserRuleCall_0_1() { return cEmbeddedFieldParserRuleCall_0_1; }
		
		//Tag?
		public RuleCall getTagParserRuleCall_1() { return cTagParserRuleCall_1; }
	}
	public class EmbeddedFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EmbeddedField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EmbeddedField:
		//	"*"? TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//"*"? TypeName
		public Group getGroup() { return cGroup; }
		
		//"*"?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Tag");
		private final RuleCall cSTRING_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Tag:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall() { return cSTRING_LITTerminalRuleCall; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBaseTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PointerType:
		//	"*" BaseType;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" BaseType
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//BaseType
		public RuleCall getBaseTypeParserRuleCall_1() { return cBaseTypeParserRuleCall_1; }
	}
	public class BaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BaseType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BaseType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FunctionType:
		//	"func" Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cResultParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Signature:
		//	Parameters Result?;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters Result?
		public Group getGroup() { return cGroup; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//Result?
		public RuleCall getResultParserRuleCall_1() { return cResultParserRuleCall_1; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Result:
		//	=> Parameters | Type;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Parameters | Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cParameterListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameters:
		//	"(" (ParameterList ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" (ParameterList ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ParameterList ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_1_0() { return cParameterListParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterDeclParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cParameterDeclParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ParameterList:
		//	ParameterDecl ("," ParameterDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterDecl ("," ParameterDecl)*
		public Group getGroup() { return cGroup; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_0() { return cParameterDeclParserRuleCall_0; }
		
		//("," ParameterDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_1_1() { return cParameterDeclParserRuleCall_1_1; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ParameterDecl:
		//	IdentifierList? "..."? Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList? "..."? Type
		public Group getGroup() { return cGroup; }
		
		//IdentifierList?
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMethodSpecParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InterfaceType:
		//	"interface" "{" (MethodSpec ";") "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"interface" "{" (MethodSpec ";") "}"
		public Group getGroup() { return cGroup; }
		
		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(MethodSpec ";")
		public Group getGroup_2() { return cGroup_2; }
		
		//MethodSpec
		public RuleCall getMethodSpecParserRuleCall_2_0() { return cMethodSpecParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MethodSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMethodNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cInterfaceTypeNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MethodSpec:
		//	MethodName Signature | InterfaceTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodName Signature | InterfaceTypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodName Signature
		public Group getGroup_0() { return cGroup_0; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_0_0() { return cMethodNameParserRuleCall_0_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_0_1() { return cSignatureParserRuleCall_0_1; }
		
		//InterfaceTypeName
		public RuleCall getInterfaceTypeNameParserRuleCall_1() { return cInterfaceTypeNameParserRuleCall_1; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodName");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class InterfaceTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InterfaceTypeName");
		private final RuleCall cTypeNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InterfaceTypeName:
		//	TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall() { return cTypeNameParserRuleCall; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cKeyTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cElementTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//MapType:
		//	"map" "[" KeyType "]" ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//"map" "[" KeyType "]" ElementType
		public Group getGroup() { return cGroup; }
		
		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//KeyType
		public RuleCall getKeyTypeParserRuleCall_2() { return cKeyTypeParserRuleCall_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_4() { return cElementTypeParserRuleCall_4; }
	}
	public class KeyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.KeyType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//KeyType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ChannelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cChanKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cChannelTypeLinhaParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cChanKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ChannelType:
		//	("chan" ChannelTypeLinha | "<-" "chan") ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//("chan" ChannelTypeLinha | "<-" "chan") ElementType
		public Group getGroup() { return cGroup; }
		
		//("chan" ChannelTypeLinha | "<-" "chan")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"chan" ChannelTypeLinha
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_0_0() { return cChanKeyword_0_0_0; }
		
		//ChannelTypeLinha
		public RuleCall getChannelTypeLinhaParserRuleCall_0_0_1() { return cChannelTypeLinhaParserRuleCall_0_0_1; }
		
		//"<-" "chan"
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_0() { return cLessThanSignHyphenMinusKeyword_0_1_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_1_1() { return cChanKeyword_0_1_1; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_1() { return cElementTypeParserRuleCall_1; }
	}
	public class ChannelTypeLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ChannelTypeLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ChannelTypeLinha:
		//	"<-" | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0() { return cLessThanSignHyphenMinusKeyword_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpression_LinhaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// *Expression: 
		//	UnaryExpr | Expression binary_op Expression
		//;* / Expression:
		//	UnaryExpr Expression_Linha;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr Expression_Linha
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//Expression_Linha
		public RuleCall getExpression_LinhaParserRuleCall_1() { return cExpression_LinhaParserRuleCall_1; }
	}
	public class Expression_LinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression_Linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinary_opParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpression_LinhaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Expression_Linha:
		//	binary_op Expression_Linha;
		@Override public ParserRule getRule() { return rule; }
		
		//binary_op Expression_Linha
		public Group getGroup() { return cGroup; }
		
		//binary_op
		public RuleCall getBinary_opParserRuleCall_0() { return cBinary_opParserRuleCall_0; }
		
		//Expression_Linha
		public RuleCall getExpression_LinhaParserRuleCall_1() { return cExpression_LinhaParserRuleCall_1; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUNARY_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//UnaryExpr:
		//	PrimaryExpr | UNARY_OP UnaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr | UNARY_OP UnaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0() { return cPrimaryExprParserRuleCall_0; }
		
		//UNARY_OP UnaryExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//UNARY_OP
		public RuleCall getUNARY_OPTerminalRuleCall_1_0() { return cUNARY_OPTerminalRuleCall_1_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_1_1() { return cUnaryExprParserRuleCall_1_1; }
	}
	public class Binary_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.binary_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cREL_OPTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cADD_OPTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMUL_OPTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//binary_op:
		//	"||" | "&&" | REL_OP | ADD_OP | MUL_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//"||" | "&&" | REL_OP | ADD_OP | MUL_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
		
		//REL_OP
		public RuleCall getREL_OPTerminalRuleCall_2() { return cREL_OPTerminalRuleCall_2; }
		
		//ADD_OP
		public RuleCall getADD_OPTerminalRuleCall_3() { return cADD_OPTerminalRuleCall_3; }
		
		//MUL_OP
		public RuleCall getMUL_OPTerminalRuleCall_4() { return cMUL_OPTerminalRuleCall_4; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOperandParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryExpr_LinhaParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cPrimaryExprFatoracaoParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExpr_LinhaParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//PrimaryExpr:
		//	Operand PrimaryExpr_Linha | Type PrimaryExprFatoracao PrimaryExpr_Linha;
		@Override public ParserRule getRule() { return rule; }
		
		//Operand PrimaryExpr_Linha | Type PrimaryExprFatoracao PrimaryExpr_Linha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Operand PrimaryExpr_Linha
		public Group getGroup_0() { return cGroup_0; }
		
		//Operand
		public RuleCall getOperandParserRuleCall_0_0() { return cOperandParserRuleCall_0_0; }
		
		//PrimaryExpr_Linha
		public RuleCall getPrimaryExpr_LinhaParserRuleCall_0_1() { return cPrimaryExpr_LinhaParserRuleCall_0_1; }
		
		//Type PrimaryExprFatoracao PrimaryExpr_Linha
		public Group getGroup_1() { return cGroup_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }
		
		//PrimaryExprFatoracao
		public RuleCall getPrimaryExprFatoracaoParserRuleCall_1_1() { return cPrimaryExprFatoracaoParserRuleCall_1_1; }
		
		//PrimaryExpr_Linha
		public RuleCall getPrimaryExpr_LinhaParserRuleCall_1_2() { return cPrimaryExpr_LinhaParserRuleCall_1_2; }
	}
	public class PrimaryExprFatoracaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprFatoracao");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cMethodNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PrimaryExprFatoracao:
		//	"(" Expression ","? ")" | "." MethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Expression ","? ")" | "." MethodName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Expression ","? ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//","?
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//"." MethodName
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_1_1() { return cMethodNameParserRuleCall_1_1; }
	}
	public class PrimaryExpr_LinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr_Linha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryExprFatoradoParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExpr_LinhaParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExpr_Fatorado1ParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cPrimaryExpr_LinhaParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cSliceLinhaParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cArgumentsParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cPrimaryExpr_LinhaParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimaryExpr_Linha:
		//	"." PrimaryExprFatorado PrimaryExpr_Linha
		//	| "[" Expression PrimaryExpr_Fatorado1 PrimaryExpr_Linha
		//	| "[" ":" SliceLinha
		//	| Arguments PrimaryExpr_Linha
		//	| ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." PrimaryExprFatorado PrimaryExpr_Linha | "[" Expression PrimaryExpr_Fatorado1 PrimaryExpr_Linha | "[" ":" SliceLinha
		//| Arguments PrimaryExpr_Linha | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." PrimaryExprFatorado PrimaryExpr_Linha
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//PrimaryExprFatorado
		public RuleCall getPrimaryExprFatoradoParserRuleCall_0_1() { return cPrimaryExprFatoradoParserRuleCall_0_1; }
		
		//PrimaryExpr_Linha
		public RuleCall getPrimaryExpr_LinhaParserRuleCall_0_2() { return cPrimaryExpr_LinhaParserRuleCall_0_2; }
		
		//"[" Expression PrimaryExpr_Fatorado1 PrimaryExpr_Linha
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//PrimaryExpr_Fatorado1
		public RuleCall getPrimaryExpr_Fatorado1ParserRuleCall_1_2() { return cPrimaryExpr_Fatorado1ParserRuleCall_1_2; }
		
		//PrimaryExpr_Linha
		public RuleCall getPrimaryExpr_LinhaParserRuleCall_1_3() { return cPrimaryExpr_LinhaParserRuleCall_1_3; }
		
		//"[" ":" SliceLinha
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//SliceLinha
		public RuleCall getSliceLinhaParserRuleCall_2_2() { return cSliceLinhaParserRuleCall_2_2; }
		
		//Arguments PrimaryExpr_Linha
		public Group getGroup_3() { return cGroup_3; }
		
		//Arguments
		public RuleCall getArgumentsParserRuleCall_3_0() { return cArgumentsParserRuleCall_3_0; }
		
		//PrimaryExpr_Linha
		public RuleCall getPrimaryExpr_LinhaParserRuleCall_3_1() { return cPrimaryExpr_LinhaParserRuleCall_3_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_4() { return cANY_OTHERTerminalRuleCall_4; }
	}
	public class PrimaryExprFatoradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprFatorado");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExprFatorado:
		//	IDENTIFIER | "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | "(" Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//"(" Type ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class PrimaryExpr_Fatorado1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr_Fatorado1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSliceLinhaParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PrimaryExpr_Fatorado1:
		//	"]" | ":" SliceLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//"]" | ":" SliceLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0() { return cRightSquareBracketKeyword_0; }
		
		//":" SliceLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//SliceLinha
		public RuleCall getSliceLinhaParserRuleCall_1_1() { return cSliceLinhaParserRuleCall_1_1; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Selector:
		//	"." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Index:
		//	"[" Expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" Expression "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSliceLinhaParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Slice:
		//	"[" Expression? ":" SliceLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" Expression? ":" SliceLinha
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//Expression?
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//SliceLinha
		public RuleCall getSliceLinhaParserRuleCall_3() { return cSliceLinhaParserRuleCall_3; }
	}
	public class SliceLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SliceLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SliceLinha:
		//	":" Expression? "]" | Expression ":" Expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//":" Expression? "]" | Expression ":" Expression "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//":" Expression? "]"
		public Group getGroup_0() { return cGroup_0; }
		
		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }
		
		//Expression?
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//Expression ":" Expression "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_2() { return cExpressionParserRuleCall_1_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class TypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeAssertion:
		//	"." "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"." "(" Type ")"
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_1_1_1 = (RuleCall)cGroup_1_0_1_1.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Arguments:
		//	"(" ((ExpressionList | Type ("," ExpressionList)?) "..."? ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" ((ExpressionList | Type ("," ExpressionList)?) "..."? ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//((ExpressionList | Type ("," ExpressionList)?) "..."? ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(ExpressionList | Type ("," ExpressionList)?)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_0_0() { return cExpressionListParserRuleCall_1_0_0; }
		
		//Type ("," ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0_1_0() { return cTypeParserRuleCall_1_0_1_0; }
		
		//("," ExpressionList)?
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_0_1_1_1() { return cExpressionListParserRuleCall_1_0_1_1_1; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
		
		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ExpressionList:
		//	Expression ("," Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ("," Expression)*
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//("," Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IdentifierList:
		//	IDENTIFIER ("," IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER ("," IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" StatementList "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" StatementList "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StatementList:
		//	(Statement ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Statement ";")*
		public Group getGroup() { return cGroup; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabeledStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGoStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReturnStmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBreakStmtParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cContinueStmtParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGotoStmtParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFallthroughStmtParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBlockParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIfStmtParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSwitchStmtParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSelectStmtParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cForStmtParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDeferStmtParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//Statement:
		//	Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt
		//	| Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt |
		//Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//LabeledStmt
		public RuleCall getLabeledStmtParserRuleCall_1() { return cLabeledStmtParserRuleCall_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_2() { return cSimpleStmtParserRuleCall_2; }
		
		//GoStmt
		public RuleCall getGoStmtParserRuleCall_3() { return cGoStmtParserRuleCall_3; }
		
		//ReturnStmt
		public RuleCall getReturnStmtParserRuleCall_4() { return cReturnStmtParserRuleCall_4; }
		
		//BreakStmt
		public RuleCall getBreakStmtParserRuleCall_5() { return cBreakStmtParserRuleCall_5; }
		
		//ContinueStmt
		public RuleCall getContinueStmtParserRuleCall_6() { return cContinueStmtParserRuleCall_6; }
		
		//GotoStmt
		public RuleCall getGotoStmtParserRuleCall_7() { return cGotoStmtParserRuleCall_7; }
		
		//FallthroughStmt
		public RuleCall getFallthroughStmtParserRuleCall_8() { return cFallthroughStmtParserRuleCall_8; }
		
		//Block
		public RuleCall getBlockParserRuleCall_9() { return cBlockParserRuleCall_9; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_10() { return cIfStmtParserRuleCall_10; }
		
		//SwitchStmt
		public RuleCall getSwitchStmtParserRuleCall_11() { return cSwitchStmtParserRuleCall_11; }
		
		//SelectStmt
		public RuleCall getSelectStmtParserRuleCall_12() { return cSelectStmtParserRuleCall_12; }
		
		//ForStmt
		public RuleCall getForStmtParserRuleCall_13() { return cForStmtParserRuleCall_13; }
		
		//DeferStmt
		public RuleCall getDeferStmtParserRuleCall_14() { return cDeferStmtParserRuleCall_14; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DeferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DeferStmt:
		//	"defer" Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"defer" Expression
		public Group getGroup() { return cGroup; }
		
		//"defer"
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cForStmtLinhaParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ForStmt:
		//	"for" (Expression ForStmtLinha)? Block;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" (Expression ForStmtLinha)? Block
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(Expression ForStmtLinha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }
		
		//ForStmtLinha
		public RuleCall getForStmtLinhaParserRuleCall_1_1() { return cForStmtLinhaParserRuleCall_1_1; }
		
		//Block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }
	}
	public class ForStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cSimpleStmtLinhaParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_0_1_0 = (Group)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_0_1_0_0 = (RuleCall)cGroup_0_0_1_0.eContents().get(0);
		private final Group cGroup_0_0_1_0_1 = (Group)cGroup_0_0_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_0_1_0_1_0 = (Keyword)cGroup_0_0_1_0_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_0_1_0_1_1 = (RuleCall)cGroup_0_0_1_0_1.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Group cGroup_0_0_1_2 = (Group)cGroup_0_0_1.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_0_0_1_2_0 = (RuleCall)cGroup_0_0_1_2.eContents().get(0);
		private final Group cGroup_0_0_1_2_1 = (Group)cGroup_0_0_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_0_1_2_1_0 = (Keyword)cGroup_0_0_1_2_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0_1_2_1_1 = (RuleCall)cGroup_0_0_1_2_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Group cGroup_0_4_0 = (Group)cAlternatives_0_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_4_0_0 = (RuleCall)cGroup_0_4_0.eContents().get(0);
		private final RuleCall cSimpleStmtLinhaParserRuleCall_0_4_0_1 = (RuleCall)cGroup_0_4_0.eContents().get(1);
		private final Group cGroup_0_4_1 = (Group)cAlternatives_0_4.eContents().get(1);
		private final Group cGroup_0_4_1_0 = (Group)cGroup_0_4_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_4_1_0_0 = (RuleCall)cGroup_0_4_1_0.eContents().get(0);
		private final Group cGroup_0_4_1_0_1 = (Group)cGroup_0_4_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_0_1_0 = (Keyword)cGroup_0_4_1_0_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_4_1_0_1_1 = (RuleCall)cGroup_0_4_1_0_1.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_4_1_1 = (Keyword)cGroup_0_4_1.eContents().get(1);
		private final Group cGroup_0_4_1_2 = (Group)cGroup_0_4_1.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_0_4_1_2_0 = (RuleCall)cGroup_0_4_1_2.eContents().get(0);
		private final Group cGroup_0_4_1_2_1 = (Group)cGroup_0_4_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_2_1_0 = (Keyword)cGroup_0_4_1_2_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_4_1_2_1_1 = (RuleCall)cGroup_0_4_1_2_1.eContents().get(1);
		private final Group cGroup_0_4_2 = (Group)cAlternatives_0_4.eContents().get(2);
		private final Group cGroup_0_4_2_0 = (Group)cGroup_0_4_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_4_2_0_0 = (Keyword)cGroup_0_4_2_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_4_2_0_1 = (RuleCall)cGroup_0_4_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_4_2_1 = (Keyword)cGroup_0_4_2.eContents().get(1);
		private final Group cGroup_0_4_3 = (Group)cAlternatives_0_4.eContents().get(3);
		private final RuleCall cIdentifierListParserRuleCall_0_4_3_0 = (RuleCall)cGroup_0_4_3.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_4_3_1 = (Keyword)cGroup_0_4_3.eContents().get(1);
		private final Keyword cRangeKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final RuleCall cExpressionParserRuleCall_0_6 = (RuleCall)cGroup_0.eContents().get(6);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ForStmtLinha:
		//	(SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*)) ";" Condition ";" (Expression
		//	SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*) | ("," Expression)* "=" |
		//	IdentifierList ":=") "range" Expression
		//	| ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//(SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*)) ";" Condition ";" (Expression
		//SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*) | ("," Expression)* "=" |
		//IdentifierList ":=") "range" Expression | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*)) ";" Condition ";" (Expression
		//SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*) | ("," Expression)* "=" |
		//IdentifierList ":=") "range" Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//(SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*))
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//SimpleStmtLinha
		public RuleCall getSimpleStmtLinhaParserRuleCall_0_0_0() { return cSimpleStmtLinhaParserRuleCall_0_0_0; }
		
		//(IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*)
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//(IDENTIFIER ("," IDENTIFIER)*)
		public Group getGroup_0_0_1_0() { return cGroup_0_0_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_0_1_0_0() { return cIDENTIFIERTerminalRuleCall_0_0_1_0_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_0_0_1_0_1() { return cGroup_0_0_1_0_1; }
		
		//","
		public Keyword getCommaKeyword_0_0_1_0_1_0() { return cCommaKeyword_0_0_1_0_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_0_1_0_1_1() { return cIDENTIFIERTerminalRuleCall_0_0_1_0_1_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_0_1_1() { return cColonEqualsSignKeyword_0_0_1_1; }
		
		//(Expression ("," Expression)*)
		public Group getGroup_0_0_1_2() { return cGroup_0_0_1_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_0_1_2_0() { return cExpressionParserRuleCall_0_0_1_2_0; }
		
		//("," Expression)*
		public Group getGroup_0_0_1_2_1() { return cGroup_0_0_1_2_1; }
		
		//","
		public Keyword getCommaKeyword_0_0_1_2_1_0() { return cCommaKeyword_0_0_1_2_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_0_1_2_1_1() { return cExpressionParserRuleCall_0_0_1_2_1_1; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_0_2() { return cConditionParserRuleCall_0_2; }
		
		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }
		
		//(Expression SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*) | ("," Expression)* "="
		//| IdentifierList ":=")
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }
		
		//Expression SimpleStmtLinha
		public Group getGroup_0_4_0() { return cGroup_0_4_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_4_0_0() { return cExpressionParserRuleCall_0_4_0_0; }
		
		//SimpleStmtLinha
		public RuleCall getSimpleStmtLinhaParserRuleCall_0_4_0_1() { return cSimpleStmtLinhaParserRuleCall_0_4_0_1; }
		
		//(IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*)
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//(IDENTIFIER ("," IDENTIFIER)*)
		public Group getGroup_0_4_1_0() { return cGroup_0_4_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_4_1_0_0() { return cIDENTIFIERTerminalRuleCall_0_4_1_0_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_0_4_1_0_1() { return cGroup_0_4_1_0_1; }
		
		//","
		public Keyword getCommaKeyword_0_4_1_0_1_0() { return cCommaKeyword_0_4_1_0_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_4_1_0_1_1() { return cIDENTIFIERTerminalRuleCall_0_4_1_0_1_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_4_1_1() { return cColonEqualsSignKeyword_0_4_1_1; }
		
		//(Expression ("," Expression)*)
		public Group getGroup_0_4_1_2() { return cGroup_0_4_1_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_4_1_2_0() { return cExpressionParserRuleCall_0_4_1_2_0; }
		
		//("," Expression)*
		public Group getGroup_0_4_1_2_1() { return cGroup_0_4_1_2_1; }
		
		//","
		public Keyword getCommaKeyword_0_4_1_2_1_0() { return cCommaKeyword_0_4_1_2_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_4_1_2_1_1() { return cExpressionParserRuleCall_0_4_1_2_1_1; }
		
		//("," Expression)* "="
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }
		
		//("," Expression)*
		public Group getGroup_0_4_2_0() { return cGroup_0_4_2_0; }
		
		//","
		public Keyword getCommaKeyword_0_4_2_0_0() { return cCommaKeyword_0_4_2_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_4_2_0_1() { return cExpressionParserRuleCall_0_4_2_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_4_2_1() { return cEqualsSignKeyword_0_4_2_1; }
		
		//IdentifierList ":="
		public Group getGroup_0_4_3() { return cGroup_0_4_3; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_4_3_0() { return cIdentifierListParserRuleCall_0_4_3_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_4_3_1() { return cColonEqualsSignKeyword_0_4_3_1; }
		
		//"range"
		public Keyword getRangeKeyword_0_5() { return cRangeKeyword_0_5; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_6() { return cExpressionParserRuleCall_0_6; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RangeClause:
		//	(ExpressionList "=" | IdentifierList ":=") "range" Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpressionList "=" | IdentifierList ":=") "range" Expression
		public Group getGroup() { return cGroup; }
		
		//(ExpressionList "=" | IdentifierList ":=")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExpressionList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_0_0() { return cExpressionListParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//IdentifierList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_1_0() { return cIdentifierListParserRuleCall_0_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInitStmtParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cPostStmtParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ForClause:
		//	InitStmt ";" Condition ";" PostStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//InitStmt ";" Condition ";" PostStmt
		public Group getGroup() { return cGroup; }
		
		//InitStmt
		public RuleCall getInitStmtParserRuleCall_0() { return cInitStmtParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_2() { return cConditionParserRuleCall_2; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//PostStmt
		public RuleCall getPostStmtParserRuleCall_4() { return cPostStmtParserRuleCall_4; }
	}
	public class PostStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PostStmt");
		private final RuleCall cSimpleStmtParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PostStmt:
		//	SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall() { return cSimpleStmtParserRuleCall; }
	}
	public class InitStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InitStmt");
		private final RuleCall cSimpleStmtParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InitStmt:
		//	SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall() { return cSimpleStmtParserRuleCall; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SelectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCommClauseParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectStmt:
		//	"select" "{" CommClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"select" "{" CommClause* "}"
		public Group getGroup() { return cGroup; }
		
		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//CommClause*
		public RuleCall getCommClauseParserRuleCall_2() { return cCommClauseParserRuleCall_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CommClause:
		//	CommCase ":" StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//CommCase ":" StatementList
		public Group getGroup() { return cGroup; }
		
		//CommCase
		public RuleCall getCommCaseParserRuleCall_0() { return cCommCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cCommCaseLinhaParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CommCase:
		//	"case" (Expression CommCaseLinha) | "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" (Expression CommCaseLinha) | "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" (Expression CommCaseLinha)
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//(Expression CommCaseLinha)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1_0() { return cExpressionParserRuleCall_0_1_0; }
		
		//CommCaseLinha
		public RuleCall getCommCaseLinhaParserRuleCall_0_1_1() { return cCommCaseLinhaParserRuleCall_0_1_1; }
		
		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class CommCaseLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommCaseLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0_0_0 = (Keyword)cGroup_1_0_0_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_0_0_0_1 = (RuleCall)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cRecvExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CommCaseLinha:
		//	"<-" Expression | (("," Expression)* "=" | IdentifierList ":=") RecvExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" Expression | (("," Expression)* "=" | IdentifierList ":=") RecvExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-" Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_0() { return cLessThanSignHyphenMinusKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//(("," Expression)* "=" | IdentifierList ":=") RecvExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//(("," Expression)* "=" | IdentifierList ":=")
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//("," Expression)* "="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//("," Expression)*
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//","
		public Keyword getCommaKeyword_1_0_0_0_0() { return cCommaKeyword_1_0_0_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0_0_0_1() { return cExpressionParserRuleCall_1_0_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }
		
		//IdentifierList ":="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_1_0_1_0() { return cIdentifierListParserRuleCall_1_0_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_0_1_1() { return cColonEqualsSignKeyword_1_0_1_1; }
		
		//RecvExpr
		public RuleCall getRecvExprParserRuleCall_1_1() { return cRecvExprParserRuleCall_1_1; }
	}
	public class RecvStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RecvStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final RuleCall cRecvExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RecvStmt:
		//	(ExpressionList "=" | IdentifierList ":=") RecvExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpressionList "=" | IdentifierList ":=") RecvExpr
		public Group getGroup() { return cGroup; }
		
		//(ExpressionList "=" | IdentifierList ":=")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExpressionList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_0_0() { return cExpressionListParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//IdentifierList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_1_0() { return cIdentifierListParserRuleCall_0_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//RecvExpr
		public RuleCall getRecvExprParserRuleCall_1() { return cRecvExprParserRuleCall_1; }
	}
	public class RecvExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RecvExpr");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RecvExpr:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cSwitchStmtLinhaParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SwitchStmt:
		//	"switch" (SimpleStmt ";") SwitchStmtLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" (SimpleStmt ";") SwitchStmtLinha
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(SimpleStmt ";")
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//SwitchStmtLinha
		public RuleCall getSwitchStmtLinhaParserRuleCall_2() { return cSwitchStmtLinhaParserRuleCall_2; }
	}
	public class SwitchStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SwitchStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExprCaseClauseParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTypeSwitchGuardParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cTypeCaseClauseParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SwitchStmtLinha:
		//	Expression "{" ExprCaseClause* "}" | TypeSwitchGuard "{" TypeCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//Expression "{" ExprCaseClause* "}" | TypeSwitchGuard "{" TypeCaseClause* "}"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression "{" ExprCaseClause* "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_0() { return cExpressionParserRuleCall_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//ExprCaseClause*
		public RuleCall getExprCaseClauseParserRuleCall_0_2() { return cExprCaseClauseParserRuleCall_0_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//TypeSwitchGuard "{" TypeCaseClause* "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//TypeSwitchGuard
		public RuleCall getTypeSwitchGuardParserRuleCall_1_0() { return cTypeSwitchGuardParserRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//TypeCaseClause*
		public RuleCall getTypeCaseClauseParserRuleCall_1_2() { return cTypeCaseClauseParserRuleCall_1_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class TypeSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cTypeSwitchGuardParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeCaseClauseParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeSwitchStmt:
		//	"switch" (SimpleStmt ";") TypeSwitchGuard "{" TypeCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" (SimpleStmt ";") TypeSwitchGuard "{" TypeCaseClause* "}"
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(SimpleStmt ";")
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//TypeSwitchGuard
		public RuleCall getTypeSwitchGuardParserRuleCall_2() { return cTypeSwitchGuardParserRuleCall_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//TypeCaseClause*
		public RuleCall getTypeCaseClauseParserRuleCall_4() { return cTypeCaseClauseParserRuleCall_4; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TypeCaseClause:
		//	TypeSwitchCase ":" StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSwitchCase ":" StatementList
		public Group getGroup() { return cGroup; }
		
		//TypeSwitchCase
		public RuleCall getTypeSwitchCaseParserRuleCall_0() { return cTypeSwitchCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class TypeSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTypeListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TypeSwitchCase:
		//	"case" TypeList | "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" TypeList | "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" TypeList
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//TypeList
		public RuleCall getTypeListParserRuleCall_0_1() { return cTypeListParserRuleCall_0_1; }
		
		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TypeList:
		//	Type ("," Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Type ("," Type)*
		public Group getGroup() { return cGroup; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//("," Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }
	}
	public class TypeSwitchGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSwitchGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeSwitchGuard:
		//	(IDENTIFIER ":=") PrimaryExpr "." "(" "type" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//(IDENTIFIER ":=") PrimaryExpr "." "(" "type" ")"
		public Group getGroup() { return cGroup; }
		
		//(IDENTIFIER ":=")
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_0() { return cIDENTIFIERTerminalRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_1() { return cPrimaryExprParserRuleCall_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//"type"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ExprSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cExprCaseClauseParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExprSwitchStmt:
		//	"switch" (SimpleStmt ";") Expression "{" ExprCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" (SimpleStmt ";") Expression "{" ExprCaseClause* "}"
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(SimpleStmt ";")
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//ExprCaseClause*
		public RuleCall getExprCaseClauseParserRuleCall_4() { return cExprCaseClauseParserRuleCall_4; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExprCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ExprCaseClause:
		//	ExprSwitchCase ":" StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSwitchCase ":" StatementList
		public Group getGroup() { return cGroup; }
		
		//ExprSwitchCase
		public RuleCall getExprSwitchCaseParserRuleCall_0() { return cExprSwitchCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class ExprSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExprSwitchCase:
		//	"case" ExpressionList | "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" ExpressionList | "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" ExpressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_1() { return cExpressionListParserRuleCall_0_1; }
		
		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_4_1_0 = (RuleCall)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_4_1_1 = (RuleCall)cAlternatives_4_1.eContents().get(1);
		
		//IfStmt:
		//	"if" (SimpleStmt ";") Expression Block ("else" (IfStmt | Block));
		@Override public ParserRule getRule() { return rule; }
		
		//"if" (SimpleStmt ";") Expression Block ("else" (IfStmt | Block))
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(SimpleStmt ";")
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//Block
		public RuleCall getBlockParserRuleCall_3() { return cBlockParserRuleCall_3; }
		
		//("else" (IfStmt | Block))
		public Group getGroup_4() { return cGroup_4; }
		
		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//(IfStmt | Block)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_4_1_0() { return cIfStmtParserRuleCall_4_1_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_4_1_1() { return cBlockParserRuleCall_4_1_1; }
	}
	public class FallthroughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FallthroughStmt");
		private final Keyword cFallthroughKeyword = (Keyword)rule.eContents().get(1);
		
		//FallthroughStmt:
		//	"fallthrough";
		@Override public ParserRule getRule() { return rule; }
		
		//"fallthrough"
		public Keyword getFallthroughKeyword() { return cFallthroughKeyword; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GotoStmt:
		//	"goto" Label;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" Label
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ContinueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ContinueStmt:
		//	"continue" Label;
		@Override public ParserRule getRule() { return rule; }
		
		//"continue" Label
		public Group getGroup() { return cGroup; }
		
		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BreakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BreakStmt:
		//	"break" Label;
		@Override public ParserRule getRule() { return rule; }
		
		//"break" Label
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReturnStmt:
		//	"return" ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//"return" ExpressionList
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1() { return cExpressionListParserRuleCall_1; }
	}
	public class GoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GoStmt:
		//	"go" Label;
		@Override public ParserRule getRule() { return rule; }
		
		//"go" Label
		public Group getGroup() { return cGroup; }
		
		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSimpleStmtLinhaParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_2_1_1 = (RuleCall)cGroup_1_2_1.eContents().get(1);
		
		//SimpleStmt:
		//	Expression SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*);
		@Override public ParserRule getRule() { return rule; }
		
		//Expression SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression SimpleStmtLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_0() { return cExpressionParserRuleCall_0_0; }
		
		//SimpleStmtLinha
		public RuleCall getSimpleStmtLinhaParserRuleCall_0_1() { return cSimpleStmtLinhaParserRuleCall_0_1; }
		
		//(IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//(IDENTIFIER ("," IDENTIFIER)*)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_0_0() { return cIDENTIFIERTerminalRuleCall_1_0_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//","
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_0_1_1() { return cIDENTIFIERTerminalRuleCall_1_0_1_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//(Expression ("," Expression)*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_2_0() { return cExpressionParserRuleCall_1_2_0; }
		
		//("," Expression)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//","
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_2_1_1() { return cExpressionParserRuleCall_1_2_1_1; }
	}
	public class SimpleStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final RuleCall cAssign_opParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_2_1_1 = (RuleCall)cGroup_2_2_1.eContents().get(1);
		
		//SimpleStmtLinha:
		//	"<-" Expression | ("++" | "--") | ("," Expression)* assign_op (Expression ("," Expression)*);
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" Expression | ("++" | "--") | ("," Expression)* assign_op (Expression ("," Expression)*)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-" Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_0() { return cLessThanSignHyphenMinusKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//("++" | "--")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
		
		//("," Expression)* assign_op (Expression ("," Expression)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//("," Expression)*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//","
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_0_1() { return cExpressionParserRuleCall_2_0_1; }
		
		//assign_op
		public RuleCall getAssign_opParserRuleCall_2_1() { return cAssign_opParserRuleCall_2_1; }
		
		//(Expression ("," Expression)*)
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_2_0() { return cExpressionParserRuleCall_2_2_0; }
		
		//("," Expression)*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_2_1_1() { return cExpressionParserRuleCall_2_2_1_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAssign_opParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Assignment:
		//	ExpressionList assign_op ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionList assign_op ExpressionList
		public Group getGroup() { return cGroup; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0() { return cExpressionListParserRuleCall_0; }
		
		//assign_op
		public RuleCall getAssign_opParserRuleCall_1() { return cAssign_opParserRuleCall_1; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_2() { return cExpressionListParserRuleCall_2; }
	}
	public class Assign_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assign_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cADD_OPTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMUL_OPTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//assign_op:
		//	(ADD_OP | MUL_OP) "=";
		@Override public ParserRule getRule() { return rule; }
		
		//(ADD_OP | MUL_OP) "="
		public Group getGroup() { return cGroup; }
		
		//(ADD_OP | MUL_OP)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ADD_OP
		public RuleCall getADD_OPTerminalRuleCall_0_0() { return cADD_OPTerminalRuleCall_0_0; }
		
		//MUL_OP
		public RuleCall getMUL_OPTerminalRuleCall_0_1() { return cMUL_OPTerminalRuleCall_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class IncDecStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IncDecStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//IncDecStmt:
		//	Expression ("++" | "--");
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ("++" | "--")
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//("++" | "--")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	public class SendStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SendStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cChannelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SendStmt:
		//	Channel "<-" Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Channel "<-" Expression
		public Group getGroup() { return cGroup; }
		
		//Channel
		public RuleCall getChannelParserRuleCall_0() { return cChannelParserRuleCall_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Channel");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Channel:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ExpressionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExpressionStmt");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpressionStmt:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LabeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//LabeledStmt:
		//	Label ":" Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//Label ":" Statement
		public Group getGroup() { return cGroup; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_2() { return cStatementParserRuleCall_2; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Label");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Label:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declaration:
		//	ConstDecl | TypeDecl | VarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstDecl | TypeDecl | VarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstDecl
		public RuleCall getConstDeclParserRuleCall_0() { return cConstDeclParserRuleCall_0; }
		
		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_1() { return cTypeDeclParserRuleCall_1; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_2() { return cVarDeclParserRuleCall_2; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TopLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TopLevelDecl:
		//	Declaration | FunctionDecl | MethodDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | FunctionDecl | MethodDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//FunctionDecl
		public RuleCall getFunctionDeclParserRuleCall_1() { return cFunctionDeclParserRuleCall_1; }
		
		//MethodDecl
		public RuleCall getMethodDeclParserRuleCall_2() { return cMethodDeclParserRuleCall_2; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConstDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cConstSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ConstDecl:
		//	"const" (ConstSpec | "(" (ConstSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"const" (ConstSpec | "(" (ConstSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//(ConstSpec | "(" (ConstSpec ";")* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ConstSpec
		public RuleCall getConstSpecParserRuleCall_1_0() { return cConstSpecParserRuleCall_1_0; }
		
		//"(" (ConstSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(ConstSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ConstSpec
		public RuleCall getConstSpecParserRuleCall_1_1_1_0() { return cConstSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ConstSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConstSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ConstSpec:
		//	IdentifierList (Type? "=" ExpressionList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList (Type? "=" ExpressionList)?
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//(Type? "=" ExpressionList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//Type?
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_2() { return cExpressionListParserRuleCall_1_2; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//TypeDecl:
		//	"type" (TypeSpec | "(" (TypeSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"type" (TypeSpec | "(" (TypeSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//(TypeSpec | "(" (TypeSpec ";")* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TypeSpec
		public RuleCall getTypeSpecParserRuleCall_1_0() { return cTypeSpecParserRuleCall_1_0; }
		
		//"(" (TypeSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(TypeSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//TypeSpec
		public RuleCall getTypeSpecParserRuleCall_1_1_1_0() { return cTypeSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpec:
		//	AliasDecl | TypeDef;
		@Override public ParserRule getRule() { return rule; }
		
		//AliasDecl | TypeDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AliasDecl
		public RuleCall getAliasDeclParserRuleCall_0() { return cAliasDeclParserRuleCall_0; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_1() { return cTypeDefParserRuleCall_1; }
	}
	public class AliasDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AliasDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AliasDecl:
		//	IDENTIFIER "=" Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER "=" Type
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeDef:
		//	IDENTIFIER Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER Type
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVarSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cVarSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//VarDecl:
		//	"var" (VarSpec | "(" (VarSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"var" (VarSpec | "(" (VarSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//(VarSpec | "(" (VarSpec ";")* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//VarSpec
		public RuleCall getVarSpecParserRuleCall_1_0() { return cVarSpecParserRuleCall_1_0; }
		
		//"(" (VarSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(VarSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//VarSpec
		public RuleCall getVarSpecParserRuleCall_1_1_1_0() { return cVarSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//VarSpec:
		//	IdentifierList (Type ("=" ExpressionList)? | "=" ExpressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList (Type ("=" ExpressionList)? | "=" ExpressionList)
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//(Type ("=" ExpressionList)? | "=" ExpressionList)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Type ("=" ExpressionList)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0_0() { return cTypeParserRuleCall_1_0_0; }
		
		//("=" ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_0_1_1() { return cExpressionListParserRuleCall_1_0_1_1; }
		
		//"=" ExpressionList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_1_1() { return cExpressionListParserRuleCall_1_1_1; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ShortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ShortVarDecl:
		//	IdentifierList ":=" ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList ":=" ExpressionList
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_2() { return cExpressionListParserRuleCall_2; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSignatureParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FunctionDecl:
		//	"func" FunctionName Signature FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" FunctionName Signature FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_1() { return cFunctionNameParserRuleCall_1; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_2() { return cSignatureParserRuleCall_2; }
		
		//FunctionBody?
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionName");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionBody");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionBody:
		//	Block;
		@Override public ParserRule getRule() { return rule; }
		
		//Block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReceiverParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cMethodNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSignatureParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cFunctionBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//MethodDecl:
		//	"func" Receiver MethodName Signature FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Receiver MethodName Signature FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Receiver
		public RuleCall getReceiverParserRuleCall_1() { return cReceiverParserRuleCall_1; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_2() { return cMethodNameParserRuleCall_2; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_3() { return cSignatureParserRuleCall_3; }
		
		//FunctionBody?
		public RuleCall getFunctionBodyParserRuleCall_4() { return cFunctionBodyParserRuleCall_4; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Receiver");
		private final RuleCall cParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Receiver:
		//	Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall() { return cParametersParserRuleCall; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperandNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Operand:
		//	Literal | OperandName | "(" Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | OperandName | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//OperandName
		public RuleCall getOperandNameParserRuleCall_1() { return cOperandNameParserRuleCall_1; }
		
		//"(" Expression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionLitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	BasicLit | CompositeLit | FunctionLit;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicLit | CompositeLit | FunctionLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicLit
		public RuleCall getBasicLitParserRuleCall_0() { return cBasicLitParserRuleCall_0; }
		
		//CompositeLit
		public RuleCall getCompositeLitParserRuleCall_1() { return cCompositeLitParserRuleCall_1; }
		
		//FunctionLit
		public RuleCall getFunctionLitParserRuleCall_2() { return cFunctionLitParserRuleCall_2; }
	}
	public class BasicLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BasicLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINT_LITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRING_LITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloat_literalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BasicLit:
		//	INT_LITERAL | STRING_LIT | float_literal;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL | STRING_LIT | float_literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALTerminalRuleCall_0() { return cINT_LITERALTerminalRuleCall_0; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall_1() { return cSTRING_LITTerminalRuleCall_1; }
		
		//float_literal
		public RuleCall getFloat_literalParserRuleCall_2() { return cFloat_literalParserRuleCall_2; }
	}
	public class Float_literalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.float_literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDECIMAL_DIGITSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cEXPONENT_PARTTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cEXPONENT_PARTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cDECIMAL_DIGITSTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cEXPONENT_PARTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//float_literal:
		//	DECIMAL_DIGITS '.' DECIMAL_DIGITS EXPONENT_PART | '.' DECIMAL_DIGITS EXPONENT_PART | DECIMAL_DIGITS EXPONENT_PART;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_DIGITS '.' DECIMAL_DIGITS EXPONENT_PART | '.' DECIMAL_DIGITS EXPONENT_PART | DECIMAL_DIGITS EXPONENT_PART
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL_DIGITS '.' DECIMAL_DIGITS EXPONENT_PART
		public Group getGroup_0() { return cGroup_0; }
		
		//DECIMAL_DIGITS
		public RuleCall getDECIMAL_DIGITSTerminalRuleCall_0_0() { return cDECIMAL_DIGITSTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//DECIMAL_DIGITS
		public RuleCall getDECIMAL_DIGITSTerminalRuleCall_0_2() { return cDECIMAL_DIGITSTerminalRuleCall_0_2; }
		
		//EXPONENT_PART
		public RuleCall getEXPONENT_PARTTerminalRuleCall_0_3() { return cEXPONENT_PARTTerminalRuleCall_0_3; }
		
		//'.' DECIMAL_DIGITS EXPONENT_PART
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//DECIMAL_DIGITS
		public RuleCall getDECIMAL_DIGITSTerminalRuleCall_1_1() { return cDECIMAL_DIGITSTerminalRuleCall_1_1; }
		
		//EXPONENT_PART
		public RuleCall getEXPONENT_PARTTerminalRuleCall_1_2() { return cEXPONENT_PARTTerminalRuleCall_1_2; }
		
		//DECIMAL_DIGITS EXPONENT_PART
		public Group getGroup_2() { return cGroup_2; }
		
		//DECIMAL_DIGITS
		public RuleCall getDECIMAL_DIGITSTerminalRuleCall_2_0() { return cDECIMAL_DIGITSTerminalRuleCall_2_0; }
		
		//EXPONENT_PART
		public RuleCall getEXPONENT_PARTTerminalRuleCall_2_1() { return cEXPONENT_PARTTerminalRuleCall_2_1; }
	}
	public class OperandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperandName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOperandNameLinhaParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OperandName:
		//	IDENTIFIER OperandNameLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER OperandNameLinha
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//OperandNameLinha
		public RuleCall getOperandNameLinhaParserRuleCall_1() { return cOperandNameLinhaParserRuleCall_1; }
	}
	public class OperandNameLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperandNameLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperandNameLinha:
		//	"." IDENTIFIER | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." IDENTIFIER
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_1() { return cIDENTIFIERTerminalRuleCall_0_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
	}
	public class CompositeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CompositeLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteralTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CompositeLit:
		//	LiteralType LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralType LiteralValue
		public Group getGroup() { return cGroup; }
		
		//LiteralType
		public RuleCall getLiteralTypeParserRuleCall_0() { return cLiteralTypeParserRuleCall_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cElementTypeParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final RuleCall cSliceTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMapTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTypeNameParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//LiteralType:
		//	StructType | ArrayType | "[" "..." "]" ElementType | SliceType | MapType | TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//StructType | ArrayType | "[" "..." "]" ElementType | SliceType | MapType | TypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StructType
		public RuleCall getStructTypeParserRuleCall_0() { return cStructTypeParserRuleCall_0; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_1() { return cArrayTypeParserRuleCall_1; }
		
		//"[" "..." "]" ElementType
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//ElementType
		public RuleCall getElementTypeParserRuleCall_2_3() { return cElementTypeParserRuleCall_2_3; }
		
		//SliceType
		public RuleCall getSliceTypeParserRuleCall_3() { return cSliceTypeParserRuleCall_3; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_4() { return cMapTypeParserRuleCall_4; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_5() { return cTypeNameParserRuleCall_5; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cElementListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LiteralValue:
		//	"{" (ElementList ","?)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (ElementList ","?)? "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(ElementList ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ElementList
		public RuleCall getElementListParserRuleCall_1_0() { return cElementListParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyedElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cKeyedElementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ElementList:
		//	KeyedElement ("," KeyedElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//KeyedElement ("," KeyedElement)*
		public Group getGroup() { return cGroup; }
		
		//KeyedElement
		public RuleCall getKeyedElementParserRuleCall_0() { return cKeyedElementParserRuleCall_0; }
		
		//("," KeyedElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//KeyedElement
		public RuleCall getKeyedElementParserRuleCall_1_1() { return cKeyedElementParserRuleCall_1_1; }
	}
	public class KeyedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.KeyedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//KeyedElement:
		//	=> (Key ":")? Element;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (Key ":")? Element
		public Group getGroup() { return cGroup; }
		
		//=> (Key ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//(Key ":")
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//Key
		public RuleCall getKeyParserRuleCall_0_0_0() { return cKeyParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//Element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Key:
		//	FieldName | Expression | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//FieldName | Expression | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FieldName
		public RuleCall getFieldNameParserRuleCall_0() { return cFieldNameParserRuleCall_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_2() { return cLiteralValueParserRuleCall_2; }
	}
	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldName");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Expression | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class FunctionLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cFunctionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FunctionLit:
		//	"func" Signature FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature FunctionBody
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_2() { return cFunctionBodyParserRuleCall_2; }
	}
	public class MethodExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReceiverTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cMethodNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MethodExpr:
		//	ReceiverType "." MethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//ReceiverType "." MethodName
		public Group getGroup() { return cGroup; }
		
		//ReceiverType
		public RuleCall getReceiverTypeParserRuleCall_0() { return cReceiverTypeParserRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_2() { return cMethodNameParserRuleCall_2; }
	}
	public class ReceiverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReceiverType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ReceiverType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conversion:
		//	Type "(" Expression ","? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Type "(" Expression ","? ")"
		public Group getGroup() { return cGroup; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SourceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SourceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageClauseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cImportDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cTopLevelDeclParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//SourceFile:
		//	PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")*
		public Group getGroup() { return cGroup; }
		
		//PackageClause
		public RuleCall getPackageClauseParserRuleCall_0() { return cPackageClauseParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//(ImportDecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//ImportDecl
		public RuleCall getImportDeclParserRuleCall_2_0() { return cImportDeclParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//(TopLevelDecl ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//TopLevelDecl
		public RuleCall getTopLevelDeclParserRuleCall_3_0() { return cTopLevelDeclParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class PackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PackageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPackageNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PackageClause:
		//	"package" PackageName;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" PackageName
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_1() { return cPackageNameParserRuleCall_1; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ImportDecl:
		//	"import" (ImportSpec | "(" (ImportSpec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"import" (ImportSpec | "(" (ImportSpec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(ImportSpec | "(" (ImportSpec ";")* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_0() { return cImportSpecParserRuleCall_1_0; }
		
		//"(" (ImportSpec ";")* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(ImportSpec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_1_1_0() { return cImportSpecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cPackageNameParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cImportPathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImportSpec:
		//	("." | PackageName)? ImportPath;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | PackageName)? ImportPath
		public Group getGroup() { return cGroup; }
		
		//("." | PackageName)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_0_1() { return cPackageNameParserRuleCall_0_1; }
		
		//ImportPath
		public RuleCall getImportPathParserRuleCall_1() { return cImportPathParserRuleCall_1; }
	}
	public class ImportPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportPath");
		private final RuleCall cSTRING_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImportPath:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall() { return cSTRING_LITTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final TerminalRule tUNICODE_LETTER;
	private final TerminalRule tLETTER;
	private final TerminalRule tINT_LITERAL;
	private final TerminalRule tDECIMAL_DIGITS;
	private final TerminalRule tEXPONENT_PART;
	private final TerminalRule tSTRING_LIT;
	private final TerminalRule tRUNE_LIT;
	private final TypeElements pType;
	private final TypeNameElements pTypeName;
	private final TypeNameLinhaElements pTypeNameLinha;
	private final QualifiedIdentElements pQualifiedIdent;
	private final PackageNameElements pPackageName;
	private final TypeLitElements pTypeLit;
	private final ArrayTypeElements pArrayType;
	private final ArrayLengthElements pArrayLength;
	private final ElementTypeElements pElementType;
	private final SliceTypeElements pSliceType;
	private final StructTypeElements pStructType;
	private final FieldDeclElements pFieldDecl;
	private final EmbeddedFieldElements pEmbeddedField;
	private final TagElements pTag;
	private final PointerTypeElements pPointerType;
	private final BaseTypeElements pBaseType;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final InterfaceTypeElements pInterfaceType;
	private final MethodSpecElements pMethodSpec;
	private final MethodNameElements pMethodName;
	private final InterfaceTypeNameElements pInterfaceTypeName;
	private final MapTypeElements pMapType;
	private final KeyTypeElements pKeyType;
	private final ChannelTypeElements pChannelType;
	private final ChannelTypeLinhaElements pChannelTypeLinha;
	private final ExpressionElements pExpression;
	private final Expression_LinhaElements pExpression_Linha;
	private final UnaryExprElements pUnaryExpr;
	private final Binary_opElements pBinary_op;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tMUL_OP;
	private final TerminalRule tUNARY_OP;
	private final PrimaryExprElements pPrimaryExpr;
	private final PrimaryExprFatoracaoElements pPrimaryExprFatoracao;
	private final PrimaryExpr_LinhaElements pPrimaryExpr_Linha;
	private final PrimaryExprFatoradoElements pPrimaryExprFatorado;
	private final PrimaryExpr_Fatorado1Elements pPrimaryExpr_Fatorado1;
	private final SelectorElements pSelector;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final SliceLinhaElements pSliceLinha;
	private final TypeAssertionElements pTypeAssertion;
	private final ArgumentsElements pArguments;
	private final ExpressionListElements pExpressionList;
	private final IdentifierListElements pIdentifierList;
	private final BlockElements pBlock;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final DeferStmtElements pDeferStmt;
	private final ForStmtElements pForStmt;
	private final ForStmtLinhaElements pForStmtLinha;
	private final RangeClauseElements pRangeClause;
	private final ForClauseElements pForClause;
	private final PostStmtElements pPostStmt;
	private final InitStmtElements pInitStmt;
	private final ConditionElements pCondition;
	private final SelectStmtElements pSelectStmt;
	private final CommClauseElements pCommClause;
	private final CommCaseElements pCommCase;
	private final CommCaseLinhaElements pCommCaseLinha;
	private final RecvStmtElements pRecvStmt;
	private final RecvExprElements pRecvExpr;
	private final SwitchStmtElements pSwitchStmt;
	private final SwitchStmtLinhaElements pSwitchStmtLinha;
	private final TypeSwitchStmtElements pTypeSwitchStmt;
	private final TypeCaseClauseElements pTypeCaseClause;
	private final TypeSwitchCaseElements pTypeSwitchCase;
	private final TypeListElements pTypeList;
	private final TypeSwitchGuardElements pTypeSwitchGuard;
	private final ExprSwitchStmtElements pExprSwitchStmt;
	private final ExprCaseClauseElements pExprCaseClause;
	private final ExprSwitchCaseElements pExprSwitchCase;
	private final IfStmtElements pIfStmt;
	private final FallthroughStmtElements pFallthroughStmt;
	private final GotoStmtElements pGotoStmt;
	private final ContinueStmtElements pContinueStmt;
	private final BreakStmtElements pBreakStmt;
	private final ReturnStmtElements pReturnStmt;
	private final GoStmtElements pGoStmt;
	private final SimpleStmtElements pSimpleStmt;
	private final SimpleStmtLinhaElements pSimpleStmtLinha;
	private final AssignmentElements pAssignment;
	private final Assign_opElements pAssign_op;
	private final IncDecStmtElements pIncDecStmt;
	private final SendStmtElements pSendStmt;
	private final ChannelElements pChannel;
	private final ExpressionStmtElements pExpressionStmt;
	private final LabeledStmtElements pLabeledStmt;
	private final LabelElements pLabel;
	private final DeclarationElements pDeclaration;
	private final TopLevelDeclElements pTopLevelDecl;
	private final ConstDeclElements pConstDecl;
	private final ConstSpecElements pConstSpec;
	private final TypeDeclElements pTypeDecl;
	private final TypeSpecElements pTypeSpec;
	private final AliasDeclElements pAliasDecl;
	private final TypeDefElements pTypeDef;
	private final VarDeclElements pVarDecl;
	private final VarSpecElements pVarSpec;
	private final ShortVarDeclElements pShortVarDecl;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionNameElements pFunctionName;
	private final FunctionBodyElements pFunctionBody;
	private final MethodDeclElements pMethodDecl;
	private final ReceiverElements pReceiver;
	private final OperandElements pOperand;
	private final LiteralElements pLiteral;
	private final BasicLitElements pBasicLit;
	private final Float_literalElements pFloat_literal;
	private final OperandNameElements pOperandName;
	private final OperandNameLinhaElements pOperandNameLinha;
	private final CompositeLitElements pCompositeLit;
	private final LiteralTypeElements pLiteralType;
	private final LiteralValueElements pLiteralValue;
	private final ElementListElements pElementList;
	private final KeyedElementElements pKeyedElement;
	private final KeyElements pKey;
	private final FieldNameElements pFieldName;
	private final ElementElements pElement;
	private final FunctionLitElements pFunctionLit;
	private final MethodExprElements pMethodExpr;
	private final ReceiverTypeElements pReceiverType;
	private final ConversionElements pConversion;
	private final SourceFileElements pSourceFile;
	private final PackageClauseElements pPackageClause;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final ImportPathElements pImportPath;
	private final TerminalRule tIDENTIFIER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.tUNICODE_LETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNICODE_LETTER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tINT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INT_LITERAL");
		this.tDECIMAL_DIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECIMAL_DIGITS");
		this.tEXPONENT_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXPONENT_PART");
		this.tSTRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING_LIT");
		this.tRUNE_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RUNE_LIT");
		this.pType = new TypeElements();
		this.pTypeName = new TypeNameElements();
		this.pTypeNameLinha = new TypeNameLinhaElements();
		this.pQualifiedIdent = new QualifiedIdentElements();
		this.pPackageName = new PackageNameElements();
		this.pTypeLit = new TypeLitElements();
		this.pArrayType = new ArrayTypeElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pElementType = new ElementTypeElements();
		this.pSliceType = new SliceTypeElements();
		this.pStructType = new StructTypeElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pEmbeddedField = new EmbeddedFieldElements();
		this.pTag = new TagElements();
		this.pPointerType = new PointerTypeElements();
		this.pBaseType = new BaseTypeElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pMethodSpec = new MethodSpecElements();
		this.pMethodName = new MethodNameElements();
		this.pInterfaceTypeName = new InterfaceTypeNameElements();
		this.pMapType = new MapTypeElements();
		this.pKeyType = new KeyTypeElements();
		this.pChannelType = new ChannelTypeElements();
		this.pChannelTypeLinha = new ChannelTypeLinhaElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_Linha = new Expression_LinhaElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pBinary_op = new Binary_opElements();
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ADD_OP");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MUL_OP");
		this.tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNARY_OP");
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pPrimaryExprFatoracao = new PrimaryExprFatoracaoElements();
		this.pPrimaryExpr_Linha = new PrimaryExpr_LinhaElements();
		this.pPrimaryExprFatorado = new PrimaryExprFatoradoElements();
		this.pPrimaryExpr_Fatorado1 = new PrimaryExpr_Fatorado1Elements();
		this.pSelector = new SelectorElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pSliceLinha = new SliceLinhaElements();
		this.pTypeAssertion = new TypeAssertionElements();
		this.pArguments = new ArgumentsElements();
		this.pExpressionList = new ExpressionListElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pBlock = new BlockElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pForStmt = new ForStmtElements();
		this.pForStmtLinha = new ForStmtLinhaElements();
		this.pRangeClause = new RangeClauseElements();
		this.pForClause = new ForClauseElements();
		this.pPostStmt = new PostStmtElements();
		this.pInitStmt = new InitStmtElements();
		this.pCondition = new ConditionElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pCommClause = new CommClauseElements();
		this.pCommCase = new CommCaseElements();
		this.pCommCaseLinha = new CommCaseLinhaElements();
		this.pRecvStmt = new RecvStmtElements();
		this.pRecvExpr = new RecvExprElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pSwitchStmtLinha = new SwitchStmtLinhaElements();
		this.pTypeSwitchStmt = new TypeSwitchStmtElements();
		this.pTypeCaseClause = new TypeCaseClauseElements();
		this.pTypeSwitchCase = new TypeSwitchCaseElements();
		this.pTypeList = new TypeListElements();
		this.pTypeSwitchGuard = new TypeSwitchGuardElements();
		this.pExprSwitchStmt = new ExprSwitchStmtElements();
		this.pExprCaseClause = new ExprCaseClauseElements();
		this.pExprSwitchCase = new ExprSwitchCaseElements();
		this.pIfStmt = new IfStmtElements();
		this.pFallthroughStmt = new FallthroughStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pGoStmt = new GoStmtElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pSimpleStmtLinha = new SimpleStmtLinhaElements();
		this.pAssignment = new AssignmentElements();
		this.pAssign_op = new Assign_opElements();
		this.pIncDecStmt = new IncDecStmtElements();
		this.pSendStmt = new SendStmtElements();
		this.pChannel = new ChannelElements();
		this.pExpressionStmt = new ExpressionStmtElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pLabel = new LabelElements();
		this.pDeclaration = new DeclarationElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstSpec = new ConstSpecElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pAliasDecl = new AliasDeclElements();
		this.pTypeDef = new TypeDefElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarSpec = new VarSpecElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pOperand = new OperandElements();
		this.pLiteral = new LiteralElements();
		this.pBasicLit = new BasicLitElements();
		this.pFloat_literal = new Float_literalElements();
		this.pOperandName = new OperandNameElements();
		this.pOperandNameLinha = new OperandNameLinhaElements();
		this.pCompositeLit = new CompositeLitElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pElementList = new ElementListElements();
		this.pKeyedElement = new KeyedElementElements();
		this.pKey = new KeyElements();
		this.pFieldName = new FieldNameElements();
		this.pElement = new ElementElements();
		this.pFunctionLit = new FunctionLitElements();
		this.pMethodExpr = new MethodExprElements();
		this.pReceiverType = new ReceiverTypeElements();
		this.pConversion = new ConversionElements();
		this.pSourceFile = new SourceFileElements();
		this.pPackageClause = new PackageClauseElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pImportPath = new ImportPathElements();
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IDENTIFIER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greeting:
	//	SourceFile;
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//terminal UNICODE_LETTER:
	//	"a".."z" | "A".."Z";
	public TerminalRule getUNICODE_LETTERRule() {
		return tUNICODE_LETTER;
	}
	
	//terminal LETTER:
	//	UNICODE_LETTER | "_";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal INT_LITERAL:
	//	'1'..'9' '0'..'9'* | '0'..'7'*
	//	| '0' ('x' | "X") ('0'..'9' | 'a'..'f' | "A".."F")+;
	public TerminalRule getINT_LITERALRule() {
		return tINT_LITERAL;
	}
	
	//terminal DECIMAL_DIGITS:
	//	'0'..'9' '0'..'9'*;
	public TerminalRule getDECIMAL_DIGITSRule() {
		return tDECIMAL_DIGITS;
	}
	
	//terminal EXPONENT_PART:
	//	'e' ('+' | '-') DECIMAL_DIGITS;
	public TerminalRule getEXPONENT_PARTRule() {
		return tEXPONENT_PART;
	}
	
	//terminal STRING_LIT:
	//	"oi" //ajeitar
	//;
	public TerminalRule getSTRING_LITRule() {
		return tSTRING_LIT;
	}
	
	//terminal RUNE_LIT:
	//	"oiiii";
	public TerminalRule getRUNE_LITRule() {
		return tRUNE_LIT;
	}
	
	//Type:
	//	TypeName | TypeLit | "(" Type ")";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeName:
	//	IDENTIFIER TypeNameLinha;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//TypeNameLinha:
	//	"." IDENTIFIER | ANY_OTHER;
	public TypeNameLinhaElements getTypeNameLinhaAccess() {
		return pTypeNameLinha;
	}
	
	public ParserRule getTypeNameLinhaRule() {
		return getTypeNameLinhaAccess().getRule();
	}
	
	//QualifiedIdent:
	//	PackageName "." IDENTIFIER;
	public QualifiedIdentElements getQualifiedIdentAccess() {
		return pQualifiedIdent;
	}
	
	public ParserRule getQualifiedIdentRule() {
		return getQualifiedIdentAccess().getRule();
	}
	
	//PackageName:
	//	IDENTIFIER;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//TypeLit:
	//	ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType;
	public TypeLitElements getTypeLitAccess() {
		return pTypeLit;
	}
	
	public ParserRule getTypeLitRule() {
		return getTypeLitAccess().getRule();
	}
	
	//ArrayType:
	//	"[" ArrayLength "]" ElementType;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//ArrayLength:
	//	Expression;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//ElementType:
	//	Type;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	//SliceType:
	//	"[" "]" ElementType;
	public SliceTypeElements getSliceTypeAccess() {
		return pSliceType;
	}
	
	public ParserRule getSliceTypeRule() {
		return getSliceTypeAccess().getRule();
	}
	
	//StructType:
	//	"struct" "{" (FieldDecl ";")* "}";
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//FieldDecl:
	//	(IdentifierList Type | EmbeddedField) Tag?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//EmbeddedField:
	//	"*"? TypeName;
	public EmbeddedFieldElements getEmbeddedFieldAccess() {
		return pEmbeddedField;
	}
	
	public ParserRule getEmbeddedFieldRule() {
		return getEmbeddedFieldAccess().getRule();
	}
	
	//Tag:
	//	STRING_LIT;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//PointerType:
	//	"*" BaseType;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//BaseType:
	//	Type;
	public BaseTypeElements getBaseTypeAccess() {
		return pBaseType;
	}
	
	public ParserRule getBaseTypeRule() {
		return getBaseTypeAccess().getRule();
	}
	
	//FunctionType:
	//	"func" Signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//Signature:
	//	Parameters Result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	=> Parameters | Type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	"(" (ParameterList ","?)? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ParameterList:
	//	ParameterDecl ("," ParameterDecl)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDecl:
	//	IdentifierList? "..."? Type;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	//InterfaceType:
	//	"interface" "{" (MethodSpec ";") "}";
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	//MethodSpec:
	//	MethodName Signature | InterfaceTypeName;
	public MethodSpecElements getMethodSpecAccess() {
		return pMethodSpec;
	}
	
	public ParserRule getMethodSpecRule() {
		return getMethodSpecAccess().getRule();
	}
	
	//MethodName:
	//	IDENTIFIER;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//InterfaceTypeName:
	//	TypeName;
	public InterfaceTypeNameElements getInterfaceTypeNameAccess() {
		return pInterfaceTypeName;
	}
	
	public ParserRule getInterfaceTypeNameRule() {
		return getInterfaceTypeNameAccess().getRule();
	}
	
	//MapType:
	//	"map" "[" KeyType "]" ElementType;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//KeyType:
	//	Type;
	public KeyTypeElements getKeyTypeAccess() {
		return pKeyType;
	}
	
	public ParserRule getKeyTypeRule() {
		return getKeyTypeAccess().getRule();
	}
	
	//ChannelType:
	//	("chan" ChannelTypeLinha | "<-" "chan") ElementType;
	public ChannelTypeElements getChannelTypeAccess() {
		return pChannelType;
	}
	
	public ParserRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}
	
	//ChannelTypeLinha:
	//	"<-" | ANY_OTHER;
	public ChannelTypeLinhaElements getChannelTypeLinhaAccess() {
		return pChannelTypeLinha;
	}
	
	public ParserRule getChannelTypeLinhaRule() {
		return getChannelTypeLinhaAccess().getRule();
	}
	
	/// *Expression: 
	//	UnaryExpr | Expression binary_op Expression
	//;* / Expression:
	//	UnaryExpr Expression_Linha;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression_Linha:
	//	binary_op Expression_Linha;
	public Expression_LinhaElements getExpression_LinhaAccess() {
		return pExpression_Linha;
	}
	
	public ParserRule getExpression_LinhaRule() {
		return getExpression_LinhaAccess().getRule();
	}
	
	//UnaryExpr:
	//	PrimaryExpr | UNARY_OP UnaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//binary_op:
	//	"||" | "&&" | REL_OP | ADD_OP | MUL_OP;
	public Binary_opElements getBinary_opAccess() {
		return pBinary_op;
	}
	
	public ParserRule getBinary_opRule() {
		return getBinary_opAccess().getRule();
	}
	
	//terminal REL_OP:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal ADD_OP:
	//	"+" | "-" | "|" | "^";
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal MUL_OP:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	//terminal UNARY_OP:
	//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
	public TerminalRule getUNARY_OPRule() {
		return tUNARY_OP;
	}
	
	//PrimaryExpr:
	//	Operand PrimaryExpr_Linha | Type PrimaryExprFatoracao PrimaryExpr_Linha;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//PrimaryExprFatoracao:
	//	"(" Expression ","? ")" | "." MethodName;
	public PrimaryExprFatoracaoElements getPrimaryExprFatoracaoAccess() {
		return pPrimaryExprFatoracao;
	}
	
	public ParserRule getPrimaryExprFatoracaoRule() {
		return getPrimaryExprFatoracaoAccess().getRule();
	}
	
	//PrimaryExpr_Linha:
	//	"." PrimaryExprFatorado PrimaryExpr_Linha
	//	| "[" Expression PrimaryExpr_Fatorado1 PrimaryExpr_Linha
	//	| "[" ":" SliceLinha
	//	| Arguments PrimaryExpr_Linha
	//	| ANY_OTHER;
	public PrimaryExpr_LinhaElements getPrimaryExpr_LinhaAccess() {
		return pPrimaryExpr_Linha;
	}
	
	public ParserRule getPrimaryExpr_LinhaRule() {
		return getPrimaryExpr_LinhaAccess().getRule();
	}
	
	//PrimaryExprFatorado:
	//	IDENTIFIER | "(" Type ")";
	public PrimaryExprFatoradoElements getPrimaryExprFatoradoAccess() {
		return pPrimaryExprFatorado;
	}
	
	public ParserRule getPrimaryExprFatoradoRule() {
		return getPrimaryExprFatoradoAccess().getRule();
	}
	
	//PrimaryExpr_Fatorado1:
	//	"]" | ":" SliceLinha;
	public PrimaryExpr_Fatorado1Elements getPrimaryExpr_Fatorado1Access() {
		return pPrimaryExpr_Fatorado1;
	}
	
	public ParserRule getPrimaryExpr_Fatorado1Rule() {
		return getPrimaryExpr_Fatorado1Access().getRule();
	}
	
	//Selector:
	//	"." IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Index:
	//	"[" Expression "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//Slice:
	//	"[" Expression? ":" SliceLinha;
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//SliceLinha:
	//	":" Expression? "]" | Expression ":" Expression "]";
	public SliceLinhaElements getSliceLinhaAccess() {
		return pSliceLinha;
	}
	
	public ParserRule getSliceLinhaRule() {
		return getSliceLinhaAccess().getRule();
	}
	
	//TypeAssertion:
	//	"." "(" Type ")";
	public TypeAssertionElements getTypeAssertionAccess() {
		return pTypeAssertion;
	}
	
	public ParserRule getTypeAssertionRule() {
		return getTypeAssertionAccess().getRule();
	}
	
	//Arguments:
	//	"(" ((ExpressionList | Type ("," ExpressionList)?) "..."? ","?)? ")";
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//ExpressionList:
	//	Expression ("," Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	//IdentifierList:
	//	IDENTIFIER ("," IDENTIFIER)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//Block:
	//	"{" StatementList "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//StatementList:
	//	(Statement ";")*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Statement:
	//	Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt
	//	| Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//DeferStmt:
	//	"defer" Expression;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	//ForStmt:
	//	"for" (Expression ForStmtLinha)? Block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//ForStmtLinha:
	//	(SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*)) ";" Condition ";" (Expression
	//	SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*) | ("," Expression)* "=" |
	//	IdentifierList ":=") "range" Expression
	//	| ANY_OTHER;
	public ForStmtLinhaElements getForStmtLinhaAccess() {
		return pForStmtLinha;
	}
	
	public ParserRule getForStmtLinhaRule() {
		return getForStmtLinhaAccess().getRule();
	}
	
	//RangeClause:
	//	(ExpressionList "=" | IdentifierList ":=") "range" Expression;
	public RangeClauseElements getRangeClauseAccess() {
		return pRangeClause;
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}
	
	//ForClause:
	//	InitStmt ";" Condition ";" PostStmt;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	//PostStmt:
	//	SimpleStmt;
	public PostStmtElements getPostStmtAccess() {
		return pPostStmt;
	}
	
	public ParserRule getPostStmtRule() {
		return getPostStmtAccess().getRule();
	}
	
	//InitStmt:
	//	SimpleStmt;
	public InitStmtElements getInitStmtAccess() {
		return pInitStmt;
	}
	
	public ParserRule getInitStmtRule() {
		return getInitStmtAccess().getRule();
	}
	
	//Condition:
	//	Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//SelectStmt:
	//	"select" "{" CommClause* "}";
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//CommClause:
	//	CommCase ":" StatementList;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//CommCase:
	//	"case" (Expression CommCaseLinha) | "default";
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//CommCaseLinha:
	//	"<-" Expression | (("," Expression)* "=" | IdentifierList ":=") RecvExpr;
	public CommCaseLinhaElements getCommCaseLinhaAccess() {
		return pCommCaseLinha;
	}
	
	public ParserRule getCommCaseLinhaRule() {
		return getCommCaseLinhaAccess().getRule();
	}
	
	//RecvStmt:
	//	(ExpressionList "=" | IdentifierList ":=") RecvExpr;
	public RecvStmtElements getRecvStmtAccess() {
		return pRecvStmt;
	}
	
	public ParserRule getRecvStmtRule() {
		return getRecvStmtAccess().getRule();
	}
	
	//RecvExpr:
	//	Expression;
	public RecvExprElements getRecvExprAccess() {
		return pRecvExpr;
	}
	
	public ParserRule getRecvExprRule() {
		return getRecvExprAccess().getRule();
	}
	
	//SwitchStmt:
	//	"switch" (SimpleStmt ";") SwitchStmtLinha;
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	//SwitchStmtLinha:
	//	Expression "{" ExprCaseClause* "}" | TypeSwitchGuard "{" TypeCaseClause* "}";
	public SwitchStmtLinhaElements getSwitchStmtLinhaAccess() {
		return pSwitchStmtLinha;
	}
	
	public ParserRule getSwitchStmtLinhaRule() {
		return getSwitchStmtLinhaAccess().getRule();
	}
	
	//TypeSwitchStmt:
	//	"switch" (SimpleStmt ";") TypeSwitchGuard "{" TypeCaseClause* "}";
	public TypeSwitchStmtElements getTypeSwitchStmtAccess() {
		return pTypeSwitchStmt;
	}
	
	public ParserRule getTypeSwitchStmtRule() {
		return getTypeSwitchStmtAccess().getRule();
	}
	
	//TypeCaseClause:
	//	TypeSwitchCase ":" StatementList;
	public TypeCaseClauseElements getTypeCaseClauseAccess() {
		return pTypeCaseClause;
	}
	
	public ParserRule getTypeCaseClauseRule() {
		return getTypeCaseClauseAccess().getRule();
	}
	
	//TypeSwitchCase:
	//	"case" TypeList | "default";
	public TypeSwitchCaseElements getTypeSwitchCaseAccess() {
		return pTypeSwitchCase;
	}
	
	public ParserRule getTypeSwitchCaseRule() {
		return getTypeSwitchCaseAccess().getRule();
	}
	
	//TypeList:
	//	Type ("," Type)*;
	public TypeListElements getTypeListAccess() {
		return pTypeList;
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}
	
	//TypeSwitchGuard:
	//	(IDENTIFIER ":=") PrimaryExpr "." "(" "type" ")";
	public TypeSwitchGuardElements getTypeSwitchGuardAccess() {
		return pTypeSwitchGuard;
	}
	
	public ParserRule getTypeSwitchGuardRule() {
		return getTypeSwitchGuardAccess().getRule();
	}
	
	//ExprSwitchStmt:
	//	"switch" (SimpleStmt ";") Expression "{" ExprCaseClause* "}";
	public ExprSwitchStmtElements getExprSwitchStmtAccess() {
		return pExprSwitchStmt;
	}
	
	public ParserRule getExprSwitchStmtRule() {
		return getExprSwitchStmtAccess().getRule();
	}
	
	//ExprCaseClause:
	//	ExprSwitchCase ":" StatementList;
	public ExprCaseClauseElements getExprCaseClauseAccess() {
		return pExprCaseClause;
	}
	
	public ParserRule getExprCaseClauseRule() {
		return getExprCaseClauseAccess().getRule();
	}
	
	//ExprSwitchCase:
	//	"case" ExpressionList | "default";
	public ExprSwitchCaseElements getExprSwitchCaseAccess() {
		return pExprSwitchCase;
	}
	
	public ParserRule getExprSwitchCaseRule() {
		return getExprSwitchCaseAccess().getRule();
	}
	
	//IfStmt:
	//	"if" (SimpleStmt ";") Expression Block ("else" (IfStmt | Block));
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//FallthroughStmt:
	//	"fallthrough";
	public FallthroughStmtElements getFallthroughStmtAccess() {
		return pFallthroughStmt;
	}
	
	public ParserRule getFallthroughStmtRule() {
		return getFallthroughStmtAccess().getRule();
	}
	
	//GotoStmt:
	//	"goto" Label;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	//ContinueStmt:
	//	"continue" Label;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	//BreakStmt:
	//	"break" Label;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	//ReturnStmt:
	//	"return" ExpressionList;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//GoStmt:
	//	"go" Label;
	public GoStmtElements getGoStmtAccess() {
		return pGoStmt;
	}
	
	public ParserRule getGoStmtRule() {
		return getGoStmtAccess().getRule();
	}
	
	//SimpleStmt:
	//	Expression SimpleStmtLinha | (IDENTIFIER ("," IDENTIFIER)*) ":=" (Expression ("," Expression)*);
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	//SimpleStmtLinha:
	//	"<-" Expression | ("++" | "--") | ("," Expression)* assign_op (Expression ("," Expression)*);
	public SimpleStmtLinhaElements getSimpleStmtLinhaAccess() {
		return pSimpleStmtLinha;
	}
	
	public ParserRule getSimpleStmtLinhaRule() {
		return getSimpleStmtLinhaAccess().getRule();
	}
	
	//Assignment:
	//	ExpressionList assign_op ExpressionList;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//assign_op:
	//	(ADD_OP | MUL_OP) "=";
	public Assign_opElements getAssign_opAccess() {
		return pAssign_op;
	}
	
	public ParserRule getAssign_opRule() {
		return getAssign_opAccess().getRule();
	}
	
	//IncDecStmt:
	//	Expression ("++" | "--");
	public IncDecStmtElements getIncDecStmtAccess() {
		return pIncDecStmt;
	}
	
	public ParserRule getIncDecStmtRule() {
		return getIncDecStmtAccess().getRule();
	}
	
	//SendStmt:
	//	Channel "<-" Expression;
	public SendStmtElements getSendStmtAccess() {
		return pSendStmt;
	}
	
	public ParserRule getSendStmtRule() {
		return getSendStmtAccess().getRule();
	}
	
	//Channel:
	//	Expression;
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//ExpressionStmt:
	//	Expression;
	public ExpressionStmtElements getExpressionStmtAccess() {
		return pExpressionStmt;
	}
	
	public ParserRule getExpressionStmtRule() {
		return getExpressionStmtAccess().getRule();
	}
	
	//LabeledStmt:
	//	Label ":" Statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	//Label:
	//	IDENTIFIER;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Declaration:
	//	ConstDecl | TypeDecl | VarDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//TopLevelDecl:
	//	Declaration | FunctionDecl | MethodDecl;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	//ConstDecl:
	//	"const" (ConstSpec | "(" (ConstSpec ";")* ")");
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	//ConstSpec:
	//	IdentifierList (Type? "=" ExpressionList)?;
	public ConstSpecElements getConstSpecAccess() {
		return pConstSpec;
	}
	
	public ParserRule getConstSpecRule() {
		return getConstSpecAccess().getRule();
	}
	
	//TypeDecl:
	//	"type" (TypeSpec | "(" (TypeSpec ";")* ")");
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//TypeSpec:
	//	AliasDecl | TypeDef;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//AliasDecl:
	//	IDENTIFIER "=" Type;
	public AliasDeclElements getAliasDeclAccess() {
		return pAliasDecl;
	}
	
	public ParserRule getAliasDeclRule() {
		return getAliasDeclAccess().getRule();
	}
	
	//TypeDef:
	//	IDENTIFIER Type;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//VarDecl:
	//	"var" (VarSpec | "(" (VarSpec ";")* ")");
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//VarSpec:
	//	IdentifierList (Type ("=" ExpressionList)? | "=" ExpressionList);
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	//ShortVarDecl:
	//	IdentifierList ":=" ExpressionList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//FunctionDecl:
	//	"func" FunctionName Signature FunctionBody?;
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//FunctionName:
	//	IDENTIFIER;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//FunctionBody:
	//	Block;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//MethodDecl:
	//	"func" Receiver MethodName Signature FunctionBody?;
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//Receiver:
	//	Parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//Operand:
	//	Literal | OperandName | "(" Expression ")";
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//Literal:
	//	BasicLit | CompositeLit | FunctionLit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BasicLit:
	//	INT_LITERAL | STRING_LIT | float_literal;
	public BasicLitElements getBasicLitAccess() {
		return pBasicLit;
	}
	
	public ParserRule getBasicLitRule() {
		return getBasicLitAccess().getRule();
	}
	
	//float_literal:
	//	DECIMAL_DIGITS '.' DECIMAL_DIGITS EXPONENT_PART | '.' DECIMAL_DIGITS EXPONENT_PART | DECIMAL_DIGITS EXPONENT_PART;
	public Float_literalElements getFloat_literalAccess() {
		return pFloat_literal;
	}
	
	public ParserRule getFloat_literalRule() {
		return getFloat_literalAccess().getRule();
	}
	
	//OperandName:
	//	IDENTIFIER OperandNameLinha;
	public OperandNameElements getOperandNameAccess() {
		return pOperandName;
	}
	
	public ParserRule getOperandNameRule() {
		return getOperandNameAccess().getRule();
	}
	
	//OperandNameLinha:
	//	"." IDENTIFIER | ANY_OTHER;
	public OperandNameLinhaElements getOperandNameLinhaAccess() {
		return pOperandNameLinha;
	}
	
	public ParserRule getOperandNameLinhaRule() {
		return getOperandNameLinhaAccess().getRule();
	}
	
	//CompositeLit:
	//	LiteralType LiteralValue;
	public CompositeLitElements getCompositeLitAccess() {
		return pCompositeLit;
	}
	
	public ParserRule getCompositeLitRule() {
		return getCompositeLitAccess().getRule();
	}
	
	//LiteralType:
	//	StructType | ArrayType | "[" "..." "]" ElementType | SliceType | MapType | TypeName;
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//LiteralValue:
	//	"{" (ElementList ","?)? "}";
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//ElementList:
	//	KeyedElement ("," KeyedElement)*;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//KeyedElement:
	//	=> (Key ":")? Element;
	public KeyedElementElements getKeyedElementAccess() {
		return pKeyedElement;
	}
	
	public ParserRule getKeyedElementRule() {
		return getKeyedElementAccess().getRule();
	}
	
	//Key:
	//	FieldName | Expression | LiteralValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//FieldName:
	//	IDENTIFIER;
	public FieldNameElements getFieldNameAccess() {
		return pFieldName;
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}
	
	//Element:
	//	Expression | LiteralValue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//FunctionLit:
	//	"func" Signature FunctionBody;
	public FunctionLitElements getFunctionLitAccess() {
		return pFunctionLit;
	}
	
	public ParserRule getFunctionLitRule() {
		return getFunctionLitAccess().getRule();
	}
	
	//MethodExpr:
	//	ReceiverType "." MethodName;
	public MethodExprElements getMethodExprAccess() {
		return pMethodExpr;
	}
	
	public ParserRule getMethodExprRule() {
		return getMethodExprAccess().getRule();
	}
	
	//ReceiverType:
	//	Type;
	public ReceiverTypeElements getReceiverTypeAccess() {
		return pReceiverType;
	}
	
	public ParserRule getReceiverTypeRule() {
		return getReceiverTypeAccess().getRule();
	}
	
	//Conversion:
	//	Type "(" Expression ","? ")";
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//SourceFile:
	//	PackageClause ";" (ImportDecl ";")* (TopLevelDecl ";")*;
	public SourceFileElements getSourceFileAccess() {
		return pSourceFile;
	}
	
	public ParserRule getSourceFileRule() {
		return getSourceFileAccess().getRule();
	}
	
	//PackageClause:
	//	"package" PackageName;
	public PackageClauseElements getPackageClauseAccess() {
		return pPackageClause;
	}
	
	public ParserRule getPackageClauseRule() {
		return getPackageClauseAccess().getRule();
	}
	
	//ImportDecl:
	//	"import" (ImportSpec | "(" (ImportSpec ";")* ")");
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//ImportSpec:
	//	("." | PackageName)? ImportPath;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//ImportPath:
	//	STRING_LIT;
	public ImportPathElements getImportPathAccess() {
		return pImportPath;
	}
	
	public ParserRule getImportPathRule() {
		return getImportPathAccess().getRule();
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | "0".."9")*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
