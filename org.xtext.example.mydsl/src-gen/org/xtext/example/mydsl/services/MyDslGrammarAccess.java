/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsSourceFileParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=SourceFile*;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=SourceFile*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//SourceFile
		public RuleCall getGreetingsSourceFileParserRuleCall_0() { return cGreetingsSourceFileParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeNameTypeNameParserRuleCall_0_0 = (RuleCall)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeLitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeLitTypeLitParserRuleCall_1_0 = (RuleCall)cTypeLitAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Type:
		//	typeName=TypeName | typeLit=TypeLit | "(" type=Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=TypeName | typeLit=TypeLit | "(" type=Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_0_0() { return cTypeNameTypeNameParserRuleCall_0_0; }
		
		//typeLit=TypeLit
		public Assignment getTypeLitAssignment_1() { return cTypeLitAssignment_1; }
		
		//TypeLit
		public RuleCall getTypeLitTypeLitParserRuleCall_1_0() { return cTypeLitTypeLitParserRuleCall_1_0; }
		
		//"(" type=Type ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//TypeName:
		//	id=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0() { return cIdIDENTIFIERTerminalRuleCall_0; }
	}
	public class TypeNameLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeNameLinha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//TypeNameLinha:
		//	"." id=IDENTIFIER //| ANY_OTHER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"." id=IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_1_0() { return cIdIDENTIFIERTerminalRuleCall_1_0; }
	}
	public class TypeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeLitLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0 = (RuleCall)cTypeLitLinhaAssignment_0_1.eContents().get(0);
		private final Assignment cSrtuctTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSrtuctTypeStructTypeParserRuleCall_1_0 = (RuleCall)cSrtuctTypeAssignment_1.eContents().get(0);
		private final Assignment cPointerTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPointerTypePointerTypeParserRuleCall_2_0 = (RuleCall)cPointerTypeAssignment_2.eContents().get(0);
		private final Assignment cFunctionTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionTypeFunctionTypeParserRuleCall_3_0 = (RuleCall)cFunctionTypeAssignment_3.eContents().get(0);
		private final Assignment cInterfaceTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cInterfaceTypeInterfaceTypeParserRuleCall_4_0 = (RuleCall)cInterfaceTypeAssignment_4.eContents().get(0);
		private final Assignment cMapTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMapTypeMapTypeParserRuleCall_5_0 = (RuleCall)cMapTypeAssignment_5.eContents().get(0);
		private final Assignment cChannelTypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cChannelTypeChannelTypeParserRuleCall_6_0 = (RuleCall)cChannelTypeAssignment_6.eContents().get(0);
		
		//TypeLit:
		//	"[" typeLitLinha=TypeLitLinha | srtuctType=StructType | pointerType=PointerType | functionType=FunctionType |
		//	interfaceType=InterfaceType | mapType=MapType | channelType=ChannelType;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" typeLitLinha=TypeLitLinha | srtuctType=StructType | pointerType=PointerType | functionType=FunctionType |
		//interfaceType=InterfaceType | mapType=MapType | channelType=ChannelType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" typeLitLinha=TypeLitLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//typeLitLinha=TypeLitLinha
		public Assignment getTypeLitLinhaAssignment_0_1() { return cTypeLitLinhaAssignment_0_1; }
		
		//TypeLitLinha
		public RuleCall getTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0() { return cTypeLitLinhaTypeLitLinhaParserRuleCall_0_1_0; }
		
		//srtuctType=StructType
		public Assignment getSrtuctTypeAssignment_1() { return cSrtuctTypeAssignment_1; }
		
		//StructType
		public RuleCall getSrtuctTypeStructTypeParserRuleCall_1_0() { return cSrtuctTypeStructTypeParserRuleCall_1_0; }
		
		//pointerType=PointerType
		public Assignment getPointerTypeAssignment_2() { return cPointerTypeAssignment_2; }
		
		//PointerType
		public RuleCall getPointerTypePointerTypeParserRuleCall_2_0() { return cPointerTypePointerTypeParserRuleCall_2_0; }
		
		//functionType=FunctionType
		public Assignment getFunctionTypeAssignment_3() { return cFunctionTypeAssignment_3; }
		
		//FunctionType
		public RuleCall getFunctionTypeFunctionTypeParserRuleCall_3_0() { return cFunctionTypeFunctionTypeParserRuleCall_3_0; }
		
		//interfaceType=InterfaceType
		public Assignment getInterfaceTypeAssignment_4() { return cInterfaceTypeAssignment_4; }
		
		//InterfaceType
		public RuleCall getInterfaceTypeInterfaceTypeParserRuleCall_4_0() { return cInterfaceTypeInterfaceTypeParserRuleCall_4_0; }
		
		//mapType=MapType
		public Assignment getMapTypeAssignment_5() { return cMapTypeAssignment_5; }
		
		//MapType
		public RuleCall getMapTypeMapTypeParserRuleCall_5_0() { return cMapTypeMapTypeParserRuleCall_5_0; }
		
		//channelType=ChannelType
		public Assignment getChannelTypeAssignment_6() { return cChannelTypeAssignment_6; }
		
		//ChannelType
		public RuleCall getChannelTypeChannelTypeParserRuleCall_6_0() { return cChannelTypeChannelTypeParserRuleCall_6_0; }
	}
	public class TypeLitLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeLitLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArrayLengthAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArrayLengthArrayLengthParserRuleCall_0_0_0 = (RuleCall)cArrayLengthAssignment_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_2_0 = (RuleCall)cElementTypeAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_1_0 = (RuleCall)cElementTypeAssignment_1_1.eContents().get(0);
		
		//TypeLitLinha:
		//	arrayLength=ArrayLength "]" elementType=ElementType
		//	| "]" elementType=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//arrayLength=ArrayLength "]" elementType=ElementType | "]" elementType=ElementType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//arrayLength=ArrayLength "]" elementType=ElementType
		public Group getGroup_0() { return cGroup_0; }
		
		//arrayLength=ArrayLength
		public Assignment getArrayLengthAssignment_0_0() { return cArrayLengthAssignment_0_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthArrayLengthParserRuleCall_0_0_0() { return cArrayLengthArrayLengthParserRuleCall_0_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_0_2() { return cElementTypeAssignment_0_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_2_0() { return cElementTypeElementTypeParserRuleCall_0_2_0; }
		
		//"]" elementType=ElementType
		public Group getGroup_1() { return cGroup_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0() { return cRightSquareBracketKeyword_1_0; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_1_1() { return cElementTypeAssignment_1_1; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_1_0() { return cElementTypeElementTypeParserRuleCall_1_1_0; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArrayLength");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ArrayLength:
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElementType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ElementType:
		//	type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStructSTRUCTTerminalRuleCall_0_0 = (RuleCall)cStructAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldDeclFieldDeclParserRuleCall_2_0 = (RuleCall)cFieldDeclAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StructType:
		//	struct=STRUCT "{" fieldDecl+=FieldDecl* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//struct=STRUCT "{" fieldDecl+=FieldDecl* "}"
		public Group getGroup() { return cGroup; }
		
		//struct=STRUCT
		public Assignment getStructAssignment_0() { return cStructAssignment_0; }
		
		//STRUCT
		public RuleCall getStructSTRUCTTerminalRuleCall_0_0() { return cStructSTRUCTTerminalRuleCall_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//fieldDecl+=FieldDecl*
		public Assignment getFieldDeclAssignment_2() { return cFieldDeclAssignment_2; }
		
		//FieldDecl
		public RuleCall getFieldDeclFieldDeclParserRuleCall_2_0() { return cFieldDeclFieldDeclParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cIdentifierListAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0_0_0 = (RuleCall)cIdentifierListAssignment_0_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_0_1_0 = (RuleCall)cTypeAssignment_0_0_1.eContents().get(0);
		private final Assignment cEmbeddedFieldAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cEmbeddedFieldEmbeddedFieldParserRuleCall_0_1_0 = (RuleCall)cEmbeddedFieldAssignment_0_1.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//FieldDecl:
		//	(identifierList=IdentifierList type=Type | embeddedField=EmbeddedField) tag=Tag?;
		@Override public ParserRule getRule() { return rule; }
		
		//(identifierList=IdentifierList type=Type | embeddedField=EmbeddedField) tag=Tag?
		public Group getGroup() { return cGroup; }
		
		//(identifierList=IdentifierList type=Type | embeddedField=EmbeddedField)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//identifierList=IdentifierList type=Type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//identifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0_0_0() { return cIdentifierListAssignment_0_0_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_0_0_1() { return cTypeAssignment_0_0_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_1_0() { return cTypeTypeParserRuleCall_0_0_1_0; }
		
		//embeddedField=EmbeddedField
		public Assignment getEmbeddedFieldAssignment_0_1() { return cEmbeddedFieldAssignment_0_1; }
		
		//EmbeddedField
		public RuleCall getEmbeddedFieldEmbeddedFieldParserRuleCall_0_1_0() { return cEmbeddedFieldEmbeddedFieldParserRuleCall_0_1_0; }
		
		//tag=Tag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//Tag
		public RuleCall getTagTagParserRuleCall_1_0() { return cTagTagParserRuleCall_1_0; }
	}
	public class EmbeddedFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EmbeddedField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		
		//EmbeddedField:
		//	"*"? typeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//"*"? typeName=TypeName
		public Group getGroup() { return cGroup; }
		
		//"*"?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_0() { return cTypeNameTypeNameParserRuleCall_1_0; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Tag");
		private final Assignment cString_litAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cString_litSTRING_LITTerminalRuleCall_0 = (RuleCall)cString_litAssignment.eContents().get(0);
		
		//Tag:
		//	string_lit=STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//string_lit=STRING_LIT
		public Assignment getString_litAssignment() { return cString_litAssignment; }
		
		//STRING_LIT
		public RuleCall getString_litSTRING_LITTerminalRuleCall_0() { return cString_litSTRING_LITTerminalRuleCall_0; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseTypeBaseTypeParserRuleCall_1_0 = (RuleCall)cBaseTypeAssignment_1.eContents().get(0);
		
		//PointerType:
		//	"*" baseType=BaseType;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" baseType=BaseType
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//baseType=BaseType
		public Assignment getBaseTypeAssignment_1() { return cBaseTypeAssignment_1; }
		
		//BaseType
		public RuleCall getBaseTypeBaseTypeParserRuleCall_1_0() { return cBaseTypeBaseTypeParserRuleCall_1_0; }
	}
	public class BaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BaseType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//BaseType:
		//	type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFuncFuncKeyword_0_0 = (Keyword)cFuncAssignment_0.eContents().get(0);
		private final Assignment cSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_1_0 = (RuleCall)cSignatureAssignment_1.eContents().get(0);
		
		//FunctionType:
		//	func="func" signature=Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//func="func" signature=Signature
		public Group getGroup() { return cGroup; }
		
		//func="func"
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }
		
		//"func"
		public Keyword getFuncFuncKeyword_0_0() { return cFuncFuncKeyword_0_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_1() { return cSignatureAssignment_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_1_0() { return cSignatureSignatureParserRuleCall_1_0; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParametersParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Assignment cResultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultResultParserRuleCall_1_0 = (RuleCall)cResultAssignment_1.eContents().get(0);
		
		//Signature:
		//	parameters=Parameters result=Result?;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters=Parameters result=Result?
		public Group getGroup() { return cGroup; }
		
		//parameters=Parameters
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_0_0() { return cParametersParametersParserRuleCall_0_0; }
		
		//result=Result?
		public Assignment getResultAssignment_1() { return cResultAssignment_1; }
		
		//Result
		public RuleCall getResultResultParserRuleCall_1_0() { return cResultResultParserRuleCall_1_0; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParametersParametersParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Result:
		//	parameters=Parameters | type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters=Parameters | type=Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameters=Parameters
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_0_0() { return cParametersParametersParserRuleCall_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterListParameterListParserRuleCall_2_0 = (RuleCall)cParameterListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameters:
		//	{Parameters} "(" parameterList=ParameterList? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameters} "(" parameterList=ParameterList? ")"
		public Group getGroup() { return cGroup; }
		
		//{Parameters}
		public Action getParametersAction_0() { return cParametersAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameterList=ParameterList?
		public Assignment getParameterListAssignment_2() { return cParameterListAssignment_2; }
		
		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_2_0() { return cParameterListParameterListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterDeclParameterDeclParserRuleCall_0_0 = (RuleCall)cParameterDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterDecl1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterDecl1ParameterDeclParserRuleCall_1_1_0 = (RuleCall)cParameterDecl1Assignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	parameterDecl=ParameterDecl ("," parameterDecl1+=ParameterDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterDecl=ParameterDecl ("," parameterDecl1+=ParameterDecl)*
		public Group getGroup() { return cGroup; }
		
		//parameterDecl=ParameterDecl
		public Assignment getParameterDeclAssignment_0() { return cParameterDeclAssignment_0; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParameterDeclParserRuleCall_0_0() { return cParameterDeclParameterDeclParserRuleCall_0_0; }
		
		//("," parameterDecl1+=ParameterDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameterDecl1+=ParameterDecl
		public Assignment getParameterDecl1Assignment_1_1() { return cParameterDecl1Assignment_1_1; }
		
		//ParameterDecl
		public RuleCall getParameterDecl1ParameterDeclParserRuleCall_1_1_0() { return cParameterDecl1ParameterDeclParserRuleCall_1_1_0; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ParameterDecl:
		//	identifierList=IdentifierList? "..."? type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=IdentifierList? "..."? type=Type
		public Group getGroup() { return cGroup; }
		
		//identifierList=IdentifierList?
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInterfaceINTERFACETerminalRuleCall_0_0 = (RuleCall)cInterfaceAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodSpecMethodSpecParserRuleCall_2_0 = (RuleCall)cMethodSpecAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InterfaceType:
		//	interface=INTERFACE "{" methodSpec+=MethodSpec* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//interface=INTERFACE "{" methodSpec+=MethodSpec* "}"
		public Group getGroup() { return cGroup; }
		
		//interface=INTERFACE
		public Assignment getInterfaceAssignment_0() { return cInterfaceAssignment_0; }
		
		//INTERFACE
		public RuleCall getInterfaceINTERFACETerminalRuleCall_0_0() { return cInterfaceINTERFACETerminalRuleCall_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//methodSpec+=MethodSpec*
		public Assignment getMethodSpecAssignment_2() { return cMethodSpecAssignment_2; }
		
		//MethodSpec
		public RuleCall getMethodSpecMethodSpecParserRuleCall_2_0() { return cMethodSpecMethodSpecParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MethodSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMethodNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMethodNameMethodNameParserRuleCall_0_0_0 = (RuleCall)cMethodNameAssignment_0_0.eContents().get(0);
		private final Assignment cSignatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_0_1_0 = (RuleCall)cSignatureAssignment_0_1.eContents().get(0);
		private final Assignment cInterfaceTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceTypeNameInterfaceTypeNameParserRuleCall_1_0 = (RuleCall)cInterfaceTypeNameAssignment_1.eContents().get(0);
		
		//MethodSpec:
		//	methodName=MethodName Signature=Signature | interfaceTypeName=InterfaceTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//methodName=MethodName Signature=Signature | interfaceTypeName=InterfaceTypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//methodName=MethodName Signature=Signature
		public Group getGroup_0() { return cGroup_0; }
		
		//methodName=MethodName
		public Assignment getMethodNameAssignment_0_0() { return cMethodNameAssignment_0_0; }
		
		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_0_0_0() { return cMethodNameMethodNameParserRuleCall_0_0_0; }
		
		//Signature=Signature
		public Assignment getSignatureAssignment_0_1() { return cSignatureAssignment_0_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_0_1_0() { return cSignatureSignatureParserRuleCall_0_1_0; }
		
		//interfaceTypeName=InterfaceTypeName
		public Assignment getInterfaceTypeNameAssignment_1() { return cInterfaceTypeNameAssignment_1; }
		
		//InterfaceTypeName
		public RuleCall getInterfaceTypeNameInterfaceTypeNameParserRuleCall_1_0() { return cInterfaceTypeNameInterfaceTypeNameParserRuleCall_1_0; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//MethodName:
		//	id=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0() { return cIdIDENTIFIERTerminalRuleCall_0; }
	}
	public class InterfaceTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InterfaceTypeName");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_0 = (RuleCall)cTypeNameAssignment.eContents().get(0);
		
		//InterfaceTypeName:
		//	typeName=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_0() { return cTypeNameTypeNameParserRuleCall_0; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMapAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMapMAPTerminalRuleCall_0_0 = (RuleCall)cMapAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeKeyTypeParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementTypeElementTypeParserRuleCall_4_0 = (RuleCall)cElementTypeAssignment_4.eContents().get(0);
		
		//MapType:
		//	map=MAP "[" keyType=KeyType "]" elementType=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//map=MAP "[" keyType=KeyType "]" elementType=ElementType
		public Group getGroup() { return cGroup; }
		
		//map=MAP
		public Assignment getMapAssignment_0() { return cMapAssignment_0; }
		
		//MAP
		public RuleCall getMapMAPTerminalRuleCall_0_0() { return cMapMAPTerminalRuleCall_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//keyType=KeyType
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//KeyType
		public RuleCall getKeyTypeKeyTypeParserRuleCall_2_0() { return cKeyTypeKeyTypeParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_4() { return cElementTypeAssignment_4; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_4_0() { return cElementTypeElementTypeParserRuleCall_4_0; }
	}
	public class KeyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.KeyType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//KeyType:
		//	type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class ChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ChannelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cChanAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cChanCHANTerminalRuleCall_0_0_0_0 = (RuleCall)cChanAssignment_0_0_0.eContents().get(0);
		private final Assignment cChannelTypeLinhaAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cChannelTypeLinhaChannelTypeLinhaParserRuleCall_0_0_1_0 = (RuleCall)cChannelTypeLinhaAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cChanAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cChanCHANTerminalRuleCall_0_1_1_0 = (RuleCall)cChanAssignment_0_1_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_0 = (RuleCall)cElementTypeAssignment_1.eContents().get(0);
		
		//ChannelType:
		//	(chan=CHAN channelTypeLinha=ChannelTypeLinha | "<-" chan=CHAN) elementType=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//(chan=CHAN channelTypeLinha=ChannelTypeLinha | "<-" chan=CHAN) elementType=ElementType
		public Group getGroup() { return cGroup; }
		
		//(chan=CHAN channelTypeLinha=ChannelTypeLinha | "<-" chan=CHAN)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//chan=CHAN channelTypeLinha=ChannelTypeLinha
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//chan=CHAN
		public Assignment getChanAssignment_0_0_0() { return cChanAssignment_0_0_0; }
		
		//CHAN
		public RuleCall getChanCHANTerminalRuleCall_0_0_0_0() { return cChanCHANTerminalRuleCall_0_0_0_0; }
		
		//channelTypeLinha=ChannelTypeLinha
		public Assignment getChannelTypeLinhaAssignment_0_0_1() { return cChannelTypeLinhaAssignment_0_0_1; }
		
		//ChannelTypeLinha
		public RuleCall getChannelTypeLinhaChannelTypeLinhaParserRuleCall_0_0_1_0() { return cChannelTypeLinhaChannelTypeLinhaParserRuleCall_0_0_1_0; }
		
		//"<-" chan=CHAN
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_0() { return cLessThanSignHyphenMinusKeyword_0_1_0; }
		
		//chan=CHAN
		public Assignment getChanAssignment_0_1_1() { return cChanAssignment_0_1_1; }
		
		//CHAN
		public RuleCall getChanCHANTerminalRuleCall_0_1_1_0() { return cChanCHANTerminalRuleCall_0_1_1_0; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_1() { return cElementTypeAssignment_1; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_0() { return cElementTypeElementTypeParserRuleCall_1_0; }
	}
	public class ChannelTypeLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ChannelTypeLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Assignment cANY_OTHERAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cANY_OTHERANY_OTHERTerminalRuleCall_1_0 = (RuleCall)cANY_OTHERAssignment_1.eContents().get(0);
		
		//ChannelTypeLinha:
		//	"<-" | aNY_OTHER=ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" | aNY_OTHER=ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0() { return cLessThanSignHyphenMinusKeyword_0; }
		
		//aNY_OTHER=ANY_OTHER
		public Assignment getANY_OTHERAssignment_1() { return cANY_OTHERAssignment_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERANY_OTHERTerminalRuleCall_1_0() { return cANY_OTHERANY_OTHERTerminalRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementListStatementListParserRuleCall_1_0 = (RuleCall)cStatementListAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" statementList=StatementList "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" statementList=StatementList "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//statementList=StatementList
		public Assignment getStatementListAssignment_1() { return cStatementListAssignment_1; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_1_0() { return cStatementListStatementListParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_1_0_0 = (RuleCall)cStatementsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StatementList:
		//	{StatementList} (statements+=Statement ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementList} (statements+=Statement ";")*
		public Group getGroup() { return cGroup; }
		
		//{StatementList}
		public Action getStatementListAction_0() { return cStatementListAction_0; }
		
		//(statements+=Statement ";")*
		public Group getGroup_1() { return cGroup_1; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_1_0() { return cStatementsAssignment_1_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0_0() { return cStatementsStatementParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstDeclConstDeclParserRuleCall_0_0 = (RuleCall)cConstDeclAssignment_0.eContents().get(0);
		private final Assignment cTypeDeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDeclTypeDeclParserRuleCall_1_0 = (RuleCall)cTypeDeclAssignment_1.eContents().get(0);
		private final Assignment cVarDeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVarDeclVarDeclParserRuleCall_2_0 = (RuleCall)cVarDeclAssignment_2.eContents().get(0);
		
		//Declaration:
		//	constDecl=ConstDecl | typeDecl=TypeDecl | varDecl=VarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//constDecl=ConstDecl | typeDecl=TypeDecl | varDecl=VarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constDecl=ConstDecl
		public Assignment getConstDeclAssignment_0() { return cConstDeclAssignment_0; }
		
		//ConstDecl
		public RuleCall getConstDeclConstDeclParserRuleCall_0_0() { return cConstDeclConstDeclParserRuleCall_0_0; }
		
		//typeDecl=TypeDecl
		public Assignment getTypeDeclAssignment_1() { return cTypeDeclAssignment_1; }
		
		//TypeDecl
		public RuleCall getTypeDeclTypeDeclParserRuleCall_1_0() { return cTypeDeclTypeDeclParserRuleCall_1_0; }
		
		//varDecl=VarDecl
		public Assignment getVarDeclAssignment_2() { return cVarDeclAssignment_2; }
		
		//VarDecl
		public RuleCall getVarDeclVarDeclParserRuleCall_2_0() { return cVarDeclVarDeclParserRuleCall_2_0; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TopLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cFunctionDeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDeclFunctionDeclParserRuleCall_1_0 = (RuleCall)cFunctionDeclAssignment_1.eContents().get(0);
		private final Assignment cMethodDeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMethodDeclMethodDeclParserRuleCall_2_0 = (RuleCall)cMethodDeclAssignment_2.eContents().get(0);
		
		//TopLevelDecl:
		//	declaration=Declaration | functionDecl=FunctionDecl | methodDecl=MethodDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=Declaration | functionDecl=FunctionDecl | methodDecl=MethodDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//functionDecl=FunctionDecl
		public Assignment getFunctionDeclAssignment_1() { return cFunctionDeclAssignment_1; }
		
		//FunctionDecl
		public RuleCall getFunctionDeclFunctionDeclParserRuleCall_1_0() { return cFunctionDeclFunctionDeclParserRuleCall_1_0; }
		
		//methodDecl=MethodDecl
		public Assignment getMethodDeclAssignment_2() { return cMethodDeclAssignment_2; }
		
		//MethodDecl
		public RuleCall getMethodDeclMethodDeclParserRuleCall_2_0() { return cMethodDeclMethodDeclParserRuleCall_2_0; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConstDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstSpecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConstSpecConstSpecParserRuleCall_1_0_0 = (RuleCall)cConstSpecAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cConstSpec1Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstSpec1ConstSpecParserRuleCall_1_1_1_0 = (RuleCall)cConstSpec1Assignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ConstDecl:
		//	const='const' (constSpec=ConstSpec | "(" constSpec1+=ConstSpec* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//const='const' (constSpec=ConstSpec | "(" constSpec1+=ConstSpec* ")")
		public Group getGroup() { return cGroup; }
		
		//const='const'
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//'const'
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }
		
		//(constSpec=ConstSpec | "(" constSpec1+=ConstSpec* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//constSpec=ConstSpec
		public Assignment getConstSpecAssignment_1_0() { return cConstSpecAssignment_1_0; }
		
		//ConstSpec
		public RuleCall getConstSpecConstSpecParserRuleCall_1_0_0() { return cConstSpecConstSpecParserRuleCall_1_0_0; }
		
		//"(" constSpec1+=ConstSpec* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//constSpec1+=ConstSpec*
		public Assignment getConstSpec1Assignment_1_1_1() { return cConstSpec1Assignment_1_1_1; }
		
		//ConstSpec
		public RuleCall getConstSpec1ConstSpecParserRuleCall_1_1_1_0() { return cConstSpec1ConstSpecParserRuleCall_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ConstSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConstSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_2_0 = (RuleCall)cExpressionListAssignment_1_2.eContents().get(0);
		
		//ConstSpec:
		//	identifierList=IdentifierList (type=Type? "=" expressionList=ExpressionList)? //(type = (Type)? "=" expressionList = ExpressionList)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=IdentifierList (type=Type? "=" expressionList=ExpressionList)?
		public Group getGroup() { return cGroup; }
		
		//identifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//(type=Type? "=" expressionList=ExpressionList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type=Type?
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_0() { return cTypeTypeParserRuleCall_1_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_1_2() { return cExpressionListAssignment_1_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_2_0() { return cExpressionListExpressionListParserRuleCall_1_2_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cId1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cId1IDENTIFIERTerminalRuleCall_1_1_0 = (RuleCall)cId1Assignment_1_1.eContents().get(0);
		
		//IdentifierList:
		//	id=IDENTIFIER ("," id1+=IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER ("," id1+=IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0_0() { return cIdIDENTIFIERTerminalRuleCall_0_0; }
		
		//("," id1+=IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//id1+=IDENTIFIER
		public Assignment getId1Assignment_1_1() { return cId1Assignment_1_1; }
		
		//IDENTIFIER
		public RuleCall getId1IDENTIFIERTerminalRuleCall_1_1_0() { return cId1IDENTIFIERTerminalRuleCall_1_1_0; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression1Assignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	expression=Expression ("," expression1+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression ("," expression1+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//("," expression1+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expression1+=Expression
		public Assignment getExpression1Assignment_1_1() { return cExpression1Assignment_1_1; }
		
		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_1_0() { return cExpression1ExpressionParserRuleCall_1_1_0; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypekeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypekeywordTypeKeyword_0_0 = (Keyword)cTypekeywordAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeSpecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeSpecTypeSpecParserRuleCall_1_0_0 = (RuleCall)cTypeSpecAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypeSpec1Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeSpec1TypeSpecParserRuleCall_1_1_1_0 = (RuleCall)cTypeSpec1Assignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//TypeDecl:
		//	typekeyword='type' (typeSpec=TypeSpec | "(" typeSpec1+=TypeSpec* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//typekeyword='type' (typeSpec=TypeSpec | "(" typeSpec1+=TypeSpec* ")")
		public Group getGroup() { return cGroup; }
		
		//typekeyword='type'
		public Assignment getTypekeywordAssignment_0() { return cTypekeywordAssignment_0; }
		
		//'type'
		public Keyword getTypekeywordTypeKeyword_0_0() { return cTypekeywordTypeKeyword_0_0; }
		
		//(typeSpec=TypeSpec | "(" typeSpec1+=TypeSpec* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//typeSpec=TypeSpec
		public Assignment getTypeSpecAssignment_1_0() { return cTypeSpecAssignment_1_0; }
		
		//TypeSpec
		public RuleCall getTypeSpecTypeSpecParserRuleCall_1_0_0() { return cTypeSpecTypeSpecParserRuleCall_1_0_0; }
		
		//"(" typeSpec1+=TypeSpec* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//typeSpec1+=TypeSpec*
		public Assignment getTypeSpec1Assignment_1_1_1() { return cTypeSpec1Assignment_1_1_1; }
		
		//TypeSpec
		public RuleCall getTypeSpec1TypeSpecParserRuleCall_1_1_1_0() { return cTypeSpec1TypeSpecParserRuleCall_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAliasDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAliasDeclAliasDeclParserRuleCall_0_0 = (RuleCall)cAliasDeclAssignment_0.eContents().get(0);
		private final Assignment cTypeDefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDefTypeDefParserRuleCall_1_0 = (RuleCall)cTypeDefAssignment_1.eContents().get(0);
		
		//TypeSpec:
		//	aliasDecl=AliasDecl | typeDef=TypeDef;
		@Override public ParserRule getRule() { return rule; }
		
		//aliasDecl=AliasDecl | typeDef=TypeDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//aliasDecl=AliasDecl
		public Assignment getAliasDeclAssignment_0() { return cAliasDeclAssignment_0; }
		
		//AliasDecl
		public RuleCall getAliasDeclAliasDeclParserRuleCall_0_0() { return cAliasDeclAliasDeclParserRuleCall_0_0; }
		
		//typeDef=TypeDef
		public Assignment getTypeDefAssignment_1() { return cTypeDefAssignment_1; }
		
		//TypeDef
		public RuleCall getTypeDefTypeDefParserRuleCall_1_0() { return cTypeDefTypeDefParserRuleCall_1_0; }
	}
	public class AliasDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AliasDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//AliasDecl:
		//	id=IDENTIFIER "=" type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER "=" type=Type
		public Group getGroup() { return cGroup; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0_0() { return cIdIDENTIFIERTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeDef:
		//	id=IDENTIFIER type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER type=Type
		public Group getGroup() { return cGroup; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0_0() { return cIdIDENTIFIERTerminalRuleCall_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cVarVarKeyword_0_0 = (Keyword)cVarAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVarSpecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVarSpecVarSpecParserRuleCall_1_0_0 = (RuleCall)cVarSpecAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cVarSpec1Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVarSpec1VarSpecParserRuleCall_1_1_1_0 = (RuleCall)cVarSpec1Assignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//VarDecl:
		//	var="var" (varSpec=VarSpec | "(" varSpec1+=VarSpec* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//var="var" (varSpec=VarSpec | "(" varSpec1+=VarSpec* ")")
		public Group getGroup() { return cGroup; }
		
		//var="var"
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//"var"
		public Keyword getVarVarKeyword_0_0() { return cVarVarKeyword_0_0; }
		
		//(varSpec=VarSpec | "(" varSpec1+=VarSpec* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//varSpec=VarSpec
		public Assignment getVarSpecAssignment_1_0() { return cVarSpecAssignment_1_0; }
		
		//VarSpec
		public RuleCall getVarSpecVarSpecParserRuleCall_1_0_0() { return cVarSpecVarSpecParserRuleCall_1_0_0; }
		
		//"(" varSpec1+=VarSpec* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//varSpec1+=VarSpec*
		public Assignment getVarSpec1Assignment_1_1_1() { return cVarSpec1Assignment_1_1_1; }
		
		//VarSpec
		public RuleCall getVarSpec1VarSpecParserRuleCall_1_1_1_0() { return cVarSpec1VarSpecParserRuleCall_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0_0 = (RuleCall)cTypeAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_1_1_0 = (RuleCall)cExpressionListAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_1_1_0 = (RuleCall)cExpressionListAssignment_1_1_1.eContents().get(0);
		
		//VarSpec:
		//	IdentifierList=IdentifierList (type=Type ("=" expressionList=ExpressionList)? | "=" expressionList=ExpressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList=IdentifierList (type=Type ("=" expressionList=ExpressionList)? | "=" expressionList=ExpressionList)
		public Group getGroup() { return cGroup; }
		
		//IdentifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//(type=Type ("=" expressionList=ExpressionList)? | "=" expressionList=ExpressionList)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=Type ("=" expressionList=ExpressionList)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1_0_0() { return cTypeAssignment_1_0_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_0_0() { return cTypeTypeParserRuleCall_1_0_0_0; }
		
		//("=" expressionList=ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_1_0_1_1() { return cExpressionListAssignment_1_0_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_1_1_0() { return cExpressionListExpressionListParserRuleCall_1_0_1_1_0; }
		
		//"=" expressionList=ExpressionList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_1_1_1() { return cExpressionListAssignment_1_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_1_1_0() { return cExpressionListExpressionListParserRuleCall_1_1_1_0; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ShortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionListAssignment_2.eContents().get(0);
		
		//ShortVarDecl:
		//	identifierList=IdentifierList ":=" expressionList=ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=IdentifierList ":=" expressionList=ExpressionList
		public Group getGroup() { return cGroup; }
		
		//identifierList=IdentifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_2() { return cExpressionListAssignment_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0() { return cExpressionListExpressionListParserRuleCall_2_0; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionNameFunctionNameParserRuleCall_1_0 = (RuleCall)cFunctionNameAssignment_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_3_0 = (RuleCall)cFunctionBodyAssignment_3.eContents().get(0);
		
		//FunctionDecl:
		//	"func" functionName=FunctionName signature=Signature functionBody=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" functionName=FunctionName signature=Signature functionBody=FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//functionName=FunctionName
		public Assignment getFunctionNameAssignment_1() { return cFunctionNameAssignment_1; }
		
		//FunctionName
		public RuleCall getFunctionNameFunctionNameParserRuleCall_1_0() { return cFunctionNameFunctionNameParserRuleCall_1_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_2_0() { return cSignatureSignatureParserRuleCall_2_0; }
		
		//functionBody=FunctionBody?
		public Assignment getFunctionBodyAssignment_3() { return cFunctionBodyAssignment_3; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_3_0() { return cFunctionBodyFunctionBodyParserRuleCall_3_0; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//FunctionName:
		//	id=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0() { return cIdIDENTIFIERTerminalRuleCall_0; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionBody");
		private final Assignment cBlockAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_0 = (RuleCall)cBlockAssignment.eContents().get(0);
		
		//FunctionBody:
		//	block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//block=Block
		public Assignment getBlockAssignment() { return cBlockAssignment; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_0() { return cBlockBlockParserRuleCall_0; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReceiverAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReceiverReceiverParserRuleCall_1_0 = (RuleCall)cReceiverAssignment_1.eContents().get(0);
		private final Assignment cMethodNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodNameMethodNameParserRuleCall_2_0 = (RuleCall)cMethodNameAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureSignatureParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_4_0 = (RuleCall)cFunctionBodyAssignment_4.eContents().get(0);
		
		//MethodDecl:
		//	"func" receiver=Receiver methodName=MethodName signature=Signature functionBody=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" receiver=Receiver methodName=MethodName signature=Signature functionBody=FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//receiver=Receiver
		public Assignment getReceiverAssignment_1() { return cReceiverAssignment_1; }
		
		//Receiver
		public RuleCall getReceiverReceiverParserRuleCall_1_0() { return cReceiverReceiverParserRuleCall_1_0; }
		
		//methodName=MethodName
		public Assignment getMethodNameAssignment_2() { return cMethodNameAssignment_2; }
		
		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_2_0() { return cMethodNameMethodNameParserRuleCall_2_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_3_0() { return cSignatureSignatureParserRuleCall_3_0; }
		
		//functionBody=FunctionBody?
		public Assignment getFunctionBodyAssignment_4() { return cFunctionBodyAssignment_4; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_4_0() { return cFunctionBodyFunctionBodyParserRuleCall_4_0; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Receiver");
		private final Assignment cParametersAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParametersParametersParserRuleCall_0 = (RuleCall)cParametersAssignment.eContents().get(0);
		
		//Receiver:
		//	parameters=Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters=Parameters
		public Assignment getParametersAssignment() { return cParametersAssignment; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_0() { return cParametersParametersParserRuleCall_0; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cOperandNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperandNameOperandNameParserRuleCall_1_0 = (RuleCall)cOperandNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Operand:
		//	literal=Literal | operandName=OperandName | "(" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//literal=Literal | operandName=OperandName | "(" expression=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }
		
		//operandName=OperandName
		public Assignment getOperandNameAssignment_1() { return cOperandNameAssignment_1; }
		
		//OperandName
		public RuleCall getOperandNameOperandNameParserRuleCall_1_0() { return cOperandNameOperandNameParserRuleCall_1_0; }
		
		//"(" expression=Expression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasicLitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBasicLitBasicLitParserRuleCall_0_0 = (RuleCall)cBasicLitAssignment_0.eContents().get(0);
		private final Assignment cCompositeLitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeLitCompositeLitParserRuleCall_1_0 = (RuleCall)cCompositeLitAssignment_1.eContents().get(0);
		private final Assignment cFunctionLitAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionLitFunctionLitParserRuleCall_2_0 = (RuleCall)cFunctionLitAssignment_2.eContents().get(0);
		
		//Literal:
		//	basicLit=BasicLit | compositeLit=CompositeLit | functionLit=FunctionLit;
		@Override public ParserRule getRule() { return rule; }
		
		//basicLit=BasicLit | compositeLit=CompositeLit | functionLit=FunctionLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//basicLit=BasicLit
		public Assignment getBasicLitAssignment_0() { return cBasicLitAssignment_0; }
		
		//BasicLit
		public RuleCall getBasicLitBasicLitParserRuleCall_0_0() { return cBasicLitBasicLitParserRuleCall_0_0; }
		
		//compositeLit=CompositeLit
		public Assignment getCompositeLitAssignment_1() { return cCompositeLitAssignment_1; }
		
		//CompositeLit
		public RuleCall getCompositeLitCompositeLitParserRuleCall_1_0() { return cCompositeLitCompositeLitParserRuleCall_1_0; }
		
		//functionLit=FunctionLit
		public Assignment getFunctionLitAssignment_2() { return cFunctionLitAssignment_2; }
		
		//FunctionLit
		public RuleCall getFunctionLitFunctionLitParserRuleCall_2_0() { return cFunctionLitFunctionLitParserRuleCall_2_0; }
	}
	public class BasicLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BasicLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInt_litAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInt_litINT_LITTerminalRuleCall_0_0 = (RuleCall)cInt_litAssignment_0.eContents().get(0);
		private final Assignment cFloat_litAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFloat_litFLOAT_LITTerminalRuleCall_1_0 = (RuleCall)cFloat_litAssignment_1.eContents().get(0);
		private final Assignment cImaginary_litAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cImaginary_litIMAGINARY_LITTerminalRuleCall_2_0 = (RuleCall)cImaginary_litAssignment_2.eContents().get(0);
		private final Assignment cRune_litAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRune_litRUNE_LITTerminalRuleCall_3_0 = (RuleCall)cRune_litAssignment_3.eContents().get(0);
		private final Assignment cString_litAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cString_litSTRING_LITTerminalRuleCall_4_0 = (RuleCall)cString_litAssignment_4.eContents().get(0);
		
		//BasicLit:
		//	int_lit=INT_LIT | float_lit=FLOAT_LIT | imaginary_lit=IMAGINARY_LIT | rune_lit=RUNE_LIT | string_lit=STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//int_lit=INT_LIT | float_lit=FLOAT_LIT | imaginary_lit=IMAGINARY_LIT | rune_lit=RUNE_LIT | string_lit=STRING_LIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int_lit=INT_LIT
		public Assignment getInt_litAssignment_0() { return cInt_litAssignment_0; }
		
		//INT_LIT
		public RuleCall getInt_litINT_LITTerminalRuleCall_0_0() { return cInt_litINT_LITTerminalRuleCall_0_0; }
		
		//float_lit=FLOAT_LIT
		public Assignment getFloat_litAssignment_1() { return cFloat_litAssignment_1; }
		
		//FLOAT_LIT
		public RuleCall getFloat_litFLOAT_LITTerminalRuleCall_1_0() { return cFloat_litFLOAT_LITTerminalRuleCall_1_0; }
		
		//imaginary_lit=IMAGINARY_LIT
		public Assignment getImaginary_litAssignment_2() { return cImaginary_litAssignment_2; }
		
		//IMAGINARY_LIT
		public RuleCall getImaginary_litIMAGINARY_LITTerminalRuleCall_2_0() { return cImaginary_litIMAGINARY_LITTerminalRuleCall_2_0; }
		
		//rune_lit=RUNE_LIT
		public Assignment getRune_litAssignment_3() { return cRune_litAssignment_3; }
		
		//RUNE_LIT
		public RuleCall getRune_litRUNE_LITTerminalRuleCall_3_0() { return cRune_litRUNE_LITTerminalRuleCall_3_0; }
		
		//string_lit=STRING_LIT
		public Assignment getString_litAssignment_4() { return cString_litAssignment_4; }
		
		//STRING_LIT
		public RuleCall getString_litSTRING_LITTerminalRuleCall_4_0() { return cString_litSTRING_LITTerminalRuleCall_4_0; }
	}
	public class OperandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperandName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//OperandName:
		//	id=IDENTIFIER //OperandNameLinha
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0() { return cIdIDENTIFIERTerminalRuleCall_0; }
	}
	public class CompositeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CompositeLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteralTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLiteralTypeLiteralTypeParserRuleCall_0_0 = (RuleCall)cLiteralTypeAssignment_0.eContents().get(0);
		private final Assignment cLiteralValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_1_0 = (RuleCall)cLiteralValueAssignment_1.eContents().get(0);
		
		/// *OperandNameLinha:
		//	"." IDENTIFIER |  ANY_OTHER
		//;* / CompositeLit:
		//	literalType=LiteralType literalValue=LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//literalType=LiteralType literalValue=LiteralValue
		public Group getGroup() { return cGroup; }
		
		//literalType=LiteralType
		public Assignment getLiteralTypeAssignment_0() { return cLiteralTypeAssignment_0; }
		
		//LiteralType
		public RuleCall getLiteralTypeLiteralTypeParserRuleCall_0_0() { return cLiteralTypeLiteralTypeParserRuleCall_0_0; }
		
		//literalValue=LiteralValue
		public Assignment getLiteralValueAssignment_1() { return cLiteralValueAssignment_1; }
		
		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_1_0() { return cLiteralValueLiteralValueParserRuleCall_1_0; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStructTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStructTypeStructTypeParserRuleCall_0_0 = (RuleCall)cStructTypeAssignment_0.eContents().get(0);
		private final Assignment cMapTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMapTypeMapTypeParserRuleCall_1_0 = (RuleCall)cMapTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLiteralTypeLinhaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLiteralTypeLinhaLiteralTypeLinhaParserRuleCall_3_1_0 = (RuleCall)cLiteralTypeLinhaAssignment_3_1.eContents().get(0);
		
		//LiteralType:
		//	structType=StructType | mapType=MapType | typeName=TypeName | "[" literalTypeLinha=LiteralTypeLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//structType=StructType | mapType=MapType | typeName=TypeName | "[" literalTypeLinha=LiteralTypeLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//structType=StructType
		public Assignment getStructTypeAssignment_0() { return cStructTypeAssignment_0; }
		
		//StructType
		public RuleCall getStructTypeStructTypeParserRuleCall_0_0() { return cStructTypeStructTypeParserRuleCall_0_0; }
		
		//mapType=MapType
		public Assignment getMapTypeAssignment_1() { return cMapTypeAssignment_1; }
		
		//MapType
		public RuleCall getMapTypeMapTypeParserRuleCall_1_0() { return cMapTypeMapTypeParserRuleCall_1_0; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_2_0() { return cTypeNameTypeNameParserRuleCall_2_0; }
		
		//"[" literalTypeLinha=LiteralTypeLinha
		public Group getGroup_3() { return cGroup_3; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//literalTypeLinha=LiteralTypeLinha
		public Assignment getLiteralTypeLinhaAssignment_3_1() { return cLiteralTypeLinhaAssignment_3_1; }
		
		//LiteralTypeLinha
		public RuleCall getLiteralTypeLinhaLiteralTypeLinhaParserRuleCall_3_1_0() { return cLiteralTypeLinhaLiteralTypeLinhaParserRuleCall_3_1_0; }
	}
	public class LiteralTypeLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralTypeLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArrayLengthAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArrayLengthArrayLengthParserRuleCall_0_0_0 = (RuleCall)cArrayLengthAssignment_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_2_0 = (RuleCall)cElementTypeAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_2_0 = (RuleCall)cElementTypeAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementTypeElementTypeParserRuleCall_2_1_0 = (RuleCall)cElementTypeAssignment_2_1.eContents().get(0);
		
		//LiteralTypeLinha:
		//	arrayLength=ArrayLength "]" elementType=ElementType |
		//	"..." "]" elementType=ElementType |
		//	"]" elementType=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//arrayLength=ArrayLength "]" elementType=ElementType | "..." "]" elementType=ElementType | "]" elementType=ElementType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//arrayLength=ArrayLength "]" elementType=ElementType
		public Group getGroup_0() { return cGroup_0; }
		
		//arrayLength=ArrayLength
		public Assignment getArrayLengthAssignment_0_0() { return cArrayLengthAssignment_0_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthArrayLengthParserRuleCall_0_0_0() { return cArrayLengthArrayLengthParserRuleCall_0_0_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_0_2() { return cElementTypeAssignment_0_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_2_0() { return cElementTypeElementTypeParserRuleCall_0_2_0; }
		
		//"..." "]" elementType=ElementType
		public Group getGroup_1() { return cGroup_1; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_0() { return cFullStopFullStopFullStopKeyword_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_1_2() { return cElementTypeAssignment_1_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_2_0() { return cElementTypeElementTypeParserRuleCall_1_2_0; }
		
		//"]" elementType=ElementType
		public Group getGroup_2() { return cGroup_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_0() { return cRightSquareBracketKeyword_2_0; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_2_1() { return cElementTypeAssignment_2_1; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_2_1_0() { return cElementTypeElementTypeParserRuleCall_2_1_0; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementListElementListParserRuleCall_2_0_0 = (RuleCall)cElementListAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LiteralValue:
		//	{LiteralValue} "{" (elementList=ElementList ","?)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{LiteralValue} "{" (elementList=ElementList ","?)? "}"
		public Group getGroup() { return cGroup; }
		
		//{LiteralValue}
		public Action getLiteralValueAction_0() { return cLiteralValueAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(elementList=ElementList ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elementList=ElementList
		public Assignment getElementListAssignment_2_0() { return cElementListAssignment_2_0; }
		
		//ElementList
		public RuleCall getElementListElementListParserRuleCall_2_0_0() { return cElementListElementListParserRuleCall_2_0_0; }
		
		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyedElementKeyedElementParserRuleCall_0_0 = (RuleCall)cKeyedElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyedElement1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyedElement1KeyedElementParserRuleCall_1_1_0 = (RuleCall)cKeyedElement1Assignment_1_1.eContents().get(0);
		
		//ElementList:
		//	keyedElement=KeyedElement ("," keyedElement1+=KeyedElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyedElement=KeyedElement ("," keyedElement1+=KeyedElement)*
		public Group getGroup() { return cGroup; }
		
		//keyedElement=KeyedElement
		public Assignment getKeyedElementAssignment_0() { return cKeyedElementAssignment_0; }
		
		//KeyedElement
		public RuleCall getKeyedElementKeyedElementParserRuleCall_0_0() { return cKeyedElementKeyedElementParserRuleCall_0_0; }
		
		//("," keyedElement1+=KeyedElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//keyedElement1+=KeyedElement
		public Assignment getKeyedElement1Assignment_1_1() { return cKeyedElement1Assignment_1_1; }
		
		//KeyedElement
		public RuleCall getKeyedElement1KeyedElementParserRuleCall_1_1_0() { return cKeyedElement1KeyedElementParserRuleCall_1_1_0; }
	}
	public class KeyedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.KeyedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyKeyParserRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//KeyedElement:
		//	(key=Key ":")? element=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//(key=Key ":")? element=Element
		public Group getGroup() { return cGroup; }
		
		//(key=Key ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//key=Key
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//Key
		public RuleCall getKeyKeyParserRuleCall_0_0_0() { return cKeyKeyParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//element=Element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFieldNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFieldNameFieldNameParserRuleCall_0_0 = (RuleCall)cFieldNameAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cLiteralValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_2_0 = (RuleCall)cLiteralValueAssignment_2.eContents().get(0);
		
		//Key:
		//	fieldName=FieldName | expression=Expression | literalValue=LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//fieldName=FieldName | expression=Expression | literalValue=LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fieldName=FieldName
		public Assignment getFieldNameAssignment_0() { return cFieldNameAssignment_0; }
		
		//FieldName
		public RuleCall getFieldNameFieldNameParserRuleCall_0_0() { return cFieldNameFieldNameParserRuleCall_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//literalValue=LiteralValue
		public Assignment getLiteralValueAssignment_2() { return cLiteralValueAssignment_2; }
		
		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_2_0() { return cLiteralValueLiteralValueParserRuleCall_2_0; }
	}
	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FieldName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//FieldName:
		//	id=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0() { return cIdIDENTIFIERTerminalRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cLiteralValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_1_0 = (RuleCall)cLiteralValueAssignment_1.eContents().get(0);
		
		//Element:
		//	expression=Expression | literalValue=LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression | literalValue=LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//literalValue=LiteralValue
		public Assignment getLiteralValueAssignment_1() { return cLiteralValueAssignment_1; }
		
		//LiteralValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_1_0() { return cLiteralValueLiteralValueParserRuleCall_1_0; }
	}
	public class FunctionLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFuncFuncKeyword_0_0 = (Keyword)cFuncAssignment_0.eContents().get(0);
		private final Assignment cSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_1_0 = (RuleCall)cSignatureAssignment_1.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_2_0 = (RuleCall)cFunctionBodyAssignment_2.eContents().get(0);
		
		//FunctionLit:
		//	func="func" signature=Signature functionBody=FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//func="func" signature=Signature functionBody=FunctionBody
		public Group getGroup() { return cGroup; }
		
		//func="func"
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }
		
		//"func"
		public Keyword getFuncFuncKeyword_0_0() { return cFuncFuncKeyword_0_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_1() { return cSignatureAssignment_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_1_0() { return cSignatureSignatureParserRuleCall_1_0; }
		
		//functionBody=FunctionBody
		public Assignment getFunctionBodyAssignment_2() { return cFunctionBodyAssignment_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_2_0() { return cFunctionBodyFunctionBodyParserRuleCall_2_0; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperandAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperandOperandParserRuleCall_0_0_0 = (RuleCall)cOperandAssignment_0_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cConversionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConversionConversionParserRuleCall_1_0_0 = (RuleCall)cConversionAssignment_1_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMethodExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMethodExprMethodExprParserRuleCall_2_0_0 = (RuleCall)cMethodExprAssignment_2_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_2_1.eContents().get(0);
		
		//PrimaryExpr:
		//	operand=Operand primaryExprLinha=PrimaryExprLinha | conversion=Conversion primaryExprLinha=PrimaryExprLinha |
		//	methodExpr=MethodExpr primaryExprLinha=PrimaryExprLinha;
		@Override public ParserRule getRule() { return rule; }
		
		//operand=Operand primaryExprLinha=PrimaryExprLinha | conversion=Conversion primaryExprLinha=PrimaryExprLinha |
		//methodExpr=MethodExpr primaryExprLinha=PrimaryExprLinha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operand=Operand primaryExprLinha=PrimaryExprLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//operand=Operand
		public Assignment getOperandAssignment_0_0() { return cOperandAssignment_0_0; }
		
		//Operand
		public RuleCall getOperandOperandParserRuleCall_0_0_0() { return cOperandOperandParserRuleCall_0_0_0; }
		
		//primaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_0_1() { return cPrimaryExprLinhaAssignment_0_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_0_1_0; }
		
		//conversion=Conversion primaryExprLinha=PrimaryExprLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//conversion=Conversion
		public Assignment getConversionAssignment_1_0() { return cConversionAssignment_1_0; }
		
		//Conversion
		public RuleCall getConversionConversionParserRuleCall_1_0_0() { return cConversionConversionParserRuleCall_1_0_0; }
		
		//primaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_1() { return cPrimaryExprLinhaAssignment_1_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_0; }
		
		//methodExpr=MethodExpr primaryExprLinha=PrimaryExprLinha
		public Group getGroup_2() { return cGroup_2; }
		
		//methodExpr=MethodExpr
		public Assignment getMethodExprAssignment_2_0() { return cMethodExprAssignment_2_0; }
		
		//MethodExpr
		public RuleCall getMethodExprMethodExprParserRuleCall_2_0_0() { return cMethodExprMethodExprParserRuleCall_2_0_0; }
		
		//primaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_2_1() { return cPrimaryExprLinhaAssignment_2_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_2_1_0; }
	}
	public class PrimaryExprLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprLinha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExprLinhaAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSelectorAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0_0_0 = (RuleCall)cSelectorAssignment_1_0_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_0_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cIndexIndexParserRuleCall_1_1_0_0 = (RuleCall)cIndexAssignment_1_1_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cSliceAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cSliceSliceParserRuleCall_1_2_0_0 = (RuleCall)cSliceAssignment_1_2_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_2_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cTypeAssertionAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cTypeAssertionTypeAssertionParserRuleCall_1_3_0_0 = (RuleCall)cTypeAssertionAssignment_1_3_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_3_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cArgumentsAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_4_0_0 = (RuleCall)cArgumentsAssignment_1_4_0.eContents().get(0);
		private final Assignment cPrimaryExprLinhaAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_4_1_0 = (RuleCall)cPrimaryExprLinhaAssignment_1_4_1.eContents().get(0);
		
		//PrimaryExprLinha:
		//	{PrimaryExprLinha} (selector=Selector primaryExprLinha=PrimaryExprLinha | index=Index
		//	primaryExprLinha=PrimaryExprLinha | slice=Slice primaryExprLinha=PrimaryExprLinha | typeAssertion=TypeAssertion
		//	primaryExprLinha=PrimaryExprLinha | arguments=Arguments primaryExprLinha=PrimaryExprLinha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExprLinha} (selector=Selector primaryExprLinha=PrimaryExprLinha | index=Index primaryExprLinha=PrimaryExprLinha
		//| slice=Slice primaryExprLinha=PrimaryExprLinha | typeAssertion=TypeAssertion primaryExprLinha=PrimaryExprLinha |
		//arguments=Arguments primaryExprLinha=PrimaryExprLinha)?
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExprLinha}
		public Action getPrimaryExprLinhaAction_0() { return cPrimaryExprLinhaAction_0; }
		
		//(selector=Selector primaryExprLinha=PrimaryExprLinha | index=Index primaryExprLinha=PrimaryExprLinha | slice=Slice
		//primaryExprLinha=PrimaryExprLinha | typeAssertion=TypeAssertion primaryExprLinha=PrimaryExprLinha |
		//arguments=Arguments primaryExprLinha=PrimaryExprLinha)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//selector=Selector primaryExprLinha=PrimaryExprLinha
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_1_0_0() { return cSelectorAssignment_1_0_0; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0_0_0() { return cSelectorSelectorParserRuleCall_1_0_0_0; }
		
		//primaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_0_1() { return cPrimaryExprLinhaAssignment_1_0_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_0_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_0_1_0; }
		
		//index=Index primaryExprLinha=PrimaryExprLinha
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//index=Index
		public Assignment getIndexAssignment_1_1_0() { return cIndexAssignment_1_1_0; }
		
		//Index
		public RuleCall getIndexIndexParserRuleCall_1_1_0_0() { return cIndexIndexParserRuleCall_1_1_0_0; }
		
		//primaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_1_1() { return cPrimaryExprLinhaAssignment_1_1_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_1_1_0; }
		
		//slice=Slice primaryExprLinha=PrimaryExprLinha
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//slice=Slice
		public Assignment getSliceAssignment_1_2_0() { return cSliceAssignment_1_2_0; }
		
		//Slice
		public RuleCall getSliceSliceParserRuleCall_1_2_0_0() { return cSliceSliceParserRuleCall_1_2_0_0; }
		
		//primaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_2_1() { return cPrimaryExprLinhaAssignment_1_2_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_2_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_2_1_0; }
		
		//typeAssertion=TypeAssertion primaryExprLinha=PrimaryExprLinha
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//typeAssertion=TypeAssertion
		public Assignment getTypeAssertionAssignment_1_3_0() { return cTypeAssertionAssignment_1_3_0; }
		
		//TypeAssertion
		public RuleCall getTypeAssertionTypeAssertionParserRuleCall_1_3_0_0() { return cTypeAssertionTypeAssertionParserRuleCall_1_3_0_0; }
		
		//primaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_3_1() { return cPrimaryExprLinhaAssignment_1_3_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_3_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_3_1_0; }
		
		//arguments=Arguments primaryExprLinha=PrimaryExprLinha
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_4_0() { return cArgumentsAssignment_1_4_0; }
		
		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_4_0_0() { return cArgumentsArgumentsParserRuleCall_1_4_0_0; }
		
		//primaryExprLinha=PrimaryExprLinha
		public Assignment getPrimaryExprLinhaAssignment_1_4_1() { return cPrimaryExprLinhaAssignment_1_4_1; }
		
		//PrimaryExprLinha
		public RuleCall getPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_4_1_0() { return cPrimaryExprLinhaPrimaryExprLinhaParserRuleCall_1_4_1_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//Selector:
		//	"." id=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." id=IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_1_0() { return cIdIDENTIFIERTerminalRuleCall_1_0; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Index:
		//	"[" expression=Expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" expression=Expression "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSliceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cExpression1Assignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_0_3_0 = (RuleCall)cExpression1Assignment_1_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cExpression1Assignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_1_3_0 = (RuleCall)cExpression1Assignment_1_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cExpression2Assignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_5_0 = (RuleCall)cExpression2Assignment_1_1_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		
		//Slice:
		//	{Slice} ("[" expression=Expression? ":" expression1=Expression? "]" |
		//	"[" expression=Expression? ":" expression1=Expression ":" expression2=Expression "]");
		@Override public ParserRule getRule() { return rule; }
		
		//{Slice} ("[" expression=Expression? ":" expression1=Expression? "]" | "[" expression=Expression? ":"
		//expression1=Expression ":" expression2=Expression "]")
		public Group getGroup() { return cGroup; }
		
		//{Slice}
		public Action getSliceAction_0() { return cSliceAction_0; }
		
		//("[" expression=Expression? ":" expression1=Expression? "]" | "[" expression=Expression? ":" expression1=Expression ":"
		//expression2=Expression "]")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"[" expression=Expression? ":" expression1=Expression? "]"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_0_1_0; }
		
		//":"
		public Keyword getColonKeyword_1_0_2() { return cColonKeyword_1_0_2; }
		
		//expression1=Expression?
		public Assignment getExpression1Assignment_1_0_3() { return cExpression1Assignment_1_0_3; }
		
		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_0_3_0() { return cExpression1ExpressionParserRuleCall_1_0_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_4() { return cRightSquareBracketKeyword_1_0_4; }
		
		//"[" expression=Expression? ":" expression1=Expression ":" expression2=Expression "]"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_1_1_1() { return cExpressionAssignment_1_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_0; }
		
		//":"
		public Keyword getColonKeyword_1_1_2() { return cColonKeyword_1_1_2; }
		
		//expression1=Expression
		public Assignment getExpression1Assignment_1_1_3() { return cExpression1Assignment_1_1_3; }
		
		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_1_3_0() { return cExpression1ExpressionParserRuleCall_1_1_3_0; }
		
		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }
		
		//expression2=Expression
		public Assignment getExpression2Assignment_1_1_5() { return cExpression2Assignment_1_1_5; }
		
		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_5_0() { return cExpression2ExpressionParserRuleCall_1_1_5_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_6() { return cRightSquareBracketKeyword_1_1_6; }
	}
	public class TypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeAssertion:
		//	"." "(" type=Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"." "(" type=Type ")"
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cExpressionListAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0_0_0 = (RuleCall)cExpressionListAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_2_0_1_0_0 = (RuleCall)cTypeAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_0_1_1_1_0 = (RuleCall)cExpressionListAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Arguments:
		//	{Arguments} "(" ((expressionList=ExpressionList | type=Type ("," expressionList=ExpressionList)?) "..."? ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{Arguments} "(" ((expressionList=ExpressionList | type=Type ("," expressionList=ExpressionList)?) "..."? ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((expressionList=ExpressionList | type=Type ("," expressionList=ExpressionList)?) "..."? ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//(expressionList=ExpressionList | type=Type ("," expressionList=ExpressionList)?)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_2_0_0() { return cExpressionListAssignment_2_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0_0_0() { return cExpressionListExpressionListParserRuleCall_2_0_0_0; }
		
		//type=Type ("," expressionList=ExpressionList)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2_0_1_0() { return cTypeAssignment_2_0_1_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0_1_0_0() { return cTypeTypeParserRuleCall_2_0_1_0_0; }
		
		//("," expressionList=ExpressionList)?
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_2_0_1_1_1() { return cExpressionListAssignment_2_0_1_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_0_1_1_1_0() { return cExpressionListExpressionListParserRuleCall_2_0_1_1_1_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//","?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MethodExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MethodExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceiverTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReceiverTypeReceiverTypeParserRuleCall_0_0 = (RuleCall)cReceiverTypeAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodNameMethodNameParserRuleCall_2_0 = (RuleCall)cMethodNameAssignment_2.eContents().get(0);
		
		//MethodExpr:
		//	receiverType=ReceiverType "." methodName=MethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//receiverType=ReceiverType "." methodName=MethodName
		public Group getGroup() { return cGroup; }
		
		//receiverType=ReceiverType
		public Assignment getReceiverTypeAssignment_0() { return cReceiverTypeAssignment_0; }
		
		//ReceiverType
		public RuleCall getReceiverTypeReceiverTypeParserRuleCall_0_0() { return cReceiverTypeReceiverTypeParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//methodName=MethodName
		public Assignment getMethodNameAssignment_2() { return cMethodNameAssignment_2; }
		
		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_2_0() { return cMethodNameMethodNameParserRuleCall_2_0; }
	}
	public class ReceiverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReceiverType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ReceiverType:
		//	type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryExprUnaryExprParserRuleCall_0_0 = (RuleCall)cUnaryExprAssignment_0.eContents().get(0);
		private final Assignment cExpression_LinhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpression_LinhaExpression_LinhaParserRuleCall_1_0 = (RuleCall)cExpression_LinhaAssignment_1.eContents().get(0);
		
		//Expression:
		//	unaryExpr=UnaryExpr expression_Linha=Expression_Linha;
		@Override public ParserRule getRule() { return rule; }
		
		//unaryExpr=UnaryExpr expression_Linha=Expression_Linha
		public Group getGroup() { return cGroup; }
		
		//unaryExpr=UnaryExpr
		public Assignment getUnaryExprAssignment_0() { return cUnaryExprAssignment_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprUnaryExprParserRuleCall_0_0() { return cUnaryExprUnaryExprParserRuleCall_0_0; }
		
		//expression_Linha=Expression_Linha
		public Assignment getExpression_LinhaAssignment_1() { return cExpression_LinhaAssignment_1; }
		
		//Expression_Linha
		public RuleCall getExpression_LinhaExpression_LinhaParserRuleCall_1_0() { return cExpression_LinhaExpression_LinhaParserRuleCall_1_0; }
	}
	public class Expression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryExprUnaryExprParserRuleCall_0_0 = (RuleCall)cUnaryExprAssignment_0.eContents().get(0);
		private final Assignment cExpression_LinhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpression_LinhaExpression_LinhaParserRuleCall_1_0 = (RuleCall)cExpression_LinhaAssignment_1.eContents().get(0);
		
		//Expression1:
		//	unaryExpr=UnaryExpr expression_Linha=Expression_Linha;
		@Override public ParserRule getRule() { return rule; }
		
		//unaryExpr=UnaryExpr expression_Linha=Expression_Linha
		public Group getGroup() { return cGroup; }
		
		//unaryExpr=UnaryExpr
		public Assignment getUnaryExprAssignment_0() { return cUnaryExprAssignment_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprUnaryExprParserRuleCall_0_0() { return cUnaryExprUnaryExprParserRuleCall_0_0; }
		
		//expression_Linha=Expression_Linha
		public Assignment getExpression_LinhaAssignment_1() { return cExpression_LinhaAssignment_1; }
		
		//Expression_Linha
		public RuleCall getExpression_LinhaExpression_LinhaParserRuleCall_1_0() { return cExpression_LinhaExpression_LinhaParserRuleCall_1_0; }
	}
	public class Expression_LinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression_Linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpression_LinhaAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cBINARY_OPAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBINARY_OPBINARY_OPParserRuleCall_1_0_0 = (RuleCall)cBINARY_OPAssignment_1_0.eContents().get(0);
		private final Assignment cExpression1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression1Expression1ParserRuleCall_1_1_0 = (RuleCall)cExpression1Assignment_1_1.eContents().get(0);
		private final Assignment cExpression_LinhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpression_LinhaExpression_LinhaParserRuleCall_1_2_0 = (RuleCall)cExpression_LinhaAssignment_1_2.eContents().get(0);
		
		//Expression_Linha:
		//	{Expression_Linha} (BINARY_OP=BINARY_OP expression1=Expression1 expression_Linha=Expression_Linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression_Linha} (BINARY_OP=BINARY_OP expression1=Expression1 expression_Linha=Expression_Linha)?
		public Group getGroup() { return cGroup; }
		
		//{Expression_Linha}
		public Action getExpression_LinhaAction_0() { return cExpression_LinhaAction_0; }
		
		//(BINARY_OP=BINARY_OP expression1=Expression1 expression_Linha=Expression_Linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//BINARY_OP=BINARY_OP
		public Assignment getBINARY_OPAssignment_1_0() { return cBINARY_OPAssignment_1_0; }
		
		//BINARY_OP
		public RuleCall getBINARY_OPBINARY_OPParserRuleCall_1_0_0() { return cBINARY_OPBINARY_OPParserRuleCall_1_0_0; }
		
		//expression1=Expression1
		public Assignment getExpression1Assignment_1_1() { return cExpression1Assignment_1_1; }
		
		//Expression1
		public RuleCall getExpression1Expression1ParserRuleCall_1_1_0() { return cExpression1Expression1ParserRuleCall_1_1_0; }
		
		//expression_Linha=Expression_Linha
		public Assignment getExpression_LinhaAssignment_1_2() { return cExpression_LinhaAssignment_1_2; }
		
		//Expression_Linha
		public RuleCall getExpression_LinhaExpression_LinhaParserRuleCall_1_2_0() { return cExpression_LinhaExpression_LinhaParserRuleCall_1_2_0; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UnaryExpr");
		private final Assignment cPrimaryExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPrimaryExprPrimaryExprParserRuleCall_0 = (RuleCall)cPrimaryExprAssignment.eContents().get(0);
		
		//UnaryExpr:
		//	primaryExpr=PrimaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//primaryExpr=PrimaryExpr
		public Assignment getPrimaryExprAssignment() { return cPrimaryExprAssignment; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprPrimaryExprParserRuleCall_0() { return cPrimaryExprPrimaryExprParserRuleCall_0; }
	}
	public class BINARY_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BINARY_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cREL_OPAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cREL_OPREL_OPTerminalRuleCall_0_0 = (RuleCall)cREL_OPAssignment_0.eContents().get(0);
		private final Assignment cADD_OPAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cADD_OPADD_OPTerminalRuleCall_1_0 = (RuleCall)cADD_OPAssignment_1.eContents().get(0);
		
		//BINARY_OP:
		//	rEL_OP=REL_OP | aDD_OP=ADD_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//rEL_OP=REL_OP | aDD_OP=ADD_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rEL_OP=REL_OP
		public Assignment getREL_OPAssignment_0() { return cREL_OPAssignment_0; }
		
		//REL_OP
		public RuleCall getREL_OPREL_OPTerminalRuleCall_0_0() { return cREL_OPREL_OPTerminalRuleCall_0_0; }
		
		//aDD_OP=ADD_OP
		public Assignment getADD_OPAssignment_1() { return cADD_OPAssignment_1; }
		
		//ADD_OP
		public RuleCall getADD_OPADD_OPTerminalRuleCall_1_0() { return cADD_OPADD_OPTerminalRuleCall_1_0; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////terminal UNARY_OP: 
		////"+" | "-" | "!" | "^" | "*" | "&" | "<-" 
		////;
		//Conversion:
		//	type=Type "(" expression=Expression ","? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type "(" expression=Expression ","? ")"
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cLabeledStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLabeledStmtLabeledStmtParserRuleCall_1_0 = (RuleCall)cLabeledStmtAssignment_1.eContents().get(0);
		private final Assignment cSimpleStmtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_2_0 = (RuleCall)cSimpleStmtAssignment_2.eContents().get(0);
		private final Assignment cGoStmtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGoStmtGoStmtParserRuleCall_3_0 = (RuleCall)cGoStmtAssignment_3.eContents().get(0);
		private final Assignment cReturnStmtAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cReturnStmtReturnStmtParserRuleCall_4_0 = (RuleCall)cReturnStmtAssignment_4.eContents().get(0);
		private final Assignment cBreakStmtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBreakStmtBreakStmtParserRuleCall_5_0 = (RuleCall)cBreakStmtAssignment_5.eContents().get(0);
		private final Assignment cContinueStmtAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cContinueStmtContinueStmtParserRuleCall_6_0 = (RuleCall)cContinueStmtAssignment_6.eContents().get(0);
		private final Assignment cGotoStmtAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGotoStmtGotoStmtParserRuleCall_7_0 = (RuleCall)cGotoStmtAssignment_7.eContents().get(0);
		private final Assignment cFallthroughStmtAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cFallthroughStmtFallthroughStmtParserRuleCall_8_0 = (RuleCall)cFallthroughStmtAssignment_8.eContents().get(0);
		private final Assignment cBlockAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cBlockBlockParserRuleCall_9_0 = (RuleCall)cBlockAssignment_9.eContents().get(0);
		private final Assignment cIfStmtAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cIfStmtIfStmtParserRuleCall_10_0 = (RuleCall)cIfStmtAssignment_10.eContents().get(0);
		private final Assignment cSwitchStmtAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cSwitchStmtSwitchStmtParserRuleCall_11_0 = (RuleCall)cSwitchStmtAssignment_11.eContents().get(0);
		private final Assignment cSelectStmtAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cSelectStmtSelectStmtParserRuleCall_12_0 = (RuleCall)cSelectStmtAssignment_12.eContents().get(0);
		private final Assignment cForStmtAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cForStmtForStmtParserRuleCall_13_0 = (RuleCall)cForStmtAssignment_13.eContents().get(0);
		private final Assignment cDeferStmtAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cDeferStmtDeferStmtParserRuleCall_14_0 = (RuleCall)cDeferStmtAssignment_14.eContents().get(0);
		
		//Statement:
		//	declaration=Declaration | labeledStmt=LabeledStmt | simpleStmt=SimpleStmt | goStmt=GoStmt | returnStmt=ReturnStmt |
		//	breakStmt=BreakStmt | continueStmt=ContinueStmt | gotoStmt=GotoStmt | fallthroughStmt=FallthroughStmt | block=Block |
		//	ifStmt=IfStmt | switchStmt=SwitchStmt | selectStmt=SelectStmt | forStmt=ForStmt | deferStmt=DeferStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=Declaration | labeledStmt=LabeledStmt | simpleStmt=SimpleStmt | goStmt=GoStmt | returnStmt=ReturnStmt |
		//breakStmt=BreakStmt | continueStmt=ContinueStmt | gotoStmt=GotoStmt | fallthroughStmt=FallthroughStmt | block=Block |
		//ifStmt=IfStmt | switchStmt=SwitchStmt | selectStmt=SelectStmt | forStmt=ForStmt | deferStmt=DeferStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//labeledStmt=LabeledStmt
		public Assignment getLabeledStmtAssignment_1() { return cLabeledStmtAssignment_1; }
		
		//LabeledStmt
		public RuleCall getLabeledStmtLabeledStmtParserRuleCall_1_0() { return cLabeledStmtLabeledStmtParserRuleCall_1_0; }
		
		//simpleStmt=SimpleStmt
		public Assignment getSimpleStmtAssignment_2() { return cSimpleStmtAssignment_2; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_2_0() { return cSimpleStmtSimpleStmtParserRuleCall_2_0; }
		
		//goStmt=GoStmt
		public Assignment getGoStmtAssignment_3() { return cGoStmtAssignment_3; }
		
		//GoStmt
		public RuleCall getGoStmtGoStmtParserRuleCall_3_0() { return cGoStmtGoStmtParserRuleCall_3_0; }
		
		//returnStmt=ReturnStmt
		public Assignment getReturnStmtAssignment_4() { return cReturnStmtAssignment_4; }
		
		//ReturnStmt
		public RuleCall getReturnStmtReturnStmtParserRuleCall_4_0() { return cReturnStmtReturnStmtParserRuleCall_4_0; }
		
		//breakStmt=BreakStmt
		public Assignment getBreakStmtAssignment_5() { return cBreakStmtAssignment_5; }
		
		//BreakStmt
		public RuleCall getBreakStmtBreakStmtParserRuleCall_5_0() { return cBreakStmtBreakStmtParserRuleCall_5_0; }
		
		//continueStmt=ContinueStmt
		public Assignment getContinueStmtAssignment_6() { return cContinueStmtAssignment_6; }
		
		//ContinueStmt
		public RuleCall getContinueStmtContinueStmtParserRuleCall_6_0() { return cContinueStmtContinueStmtParserRuleCall_6_0; }
		
		//gotoStmt=GotoStmt
		public Assignment getGotoStmtAssignment_7() { return cGotoStmtAssignment_7; }
		
		//GotoStmt
		public RuleCall getGotoStmtGotoStmtParserRuleCall_7_0() { return cGotoStmtGotoStmtParserRuleCall_7_0; }
		
		//fallthroughStmt=FallthroughStmt
		public Assignment getFallthroughStmtAssignment_8() { return cFallthroughStmtAssignment_8; }
		
		//FallthroughStmt
		public RuleCall getFallthroughStmtFallthroughStmtParserRuleCall_8_0() { return cFallthroughStmtFallthroughStmtParserRuleCall_8_0; }
		
		//block=Block
		public Assignment getBlockAssignment_9() { return cBlockAssignment_9; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_9_0() { return cBlockBlockParserRuleCall_9_0; }
		
		//ifStmt=IfStmt
		public Assignment getIfStmtAssignment_10() { return cIfStmtAssignment_10; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_10_0() { return cIfStmtIfStmtParserRuleCall_10_0; }
		
		//switchStmt=SwitchStmt
		public Assignment getSwitchStmtAssignment_11() { return cSwitchStmtAssignment_11; }
		
		//SwitchStmt
		public RuleCall getSwitchStmtSwitchStmtParserRuleCall_11_0() { return cSwitchStmtSwitchStmtParserRuleCall_11_0; }
		
		//selectStmt=SelectStmt
		public Assignment getSelectStmtAssignment_12() { return cSelectStmtAssignment_12; }
		
		//SelectStmt
		public RuleCall getSelectStmtSelectStmtParserRuleCall_12_0() { return cSelectStmtSelectStmtParserRuleCall_12_0; }
		
		//forStmt=ForStmt
		public Assignment getForStmtAssignment_13() { return cForStmtAssignment_13; }
		
		//ForStmt
		public RuleCall getForStmtForStmtParserRuleCall_13_0() { return cForStmtForStmtParserRuleCall_13_0; }
		
		//deferStmt=DeferStmt
		public Assignment getDeferStmtAssignment_14() { return cDeferStmtAssignment_14; }
		
		//DeferStmt
		public RuleCall getDeferStmtDeferStmtParserRuleCall_14_0() { return cDeferStmtDeferStmtParserRuleCall_14_0; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEmptyStmtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyStmtEmptyStmtParserRuleCall_0_0 = (RuleCall)cEmptyStmtAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAssignment_1_0.eContents().get(0);
		private final Assignment cSimpleStmtLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSimpleStmtLinhaSimpleStmtLinhaParserRuleCall_1_1_0 = (RuleCall)cSimpleStmtLinhaAssignment_1_1.eContents().get(0);
		private final Assignment cShortVarDeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cShortVarDeclShortVarDeclParserRuleCall_2_0 = (RuleCall)cShortVarDeclAssignment_2.eContents().get(0);
		
		//SimpleStmt:
		//	emptyStmt=EmptyStmt | expression=Expression simpleStmtLinha=SimpleStmtLinha | shortVarDecl=ShortVarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//emptyStmt=EmptyStmt | expression=Expression simpleStmtLinha=SimpleStmtLinha | shortVarDecl=ShortVarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//emptyStmt=EmptyStmt
		public Assignment getEmptyStmtAssignment_0() { return cEmptyStmtAssignment_0; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtEmptyStmtParserRuleCall_0_0() { return cEmptyStmtEmptyStmtParserRuleCall_0_0; }
		
		//expression=Expression simpleStmtLinha=SimpleStmtLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_0() { return cExpressionAssignment_1_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0() { return cExpressionExpressionParserRuleCall_1_0_0; }
		
		//simpleStmtLinha=SimpleStmtLinha
		public Assignment getSimpleStmtLinhaAssignment_1_1() { return cSimpleStmtLinhaAssignment_1_1; }
		
		//SimpleStmtLinha
		public RuleCall getSimpleStmtLinhaSimpleStmtLinhaParserRuleCall_1_1_0() { return cSimpleStmtLinhaSimpleStmtLinhaParserRuleCall_1_1_0; }
		
		//shortVarDecl=ShortVarDecl
		public Assignment getShortVarDeclAssignment_2() { return cShortVarDeclAssignment_2; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclShortVarDeclParserRuleCall_2_0() { return cShortVarDeclShortVarDeclParserRuleCall_2_0; }
	}
	public class SimpleStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExpression1Assignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_2_0_1_0 = (RuleCall)cExpression1Assignment_2_0_1.eContents().get(0);
		private final Assignment cAssign_opAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssign_opAssign_opParserRuleCall_2_1_0 = (RuleCall)cAssign_opAssignment_2_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionListExpressionListParserRuleCall_2_2_0 = (RuleCall)cExpressionListAssignment_2_2.eContents().get(0);
		private final Assignment cANY_OTHERAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cANY_OTHERANY_OTHERTerminalRuleCall_3_0 = (RuleCall)cANY_OTHERAssignment_3.eContents().get(0);
		
		//SimpleStmtLinha:
		//	"<-" expression=Expression | ("++" | "--") | ("," expression1+=Expression)* assign_op=assign_op
		//	expressionList=ExpressionList | aNY_OTHER=ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" expression=Expression | ("++" | "--") | ("," expression1+=Expression)* assign_op=assign_op
		//expressionList=ExpressionList | aNY_OTHER=ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-" expression=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_0() { return cLessThanSignHyphenMinusKeyword_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//("++" | "--")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
		
		//("," expression1+=Expression)* assign_op=assign_op expressionList=ExpressionList
		public Group getGroup_2() { return cGroup_2; }
		
		//("," expression1+=Expression)*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//","
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }
		
		//expression1+=Expression
		public Assignment getExpression1Assignment_2_0_1() { return cExpression1Assignment_2_0_1; }
		
		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_2_0_1_0() { return cExpression1ExpressionParserRuleCall_2_0_1_0; }
		
		//assign_op=assign_op
		public Assignment getAssign_opAssignment_2_1() { return cAssign_opAssignment_2_1; }
		
		//assign_op
		public RuleCall getAssign_opAssign_opParserRuleCall_2_1_0() { return cAssign_opAssign_opParserRuleCall_2_1_0; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_2_2() { return cExpressionListAssignment_2_2; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_2_2_0() { return cExpressionListExpressionListParserRuleCall_2_2_0; }
		
		//aNY_OTHER=ANY_OTHER
		public Assignment getANY_OTHERAssignment_3() { return cANY_OTHERAssignment_3; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERANY_OTHERTerminalRuleCall_3_0() { return cANY_OTHERANY_OTHERTerminalRuleCall_3_0; }
	}
	public class EmptyStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EmptyStmt");
		private final Assignment cANY_OTHERAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cANY_OTHERANY_OTHERTerminalRuleCall_0 = (RuleCall)cANY_OTHERAssignment.eContents().get(0);
		
		//EmptyStmt:
		//	aNY_OTHER=ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//aNY_OTHER=ANY_OTHER
		public Assignment getANY_OTHERAssignment() { return cANY_OTHERAssignment; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERANY_OTHERTerminalRuleCall_0() { return cANY_OTHERANY_OTHERTerminalRuleCall_0; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LabeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelLabelParserRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//LabeledStmt:
		//	label=Label ":" statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//label=Label ":" statement=Statement
		public Group getGroup() { return cGroup; }
		
		//label=Label
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_0_0() { return cLabelLabelParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Label");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Label:
		//	id=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0() { return cIdIDENTIFIERTerminalRuleCall_0; }
	}
	public class Assign_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assign_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cADD_OPAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cADD_OPADD_OPTerminalRuleCall_0_0_0 = (RuleCall)cADD_OPAssignment_0_0.eContents().get(0);
		private final Assignment cMUL_OPAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cMUL_OPMUL_OPTerminalRuleCall_0_1_0 = (RuleCall)cMUL_OPAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// *ExpressionStmt: 
		//	Expression
		//;
		//
		//SendStmt:
		//	Channel "<-" Expression
		//;
		//
		//Channel:
		//	Expression
		//;
		//
		//IncDecStmt:
		//	Expression ( "++" | "--" )
		//;
		//
		//Assignment: 
		//	ExpressionList assign_op ExpressionList
		//;* / assign_op:
		//	(aDD_OP=ADD_OP | mUL_OP=MUL_OP)? "=";
		@Override public ParserRule getRule() { return rule; }
		
		//(aDD_OP=ADD_OP | mUL_OP=MUL_OP)? "="
		public Group getGroup() { return cGroup; }
		
		//(aDD_OP=ADD_OP | mUL_OP=MUL_OP)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//aDD_OP=ADD_OP
		public Assignment getADD_OPAssignment_0_0() { return cADD_OPAssignment_0_0; }
		
		//ADD_OP
		public RuleCall getADD_OPADD_OPTerminalRuleCall_0_0_0() { return cADD_OPADD_OPTerminalRuleCall_0_0_0; }
		
		//mUL_OP=MUL_OP
		public Assignment getMUL_OPAssignment_0_1() { return cMUL_OPAssignment_0_1; }
		
		//MUL_OP
		public RuleCall getMUL_OPMUL_OPTerminalRuleCall_0_1_0() { return cMUL_OPMUL_OPTerminalRuleCall_0_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIfAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIfIFTerminalRuleCall_0_0_0 = (RuleCall)cIfAssignment_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Assignment cIfStmtLinhaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIfStmtLinhaIfStmtLinhaParserRuleCall_0_2_0 = (RuleCall)cIfStmtLinhaAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIfAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIfIFTerminalRuleCall_1_0_0 = (RuleCall)cIfAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Assignment cEmptyStmtAssignment_1_1_0_0 = (Assignment)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cEmptyStmtEmptyStmtParserRuleCall_1_1_0_0_0 = (RuleCall)cEmptyStmtAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cShortVarDeclAssignment_1_1_0_1 = (Assignment)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cShortVarDeclShortVarDeclParserRuleCall_1_1_0_1_0 = (RuleCall)cShortVarDeclAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Assignment cBlockAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_1_3_0 = (RuleCall)cBlockAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cElseAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cElseELSETerminalRuleCall_1_4_0_0 = (RuleCall)cElseAssignment_1_4_0.eContents().get(0);
		private final Alternatives cAlternatives_1_4_1 = (Alternatives)cGroup_1_4.eContents().get(1);
		private final Assignment cIfStmtAssignment_1_4_1_0 = (Assignment)cAlternatives_1_4_1.eContents().get(0);
		private final RuleCall cIfStmtIfStmtParserRuleCall_1_4_1_0_0 = (RuleCall)cIfStmtAssignment_1_4_1_0.eContents().get(0);
		private final Assignment cBlock1Assignment_1_4_1_1 = (Assignment)cAlternatives_1_4_1.eContents().get(1);
		private final RuleCall cBlock1BlockParserRuleCall_1_4_1_1_0 = (RuleCall)cBlock1Assignment_1_4_1_1.eContents().get(0);
		
		//IfStmt:
		//	if=IF expression=Expression ifStmtLinha=IfStmtLinha | if=IF ((emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";")
		//	expression=Expression block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//if=IF expression=Expression ifStmtLinha=IfStmtLinha | if=IF ((emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";")
		//expression=Expression block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//if=IF expression=Expression ifStmtLinha=IfStmtLinha
		public Group getGroup_0() { return cGroup_0; }
		
		//if=IF
		public Assignment getIfAssignment_0_0() { return cIfAssignment_0_0; }
		
		//IF
		public RuleCall getIfIFTerminalRuleCall_0_0_0() { return cIfIFTerminalRuleCall_0_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//ifStmtLinha=IfStmtLinha
		public Assignment getIfStmtLinhaAssignment_0_2() { return cIfStmtLinhaAssignment_0_2; }
		
		//IfStmtLinha
		public RuleCall getIfStmtLinhaIfStmtLinhaParserRuleCall_0_2_0() { return cIfStmtLinhaIfStmtLinhaParserRuleCall_0_2_0; }
		
		//if=IF ((emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";") expression=Expression block=Block (else=ELSE
		//(ifStmt=IfStmt | block1=Block))?
		public Group getGroup_1() { return cGroup_1; }
		
		//if=IF
		public Assignment getIfAssignment_1_0() { return cIfAssignment_1_0; }
		
		//IF
		public RuleCall getIfIFTerminalRuleCall_1_0_0() { return cIfIFTerminalRuleCall_1_0_0; }
		
		//((emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";")
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//emptyStmt=EmptyStmt
		public Assignment getEmptyStmtAssignment_1_1_0_0() { return cEmptyStmtAssignment_1_1_0_0; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtEmptyStmtParserRuleCall_1_1_0_0_0() { return cEmptyStmtEmptyStmtParserRuleCall_1_1_0_0_0; }
		
		//shortVarDecl=ShortVarDecl
		public Assignment getShortVarDeclAssignment_1_1_0_1() { return cShortVarDeclAssignment_1_1_0_1; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclShortVarDeclParserRuleCall_1_1_0_1_0() { return cShortVarDeclShortVarDeclParserRuleCall_1_1_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1_3() { return cBlockAssignment_1_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_3_0() { return cBlockBlockParserRuleCall_1_3_0; }
		
		//(else=ELSE (ifStmt=IfStmt | block1=Block))?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//else=ELSE
		public Assignment getElseAssignment_1_4_0() { return cElseAssignment_1_4_0; }
		
		//ELSE
		public RuleCall getElseELSETerminalRuleCall_1_4_0_0() { return cElseELSETerminalRuleCall_1_4_0_0; }
		
		//(ifStmt=IfStmt | block1=Block)
		public Alternatives getAlternatives_1_4_1() { return cAlternatives_1_4_1; }
		
		//ifStmt=IfStmt
		public Assignment getIfStmtAssignment_1_4_1_0() { return cIfStmtAssignment_1_4_1_0; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_1_4_1_0_0() { return cIfStmtIfStmtParserRuleCall_1_4_1_0_0; }
		
		//block1=Block
		public Assignment getBlock1Assignment_1_4_1_1() { return cBlock1Assignment_1_4_1_1; }
		
		//Block
		public RuleCall getBlock1BlockParserRuleCall_1_4_1_1_0() { return cBlock1BlockParserRuleCall_1_4_1_1_0; }
	}
	public class IfStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSimpleStmtLinhaAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSimpleStmtLinhaSimpleStmtLinhaParserRuleCall_0_0_0 = (RuleCall)cSimpleStmtLinhaAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Assignment cBlockAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_0_3_0 = (RuleCall)cBlockAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Assignment cElseAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cElseELSETerminalRuleCall_0_4_0_0 = (RuleCall)cElseAssignment_0_4_0.eContents().get(0);
		private final Alternatives cAlternatives_0_4_1 = (Alternatives)cGroup_0_4.eContents().get(1);
		private final Assignment cIfStmtAssignment_0_4_1_0 = (Assignment)cAlternatives_0_4_1.eContents().get(0);
		private final RuleCall cIfStmtIfStmtParserRuleCall_0_4_1_0_0 = (RuleCall)cIfStmtAssignment_0_4_1_0.eContents().get(0);
		private final Assignment cBlock1Assignment_0_4_1_1 = (Assignment)cAlternatives_0_4_1.eContents().get(1);
		private final RuleCall cBlock1BlockParserRuleCall_0_4_1_1_0 = (RuleCall)cBlock1Assignment_0_4_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBlockAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_1_0_0 = (RuleCall)cBlockAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cElseAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cElseELSETerminalRuleCall_1_1_0_0 = (RuleCall)cElseAssignment_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cIfStmtAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cIfStmtIfStmtParserRuleCall_1_1_1_0_0 = (RuleCall)cIfStmtAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cBlock1Assignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cBlock1BlockParserRuleCall_1_1_1_1_0 = (RuleCall)cBlock1Assignment_1_1_1_1.eContents().get(0);
		
		//IfStmtLinha:
		//	simpleStmtLinha=SimpleStmtLinha ";" expression=Expression block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))? |
		//	block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleStmtLinha=SimpleStmtLinha ";" expression=Expression block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))? |
		//block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simpleStmtLinha=SimpleStmtLinha ";" expression=Expression block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))?
		public Group getGroup_0() { return cGroup_0; }
		
		//simpleStmtLinha=SimpleStmtLinha
		public Assignment getSimpleStmtLinhaAssignment_0_0() { return cSimpleStmtLinhaAssignment_0_0; }
		
		//SimpleStmtLinha
		public RuleCall getSimpleStmtLinhaSimpleStmtLinhaParserRuleCall_0_0_0() { return cSimpleStmtLinhaSimpleStmtLinhaParserRuleCall_0_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//block=Block
		public Assignment getBlockAssignment_0_3() { return cBlockAssignment_0_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_0_3_0() { return cBlockBlockParserRuleCall_0_3_0; }
		
		//(else=ELSE (ifStmt=IfStmt | block1=Block))?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//else=ELSE
		public Assignment getElseAssignment_0_4_0() { return cElseAssignment_0_4_0; }
		
		//ELSE
		public RuleCall getElseELSETerminalRuleCall_0_4_0_0() { return cElseELSETerminalRuleCall_0_4_0_0; }
		
		//(ifStmt=IfStmt | block1=Block)
		public Alternatives getAlternatives_0_4_1() { return cAlternatives_0_4_1; }
		
		//ifStmt=IfStmt
		public Assignment getIfStmtAssignment_0_4_1_0() { return cIfStmtAssignment_0_4_1_0; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_0_4_1_0_0() { return cIfStmtIfStmtParserRuleCall_0_4_1_0_0; }
		
		//block1=Block
		public Assignment getBlock1Assignment_0_4_1_1() { return cBlock1Assignment_0_4_1_1; }
		
		//Block
		public RuleCall getBlock1BlockParserRuleCall_0_4_1_1_0() { return cBlock1BlockParserRuleCall_0_4_1_1_0; }
		
		//block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))?
		public Group getGroup_1() { return cGroup_1; }
		
		//block=Block
		public Assignment getBlockAssignment_1_0() { return cBlockAssignment_1_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0_0() { return cBlockBlockParserRuleCall_1_0_0; }
		
		//(else=ELSE (ifStmt=IfStmt | block1=Block))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//else=ELSE
		public Assignment getElseAssignment_1_1_0() { return cElseAssignment_1_1_0; }
		
		//ELSE
		public RuleCall getElseELSETerminalRuleCall_1_1_0_0() { return cElseELSETerminalRuleCall_1_1_0_0; }
		
		//(ifStmt=IfStmt | block1=Block)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//ifStmt=IfStmt
		public Assignment getIfStmtAssignment_1_1_1_0() { return cIfStmtAssignment_1_1_1_0; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_1_1_1_0_0() { return cIfStmtIfStmtParserRuleCall_1_1_1_0_0; }
		
		//block1=Block
		public Assignment getBlock1Assignment_1_1_1_1() { return cBlock1Assignment_1_1_1_1; }
		
		//Block
		public RuleCall getBlock1BlockParserRuleCall_1_1_1_1_0() { return cBlock1BlockParserRuleCall_1_1_1_1_0; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SwitchStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprSwitchStmtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprSwitchStmtExprSwitchStmtParserRuleCall_0_0 = (RuleCall)cExprSwitchStmtAssignment_0.eContents().get(0);
		private final Assignment cTypeSwitchStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeSwitchStmtTypeSwitchStmtParserRuleCall_1_0 = (RuleCall)cTypeSwitchStmtAssignment_1.eContents().get(0);
		
		//SwitchStmt:
		//	exprSwitchStmt=ExprSwitchStmt | typeSwitchStmt=TypeSwitchStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//exprSwitchStmt=ExprSwitchStmt | typeSwitchStmt=TypeSwitchStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exprSwitchStmt=ExprSwitchStmt
		public Assignment getExprSwitchStmtAssignment_0() { return cExprSwitchStmtAssignment_0; }
		
		//ExprSwitchStmt
		public RuleCall getExprSwitchStmtExprSwitchStmtParserRuleCall_0_0() { return cExprSwitchStmtExprSwitchStmtParserRuleCall_0_0; }
		
		//typeSwitchStmt=TypeSwitchStmt
		public Assignment getTypeSwitchStmtAssignment_1() { return cTypeSwitchStmtAssignment_1; }
		
		//TypeSwitchStmt
		public RuleCall getTypeSwitchStmtTypeSwitchStmtParserRuleCall_1_0() { return cTypeSwitchStmtTypeSwitchStmtParserRuleCall_1_0; }
	}
	public class ExprSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSwitchAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSwitchSwitchKeyword_0_0 = (Keyword)cSwitchAssignment_0.eContents().get(0);
		private final Assignment cSimpleStmtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_1_0 = (RuleCall)cSimpleStmtAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprCaseClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprCaseClauseExprCaseClauseParserRuleCall_4_0 = (RuleCall)cExprCaseClauseAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *SwitchStmtLinha:
		//	primaryExpr = PrimaryExpr switchStmtLinhaLinha = SwitchStmtLinhaLinha |
		//	((unary_op = ("+" | "-" | "!" | "^" | "*" | "&" | "<-" ) unaryExpr = UnaryExpr) expression = Expression_Linha)? "{" exprCaseClause += ( ExprCaseClause )* "}" | 
		//	(id = IDENTIFIER ":=") primaryExpr = PrimaryExpr "." "(" typekeyword = 'type' ")" "{" typeCaseClause += (TypeCaseClause)* "}"
		//;
		//
		//SwitchStmtLinhaLinha:
		//	"{" exprCaseClause += ( ExprCaseClause )* "}" | "." "(" typekeyword = 'type' ")" "{"  typeCaseClause += (TypeCaseClause)* "}"
		//;* / ExprSwitchStmt:
		//	switch="switch" simpleStmt=SimpleStmt? expression=Expression? "{" exprCaseClause+=ExprCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//switch="switch" simpleStmt=SimpleStmt? expression=Expression? "{" exprCaseClause+=ExprCaseClause* "}"
		public Group getGroup() { return cGroup; }
		
		//switch="switch"
		public Assignment getSwitchAssignment_0() { return cSwitchAssignment_0; }
		
		//"switch"
		public Keyword getSwitchSwitchKeyword_0_0() { return cSwitchSwitchKeyword_0_0; }
		
		//simpleStmt=SimpleStmt?
		public Assignment getSimpleStmtAssignment_1() { return cSimpleStmtAssignment_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_1_0() { return cSimpleStmtSimpleStmtParserRuleCall_1_0; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exprCaseClause+=ExprCaseClause*
		public Assignment getExprCaseClauseAssignment_4() { return cExprCaseClauseAssignment_4; }
		
		//ExprCaseClause
		public RuleCall getExprCaseClauseExprCaseClauseParserRuleCall_4_0() { return cExprCaseClauseExprCaseClauseParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExprCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprSwitchCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprSwitchCaseExprSwitchCaseParserRuleCall_0_0 = (RuleCall)cExprSwitchCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//ExprCaseClause:
		//	exprSwitchCase=ExprSwitchCase ":" statementList=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//exprSwitchCase=ExprSwitchCase ":" statementList=StatementList
		public Group getGroup() { return cGroup; }
		
		//exprSwitchCase=ExprSwitchCase
		public Assignment getExprSwitchCaseAssignment_0() { return cExprSwitchCaseAssignment_0; }
		
		//ExprSwitchCase
		public RuleCall getExprSwitchCaseExprSwitchCaseParserRuleCall_0_0() { return cExprSwitchCaseExprSwitchCaseParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementList=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class ExprSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCaseAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cCaseCaseKeyword_0_0_0 = (Keyword)cCaseAssignment_0_0.eContents().get(0);
		private final Assignment cExpressionListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_0_1_0 = (RuleCall)cExpressionListAssignment_0_1.eContents().get(0);
		private final Assignment cDefaultAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_0 = (Keyword)cDefaultAssignment_1.eContents().get(0);
		
		//ExprSwitchCase:
		//	case="case" expressionList=ExpressionList | default="default";
		@Override public ParserRule getRule() { return rule; }
		
		//case="case" expressionList=ExpressionList | default="default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//case="case" expressionList=ExpressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//case="case"
		public Assignment getCaseAssignment_0_0() { return cCaseAssignment_0_0; }
		
		//"case"
		public Keyword getCaseCaseKeyword_0_0_0() { return cCaseCaseKeyword_0_0_0; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_0_1() { return cExpressionListAssignment_0_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_0_1_0() { return cExpressionListExpressionListParserRuleCall_0_1_0; }
		
		//default="default"
		public Assignment getDefaultAssignment_1() { return cDefaultAssignment_1; }
		
		//"default"
		public Keyword getDefaultDefaultKeyword_1_0() { return cDefaultDefaultKeyword_1_0; }
	}
	public class TypeSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSwitchAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSwitchSwitchKeyword_0_0 = (Keyword)cSwitchAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSimpleStmtAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_1_0_0 = (RuleCall)cSimpleStmtAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeSwitchGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSwitchGuardTypeSwitchGuardParserRuleCall_2_0 = (RuleCall)cTypeSwitchGuardAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeCaseClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeCaseClauseTypeCaseClauseParserRuleCall_4_0 = (RuleCall)cTypeCaseClauseAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeSwitchStmt:
		//	switch="switch" (simpleStmt=SimpleStmt ";")? typeSwitchGuard=TypeSwitchGuard "{" typeCaseClause+=TypeCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//switch="switch" (simpleStmt=SimpleStmt ";")? typeSwitchGuard=TypeSwitchGuard "{" typeCaseClause+=TypeCaseClause* "}"
		public Group getGroup() { return cGroup; }
		
		//switch="switch"
		public Assignment getSwitchAssignment_0() { return cSwitchAssignment_0; }
		
		//"switch"
		public Keyword getSwitchSwitchKeyword_0_0() { return cSwitchSwitchKeyword_0_0; }
		
		//(simpleStmt=SimpleStmt ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//simpleStmt=SimpleStmt
		public Assignment getSimpleStmtAssignment_1_0() { return cSimpleStmtAssignment_1_0; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_1_0_0() { return cSimpleStmtSimpleStmtParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//typeSwitchGuard=TypeSwitchGuard
		public Assignment getTypeSwitchGuardAssignment_2() { return cTypeSwitchGuardAssignment_2; }
		
		//TypeSwitchGuard
		public RuleCall getTypeSwitchGuardTypeSwitchGuardParserRuleCall_2_0() { return cTypeSwitchGuardTypeSwitchGuardParserRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//typeCaseClause+=TypeCaseClause*
		public Assignment getTypeCaseClauseAssignment_4() { return cTypeCaseClauseAssignment_4; }
		
		//TypeCaseClause
		public RuleCall getTypeCaseClauseTypeCaseClauseParserRuleCall_4_0() { return cTypeCaseClauseTypeCaseClauseParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeSwitchGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSwitchGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPrimaryExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExprPrimaryExprParserRuleCall_1_0 = (RuleCall)cPrimaryExprAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTypeTypeKeyword_4_0 = (Keyword)cTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeSwitchGuard:
		//	(id=IDENTIFIER ":=")? primaryExpr=PrimaryExpr "." "(" type="type" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//(id=IDENTIFIER ":=")? primaryExpr=PrimaryExpr "." "(" type="type" ")"
		public Group getGroup() { return cGroup; }
		
		//(id=IDENTIFIER ":=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0_0_0() { return cIdIDENTIFIERTerminalRuleCall_0_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//primaryExpr=PrimaryExpr
		public Assignment getPrimaryExprAssignment_1() { return cPrimaryExprAssignment_1; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprPrimaryExprParserRuleCall_1_0() { return cPrimaryExprPrimaryExprParserRuleCall_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//type="type"
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//"type"
		public Keyword getTypeTypeKeyword_4_0() { return cTypeTypeKeyword_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeSwitchCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0 = (RuleCall)cTypeSwitchCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//TypeCaseClause:
		//	typeSwitchCase=TypeSwitchCase ":" statementList=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//typeSwitchCase=TypeSwitchCase ":" statementList=StatementList
		public Group getGroup() { return cGroup; }
		
		//typeSwitchCase=TypeSwitchCase
		public Assignment getTypeSwitchCaseAssignment_0() { return cTypeSwitchCaseAssignment_0; }
		
		//TypeSwitchCase
		public RuleCall getTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0() { return cTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementList=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class TypeSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCaseAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cCaseCaseKeyword_0_0_0 = (Keyword)cCaseAssignment_0_0.eContents().get(0);
		private final Assignment cTypeListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeListTypeListParserRuleCall_0_1_0 = (RuleCall)cTypeListAssignment_0_1.eContents().get(0);
		private final Assignment cDefaultAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_0 = (Keyword)cDefaultAssignment_1.eContents().get(0);
		
		//TypeSwitchCase:
		//	case="case" typeList=TypeList | default="default";
		@Override public ParserRule getRule() { return rule; }
		
		//case="case" typeList=TypeList | default="default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//case="case" typeList=TypeList
		public Group getGroup_0() { return cGroup_0; }
		
		//case="case"
		public Assignment getCaseAssignment_0_0() { return cCaseAssignment_0_0; }
		
		//"case"
		public Keyword getCaseCaseKeyword_0_0_0() { return cCaseCaseKeyword_0_0_0; }
		
		//typeList=TypeList
		public Assignment getTypeListAssignment_0_1() { return cTypeListAssignment_0_1; }
		
		//TypeList
		public RuleCall getTypeListTypeListParserRuleCall_0_1_0() { return cTypeListTypeListParserRuleCall_0_1_0; }
		
		//default="default"
		public Assignment getDefaultAssignment_1() { return cDefaultAssignment_1; }
		
		//"default"
		public Keyword getDefaultDefaultKeyword_1_0() { return cDefaultDefaultKeyword_1_0; }
	}
	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cType1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType1TypeParserRuleCall_1_1_0 = (RuleCall)cType1Assignment_1_1.eContents().get(0);
		
		//TypeList:
		//	type=Type ("," type1+=Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type ("," type1+=Type)*
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//("," type1+=Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//type1+=Type
		public Assignment getType1Assignment_1_1() { return cType1Assignment_1_1; }
		
		//Type
		public RuleCall getType1TypeParserRuleCall_1_1_0() { return cType1TypeParserRuleCall_1_1_0; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cForAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cForFORTerminalRuleCall_0_0 = (RuleCall)cForAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0_0 = (RuleCall)cExpressionAssignment_1_0_0.eContents().get(0);
		private final Assignment cForStmtLinhaAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cForStmtLinhaForStmtLinhaParserRuleCall_1_0_1_0 = (RuleCall)cForStmtLinhaAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Assignment cEmptyStmtAssignment_1_1_0_0 = (Assignment)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cEmptyStmtEmptyStmtParserRuleCall_1_1_0_0_0 = (RuleCall)cEmptyStmtAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cShortVarDeclAssignment_1_1_0_1 = (Assignment)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cShortVarDeclShortVarDeclParserRuleCall_1_1_0_1_0 = (RuleCall)cShortVarDeclAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_1_1_2_0 = (RuleCall)cConditionAssignment_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cPostStmtAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cPostStmtPostStmtParserRuleCall_1_1_4_0 = (RuleCall)cPostStmtAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cIdentifierListAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_1_2_0_0 = (RuleCall)cIdentifierListAssignment_1_2_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRangeAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRangeRANGETerminalRuleCall_1_2_2_0 = (RuleCall)cRangeAssignment_1_2_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_3_0 = (RuleCall)cExpressionAssignment_1_2_3.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//ForStmt:
		//	for=FOR (expression=Expression forStmtLinha=ForStmtLinha | (emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";"
		//	condition=Condition ";" postStmt=PostStmt | identifierList=IdentifierList ":=" range=RANGE expression=Expression)?
		//	block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//for=FOR (expression=Expression forStmtLinha=ForStmtLinha | (emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";"
		//condition=Condition ";" postStmt=PostStmt | identifierList=IdentifierList ":=" range=RANGE expression=Expression)?
		//block=Block
		public Group getGroup() { return cGroup; }
		
		//for=FOR
		public Assignment getForAssignment_0() { return cForAssignment_0; }
		
		//FOR
		public RuleCall getForFORTerminalRuleCall_0_0() { return cForFORTerminalRuleCall_0_0; }
		
		//(expression=Expression forStmtLinha=ForStmtLinha | (emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";"
		//condition=Condition ";" postStmt=PostStmt | identifierList=IdentifierList ":=" range=RANGE expression=Expression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expression=Expression forStmtLinha=ForStmtLinha
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_0_0() { return cExpressionAssignment_1_0_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0_0() { return cExpressionExpressionParserRuleCall_1_0_0_0; }
		
		//forStmtLinha=ForStmtLinha
		public Assignment getForStmtLinhaAssignment_1_0_1() { return cForStmtLinhaAssignment_1_0_1; }
		
		//ForStmtLinha
		public RuleCall getForStmtLinhaForStmtLinhaParserRuleCall_1_0_1_0() { return cForStmtLinhaForStmtLinhaParserRuleCall_1_0_1_0; }
		
		//(emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";" condition=Condition ";" postStmt=PostStmt
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//emptyStmt=EmptyStmt
		public Assignment getEmptyStmtAssignment_1_1_0_0() { return cEmptyStmtAssignment_1_1_0_0; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtEmptyStmtParserRuleCall_1_1_0_0_0() { return cEmptyStmtEmptyStmtParserRuleCall_1_1_0_0_0; }
		
		//shortVarDecl=ShortVarDecl
		public Assignment getShortVarDeclAssignment_1_1_0_1() { return cShortVarDeclAssignment_1_1_0_1; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclShortVarDeclParserRuleCall_1_1_0_1_0() { return cShortVarDeclShortVarDeclParserRuleCall_1_1_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1_2() { return cConditionAssignment_1_1_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_2_0() { return cConditionConditionParserRuleCall_1_1_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
		
		//postStmt=PostStmt
		public Assignment getPostStmtAssignment_1_1_4() { return cPostStmtAssignment_1_1_4; }
		
		//PostStmt
		public RuleCall getPostStmtPostStmtParserRuleCall_1_1_4_0() { return cPostStmtPostStmtParserRuleCall_1_1_4_0; }
		
		//identifierList=IdentifierList ":=" range=RANGE expression=Expression
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//identifierList=IdentifierList
		public Assignment getIdentifierListAssignment_1_2_0() { return cIdentifierListAssignment_1_2_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_1_2_0_0() { return cIdentifierListIdentifierListParserRuleCall_1_2_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_2_1() { return cColonEqualsSignKeyword_1_2_1; }
		
		//range=RANGE
		public Assignment getRangeAssignment_1_2_2() { return cRangeAssignment_1_2_2; }
		
		//RANGE
		public RuleCall getRangeRANGETerminalRuleCall_1_2_2_0() { return cRangeRANGETerminalRuleCall_1_2_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_2_3() { return cExpressionAssignment_1_2_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_3_0() { return cExpressionExpressionParserRuleCall_1_2_3_0; }
		
		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	public class ForStmtLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForStmtLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVazioAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVazioANY_OTHERTerminalRuleCall_0_0 = (RuleCall)cVazioAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Assignment cForStmtLinhaLinhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cForStmtLinhaLinhaForStmtLinhaLinhaParserRuleCall_1_1_0 = (RuleCall)cForStmtLinhaLinhaAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Assignment cExpression1Assignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_2_0_0_1_0 = (RuleCall)cExpression1Assignment_2_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cAlternatives_2_0.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_2_0_1_0 = (Keyword)cAlternatives_2_0_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_0_1_1 = (Keyword)cAlternatives_2_0_1.eContents().get(1);
		private final Assignment cVazioAssignment_2_0_2 = (Assignment)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cVazioANY_OTHERTerminalRuleCall_2_0_2_0 = (RuleCall)cVazioAssignment_2_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConditionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_2_0 = (RuleCall)cConditionAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cPostStmtAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cPostStmtPostStmtParserRuleCall_2_4_0 = (RuleCall)cPostStmtAssignment_2_4.eContents().get(0);
		
		//ForStmtLinha:
		//	vazio=ANY_OTHER | ("," expression+=Expression)* forStmtLinhaLinha=ForStmtLinhaLinha | ("<-" expression1=Expression |
		//	("++" | "--") | vazio=ANY_OTHER) ";" condition=Condition ";" postStmt=PostStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//vazio=ANY_OTHER | ("," expression+=Expression)* forStmtLinhaLinha=ForStmtLinhaLinha | ("<-" expression1=Expression |
		//("++" | "--") | vazio=ANY_OTHER) ";" condition=Condition ";" postStmt=PostStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//vazio=ANY_OTHER
		public Assignment getVazioAssignment_0() { return cVazioAssignment_0; }
		
		//ANY_OTHER
		public RuleCall getVazioANY_OTHERTerminalRuleCall_0_0() { return cVazioANY_OTHERTerminalRuleCall_0_0; }
		
		//("," expression+=Expression)* forStmtLinhaLinha=ForStmtLinhaLinha
		public Group getGroup_1() { return cGroup_1; }
		
		//("," expression+=Expression)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_0_1_0; }
		
		//forStmtLinhaLinha=ForStmtLinhaLinha
		public Assignment getForStmtLinhaLinhaAssignment_1_1() { return cForStmtLinhaLinhaAssignment_1_1; }
		
		//ForStmtLinhaLinha
		public RuleCall getForStmtLinhaLinhaForStmtLinhaLinhaParserRuleCall_1_1_0() { return cForStmtLinhaLinhaForStmtLinhaLinhaParserRuleCall_1_1_0; }
		
		//("<-" expression1=Expression | ("++" | "--") | vazio=ANY_OTHER) ";" condition=Condition ";" postStmt=PostStmt
		public Group getGroup_2() { return cGroup_2; }
		
		//("<-" expression1=Expression | ("++" | "--") | vazio=ANY_OTHER)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//"<-" expression1=Expression
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_2_0_0_0() { return cLessThanSignHyphenMinusKeyword_2_0_0_0; }
		
		//expression1=Expression
		public Assignment getExpression1Assignment_2_0_0_1() { return cExpression1Assignment_2_0_0_1; }
		
		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_2_0_0_1_0() { return cExpression1ExpressionParserRuleCall_2_0_0_1_0; }
		
		//("++" | "--")
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_0_1_0() { return cPlusSignPlusSignKeyword_2_0_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_0_1_1() { return cHyphenMinusHyphenMinusKeyword_2_0_1_1; }
		
		//vazio=ANY_OTHER
		public Assignment getVazioAssignment_2_0_2() { return cVazioAssignment_2_0_2; }
		
		//ANY_OTHER
		public RuleCall getVazioANY_OTHERTerminalRuleCall_2_0_2_0() { return cVazioANY_OTHERTerminalRuleCall_2_0_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2_2() { return cConditionAssignment_2_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_2_0() { return cConditionConditionParserRuleCall_2_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
		
		//postStmt=PostStmt
		public Assignment getPostStmtAssignment_2_4() { return cPostStmtAssignment_2_4; }
		
		//PostStmt
		public RuleCall getPostStmtPostStmtParserRuleCall_2_4_0() { return cPostStmtPostStmtParserRuleCall_2_4_0; }
	}
	public class ForStmtLinhaLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForStmtLinhaLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAssign_opAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAssign_opAssign_opParserRuleCall_0_0_0 = (RuleCall)cAssign_opAssignment_0_0.eContents().get(0);
		private final Assignment cExpressionListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_0_1_0 = (RuleCall)cExpressionListAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConditionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_0_3_0 = (RuleCall)cConditionAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cPostStmtAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cPostStmtPostStmtParserRuleCall_0_5_0 = (RuleCall)cPostStmtAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRangeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRangeRANGETerminalRuleCall_1_1_0 = (RuleCall)cRangeAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//ForStmtLinhaLinha:
		//	assign_op=assign_op expressionList=ExpressionList ";" condition=Condition ";" postStmt=PostStmt | "=" range=RANGE
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//assign_op=assign_op expressionList=ExpressionList ";" condition=Condition ";" postStmt=PostStmt | "=" range=RANGE
		//expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//assign_op=assign_op expressionList=ExpressionList ";" condition=Condition ";" postStmt=PostStmt
		public Group getGroup_0() { return cGroup_0; }
		
		//assign_op=assign_op
		public Assignment getAssign_opAssignment_0_0() { return cAssign_opAssignment_0_0; }
		
		//assign_op
		public RuleCall getAssign_opAssign_opParserRuleCall_0_0_0() { return cAssign_opAssign_opParserRuleCall_0_0_0; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_0_1() { return cExpressionListAssignment_0_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_0_1_0() { return cExpressionListExpressionListParserRuleCall_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0_3() { return cConditionAssignment_0_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_3_0() { return cConditionConditionParserRuleCall_0_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//postStmt=PostStmt
		public Assignment getPostStmtAssignment_0_5() { return cPostStmtAssignment_0_5; }
		
		//PostStmt
		public RuleCall getPostStmtPostStmtParserRuleCall_0_5_0() { return cPostStmtPostStmtParserRuleCall_0_5_0; }
		
		//"=" range=RANGE expression=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//range=RANGE
		public Assignment getRangeAssignment_1_1() { return cRangeAssignment_1_1; }
		
		//RANGE
		public RuleCall getRangeRANGETerminalRuleCall_1_1_0() { return cRangeRANGETerminalRuleCall_1_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Condition:
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class PostStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PostStmt");
		private final Assignment cSimpleStmtAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_0 = (RuleCall)cSimpleStmtAssignment.eContents().get(0);
		
		/// *ForClause:
		//	( InitStmt ) ";" ( Condition ) ";" ( PostStmt )
		//;* / PostStmt:
		//	simpleStmt=SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleStmt=SimpleStmt
		public Assignment getSimpleStmtAssignment() { return cSimpleStmtAssignment; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_0() { return cSimpleStmtSimpleStmtParserRuleCall_0; }
	}
	public class GoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGoGOTerminalRuleCall_0_0 = (RuleCall)cGoAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		/// *InitStmt:
		//	SimpleStmt
		//;* / / *RangeClause:
		//	( ExpressionList "=" | IdentifierList ":=" ) RANGE Expression
		//;* / GoStmt:
		//	go=GO expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//go=GO expression=Expression
		public Group getGroup() { return cGroup; }
		
		//go=GO
		public Assignment getGoAssignment_0() { return cGoAssignment_0; }
		
		//GO
		public RuleCall getGoGOTerminalRuleCall_0_0() { return cGoGOTerminalRuleCall_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SelectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectSELECTTerminalRuleCall_0_0 = (RuleCall)cSelectAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommClauseCommClauseParserRuleCall_2_0 = (RuleCall)cCommClauseAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectStmt:
		//	select=SELECT "{" commClause+=CommClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//select=SELECT "{" commClause+=CommClause* "}"
		public Group getGroup() { return cGroup; }
		
		//select=SELECT
		public Assignment getSelectAssignment_0() { return cSelectAssignment_0; }
		
		//SELECT
		public RuleCall getSelectSELECTTerminalRuleCall_0_0() { return cSelectSELECTTerminalRuleCall_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//commClause+=CommClause*
		public Assignment getCommClauseAssignment_2() { return cCommClauseAssignment_2; }
		
		//CommClause
		public RuleCall getCommClauseCommClauseParserRuleCall_2_0() { return cCommClauseCommClauseParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommCaseCommCaseParserRuleCall_0_0 = (RuleCall)cCommCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//CommClause:
		//	commCase=CommCase ":" statementList=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//commCase=CommCase ":" statementList=StatementList
		public Group getGroup() { return cGroup; }
		
		//commCase=CommCase
		public Assignment getCommCaseAssignment_0() { return cCommCaseAssignment_0; }
		
		//CommCase
		public RuleCall getCommCaseCommCaseParserRuleCall_0_0() { return cCommCaseCommCaseParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementList=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCaseAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cCaseCaseKeyword_0_0_0 = (Keyword)cCaseAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0_0 = (RuleCall)cExpressionAssignment_0_1_0.eContents().get(0);
		private final Assignment cCommCaseLinhaAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cCommCaseLinhaCommCaseLinhaParserRuleCall_0_1_1_0 = (RuleCall)cCommCaseLinhaAssignment_0_1_1.eContents().get(0);
		private final Assignment cDefaultAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_0 = (Keyword)cDefaultAssignment_1.eContents().get(0);
		
		//CommCase:
		//	case="case" (expression=Expression commCaseLinha=CommCaseLinha) | default="default";
		@Override public ParserRule getRule() { return rule; }
		
		//case="case" (expression=Expression commCaseLinha=CommCaseLinha) | default="default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//case="case" (expression=Expression commCaseLinha=CommCaseLinha)
		public Group getGroup_0() { return cGroup_0; }
		
		//case="case"
		public Assignment getCaseAssignment_0_0() { return cCaseAssignment_0_0; }
		
		//"case"
		public Keyword getCaseCaseKeyword_0_0_0() { return cCaseCaseKeyword_0_0_0; }
		
		//(expression=Expression commCaseLinha=CommCaseLinha)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1_0() { return cExpressionAssignment_0_1_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0_0() { return cExpressionExpressionParserRuleCall_0_1_0_0; }
		
		//commCaseLinha=CommCaseLinha
		public Assignment getCommCaseLinhaAssignment_0_1_1() { return cCommCaseLinhaAssignment_0_1_1; }
		
		//CommCaseLinha
		public RuleCall getCommCaseLinhaCommCaseLinhaParserRuleCall_0_1_1_0() { return cCommCaseLinhaCommCaseLinhaParserRuleCall_0_1_1_0; }
		
		//default="default"
		public Assignment getDefaultAssignment_1() { return cDefaultAssignment_1; }
		
		//"default"
		public Keyword getDefaultDefaultKeyword_1_0() { return cDefaultDefaultKeyword_1_0; }
	}
	public class CommCaseLinhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CommCaseLinha");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0_0_0 = (Keyword)cGroup_1_0_0_0.eContents().get(0);
		private final Assignment cExpression1Assignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_0_0_0_1_0 = (RuleCall)cExpression1Assignment_1_0_0_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Assignment cIdentifierListAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_1_0_1_0_0 = (RuleCall)cIdentifierListAssignment_1_0_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRecvExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRecvExprRecvExprParserRuleCall_1_1_0 = (RuleCall)cRecvExprAssignment_1_1.eContents().get(0);
		
		//CommCaseLinha:
		//	"<-" expression=Expression | (("," expression1+=Expression)* "=" | identifierList=IdentifierList ":=")
		//	recvExpr=RecvExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" expression=Expression | (("," expression1+=Expression)* "=" | identifierList=IdentifierList ":=") recvExpr=RecvExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-" expression=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_0() { return cLessThanSignHyphenMinusKeyword_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//(("," expression1+=Expression)* "=" | identifierList=IdentifierList ":=") recvExpr=RecvExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//(("," expression1+=Expression)* "=" | identifierList=IdentifierList ":=")
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//("," expression1+=Expression)* "="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//("," expression1+=Expression)*
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//","
		public Keyword getCommaKeyword_1_0_0_0_0() { return cCommaKeyword_1_0_0_0_0; }
		
		//expression1+=Expression
		public Assignment getExpression1Assignment_1_0_0_0_1() { return cExpression1Assignment_1_0_0_0_1; }
		
		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_0_0_0_1_0() { return cExpression1ExpressionParserRuleCall_1_0_0_0_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }
		
		//identifierList=IdentifierList ":="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//identifierList=IdentifierList
		public Assignment getIdentifierListAssignment_1_0_1_0() { return cIdentifierListAssignment_1_0_1_0; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_1_0_1_0_0() { return cIdentifierListIdentifierListParserRuleCall_1_0_1_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_0_1_1() { return cColonEqualsSignKeyword_1_0_1_1; }
		
		//recvExpr=RecvExpr
		public Assignment getRecvExprAssignment_1_1() { return cRecvExprAssignment_1_1; }
		
		//RecvExpr
		public RuleCall getRecvExprRecvExprParserRuleCall_1_1_0() { return cRecvExprRecvExprParserRuleCall_1_1_0; }
	}
	public class RecvExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RecvExpr");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		/// *RecvStmt:
		//	(ExpressionList "=" | IdentifierList ":=") RecvExpr
		//;* / RecvExpr:
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReturnReturnKeyword_0_0 = (Keyword)cReturnAssignment_0.eContents().get(0);
		private final Assignment cExpressionListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0 = (RuleCall)cExpressionListAssignment_1.eContents().get(0);
		
		//ReturnStmt:
		//	return="return" expressionList=ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//return="return" expressionList=ExpressionList
		public Group getGroup() { return cGroup; }
		
		//return="return"
		public Assignment getReturnAssignment_0() { return cReturnAssignment_0; }
		
		//"return"
		public Keyword getReturnReturnKeyword_0_0() { return cReturnReturnKeyword_0_0; }
		
		//expressionList=ExpressionList
		public Assignment getExpressionListAssignment_1() { return cExpressionListAssignment_1; }
		
		//ExpressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0() { return cExpressionListExpressionListParserRuleCall_1_0; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BreakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBreakAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBreakBREAKTerminalRuleCall_0_0 = (RuleCall)cBreakAssignment_0.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//BreakStmt:
		//	break=BREAK label=Label;
		@Override public ParserRule getRule() { return rule; }
		
		//break=BREAK label=Label
		public Group getGroup() { return cGroup; }
		
		//break=BREAK
		public Assignment getBreakAssignment_0() { return cBreakAssignment_0; }
		
		//BREAK
		public RuleCall getBreakBREAKTerminalRuleCall_0_0() { return cBreakBREAKTerminalRuleCall_0_0; }
		
		//label=Label
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ContinueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContinueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContinueCONTINUETerminalRuleCall_0_0 = (RuleCall)cContinueAssignment_0.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//ContinueStmt:
		//	continue=CONTINUE label=Label;
		@Override public ParserRule getRule() { return rule; }
		
		//continue=CONTINUE label=Label
		public Group getGroup() { return cGroup; }
		
		//continue=CONTINUE
		public Assignment getContinueAssignment_0() { return cContinueAssignment_0; }
		
		//CONTINUE
		public RuleCall getContinueCONTINUETerminalRuleCall_0_0() { return cContinueCONTINUETerminalRuleCall_0_0; }
		
		//label=Label
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGotoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGotoGOTOTerminalRuleCall_0_0 = (RuleCall)cGotoAssignment_0.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//GotoStmt:
		//	goto=GOTO label=Label;
		@Override public ParserRule getRule() { return rule; }
		
		//goto=GOTO label=Label
		public Group getGroup() { return cGroup; }
		
		//goto=GOTO
		public Assignment getGotoAssignment_0() { return cGotoAssignment_0; }
		
		//GOTO
		public RuleCall getGotoGOTOTerminalRuleCall_0_0() { return cGotoGOTOTerminalRuleCall_0_0; }
		
		//label=Label
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}
	public class FallthroughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FallthroughStmt");
		private final Assignment cFallthroughAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFallthroughFALLTHROUGHTerminalRuleCall_0 = (RuleCall)cFallthroughAssignment.eContents().get(0);
		
		//FallthroughStmt:
		//	fallthrough=FALLTHROUGH;
		@Override public ParserRule getRule() { return rule; }
		
		//fallthrough=FALLTHROUGH
		public Assignment getFallthroughAssignment() { return cFallthroughAssignment; }
		
		//FALLTHROUGH
		public RuleCall getFallthroughFALLTHROUGHTerminalRuleCall_0() { return cFallthroughFALLTHROUGHTerminalRuleCall_0; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DeferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeferAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeferDEFERTerminalRuleCall_0_0 = (RuleCall)cDeferAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//DeferStmt:
		//	defer=DEFER expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//defer=DEFER expression=Expression
		public Group getGroup() { return cGroup; }
		
		//defer=DEFER
		public Assignment getDeferAssignment_0() { return cDeferAssignment_0; }
		
		//DEFER
		public RuleCall getDeferDEFERTerminalRuleCall_0_0() { return cDeferDEFERTerminalRuleCall_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class SourceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SourceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackageClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageClausePackageClauseParserRuleCall_1_0 = (RuleCall)cPackageClauseAssignment_1.eContents().get(0);
		private final Assignment cImportDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportDeclImportDeclParserRuleCall_2_0 = (RuleCall)cImportDeclAssignment_2.eContents().get(0);
		private final Assignment cTopLevelDeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTopLevelDeclTopLevelDeclParserRuleCall_3_0 = (RuleCall)cTopLevelDeclAssignment_3.eContents().get(0);
		
		//SourceFile:
		//	{SourceFile} packageClause=PackageClause importDecl+=ImportDecl* topLevelDecl+=TopLevelDecl*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SourceFile} packageClause=PackageClause importDecl+=ImportDecl* topLevelDecl+=TopLevelDecl*
		public Group getGroup() { return cGroup; }
		
		//{SourceFile}
		public Action getSourceFileAction_0() { return cSourceFileAction_0; }
		
		//packageClause=PackageClause
		public Assignment getPackageClauseAssignment_1() { return cPackageClauseAssignment_1; }
		
		//PackageClause
		public RuleCall getPackageClausePackageClauseParserRuleCall_1_0() { return cPackageClausePackageClauseParserRuleCall_1_0; }
		
		//importDecl+=ImportDecl*
		public Assignment getImportDeclAssignment_2() { return cImportDeclAssignment_2; }
		
		//ImportDecl
		public RuleCall getImportDeclImportDeclParserRuleCall_2_0() { return cImportDeclImportDeclParserRuleCall_2_0; }
		
		//topLevelDecl+=TopLevelDecl*
		public Assignment getTopLevelDeclAssignment_3() { return cTopLevelDeclAssignment_3; }
		
		//TopLevelDecl
		public RuleCall getTopLevelDeclTopLevelDeclParserRuleCall_3_0() { return cTopLevelDeclTopLevelDeclParserRuleCall_3_0; }
	}
	public class PackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PackageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPackagePackageKeyword_0_0 = (Keyword)cPackageAssignment_0.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNamePackageNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		
		//PackageClause:
		//	package="package" packageName=PackageName;
		@Override public ParserRule getRule() { return rule; }
		
		//package="package" packageName=PackageName
		public Group getGroup() { return cGroup; }
		
		//package="package"
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//"package"
		public Keyword getPackagePackageKeyword_0_0() { return cPackagePackageKeyword_0_0; }
		
		//packageName=PackageName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }
		
		//PackageName
		public RuleCall getPackageNamePackageNameParserRuleCall_1_0() { return cPackageNamePackageNameParserRuleCall_1_0; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PackageName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDENTIFIERTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//PackageName:
		//	id=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERTerminalRuleCall_0() { return cIdIDENTIFIERTerminalRuleCall_0; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImporttAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cImporttImportKeyword_0_0 = (Keyword)cImporttAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportSpecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportSpecImportSpecParserRuleCall_1_0_0 = (RuleCall)cImportSpecAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cImportSpec1Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cImportSpec1ImportSpecParserRuleCall_1_1_1_0 = (RuleCall)cImportSpec1Assignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ImportDecl:
		//	importt="import" (importSpec=ImportSpec | "(" importSpec1+=ImportSpec* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//importt="import" (importSpec=ImportSpec | "(" importSpec1+=ImportSpec* ")")
		public Group getGroup() { return cGroup; }
		
		//importt="import"
		public Assignment getImporttAssignment_0() { return cImporttAssignment_0; }
		
		//"import"
		public Keyword getImporttImportKeyword_0_0() { return cImporttImportKeyword_0_0; }
		
		//(importSpec=ImportSpec | "(" importSpec1+=ImportSpec* ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//importSpec=ImportSpec
		public Assignment getImportSpecAssignment_1_0() { return cImportSpecAssignment_1_0; }
		
		//ImportSpec
		public RuleCall getImportSpecImportSpecParserRuleCall_1_0_0() { return cImportSpecImportSpecParserRuleCall_1_0_0; }
		
		//"(" importSpec1+=ImportSpec* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//importSpec1+=ImportSpec*
		public Assignment getImportSpec1Assignment_1_1_1() { return cImportSpec1Assignment_1_1_1; }
		
		//ImportSpec
		public RuleCall getImportSpec1ImportSpecParserRuleCall_1_1_1_0() { return cImportSpec1ImportSpecParserRuleCall_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cPackageNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cPackageNamePackageNameParserRuleCall_0_1_0 = (RuleCall)cPackageNameAssignment_0_1.eContents().get(0);
		private final Assignment cSTRING_LITAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSTRING_LITSTRING_LITTerminalRuleCall_1_0 = (RuleCall)cSTRING_LITAssignment_1.eContents().get(0);
		
		//ImportSpec:
		//	("." | packageName=PackageName)? sTRING_LIT=STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | packageName=PackageName)? sTRING_LIT=STRING_LIT
		public Group getGroup() { return cGroup; }
		
		//("." | packageName=PackageName)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//packageName=PackageName
		public Assignment getPackageNameAssignment_0_1() { return cPackageNameAssignment_0_1; }
		
		//PackageName
		public RuleCall getPackageNamePackageNameParserRuleCall_0_1_0() { return cPackageNamePackageNameParserRuleCall_0_1_0; }
		
		//sTRING_LIT=STRING_LIT
		public Assignment getSTRING_LITAssignment_1() { return cSTRING_LITAssignment_1; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITSTRING_LITTerminalRuleCall_1_0() { return cSTRING_LITSTRING_LITTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tUNICODE_CHAR;
	private final TerminalRule tLETTER;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tBREAK;
	private final TerminalRule tINTERFACE;
	private final TerminalRule tSELECT;
	private final TerminalRule tDEFER;
	private final TerminalRule tGO;
	private final TerminalRule tMAP;
	private final TerminalRule tSTRUCT;
	private final TerminalRule tCHAN;
	private final TerminalRule tELSE;
	private final TerminalRule tGOTO;
	private final TerminalRule tFALLTHROUGH;
	private final TerminalRule tIF;
	private final TerminalRule tRANGE;
	private final TerminalRule tCONTINUE;
	private final TerminalRule tFOR;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tINT_LIT;
	private final TerminalRule tFLOAT_LIT;
	private final TerminalRule tDECIMALS;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tIMAGINARY_LIT;
	private final TerminalRule tRUNE_LIT;
	private final TerminalRule tUNICODE_VALUE;
	private final TerminalRule tBYTE_VALUE;
	private final TerminalRule tOCTAL_BYTE_VALUE;
	private final TerminalRule tHEX_BYTE_VALUE;
	private final TerminalRule tLITTLE_U_VALUE;
	private final TerminalRule tBIG_U_VALUE;
	private final TerminalRule tESCAPED_CHAR;
	private final TerminalRule tSTRING_LIT;
	private final TerminalRule tRAW_STRING_LIT;
	private final TerminalRule tINTERPRETED_STRING_LIT;
	private final TypeElements pType;
	private final TypeNameElements pTypeName;
	private final TypeNameLinhaElements pTypeNameLinha;
	private final TerminalRule tANY_OTHER;
	private final TypeLitElements pTypeLit;
	private final TypeLitLinhaElements pTypeLitLinha;
	private final ArrayLengthElements pArrayLength;
	private final ElementTypeElements pElementType;
	private final StructTypeElements pStructType;
	private final FieldDeclElements pFieldDecl;
	private final EmbeddedFieldElements pEmbeddedField;
	private final TagElements pTag;
	private final PointerTypeElements pPointerType;
	private final BaseTypeElements pBaseType;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final InterfaceTypeElements pInterfaceType;
	private final MethodSpecElements pMethodSpec;
	private final MethodNameElements pMethodName;
	private final InterfaceTypeNameElements pInterfaceTypeName;
	private final MapTypeElements pMapType;
	private final KeyTypeElements pKeyType;
	private final ChannelTypeElements pChannelType;
	private final ChannelTypeLinhaElements pChannelTypeLinha;
	private final BlockElements pBlock;
	private final StatementListElements pStatementList;
	private final DeclarationElements pDeclaration;
	private final TopLevelDeclElements pTopLevelDecl;
	private final ConstDeclElements pConstDecl;
	private final ConstSpecElements pConstSpec;
	private final IdentifierListElements pIdentifierList;
	private final ExpressionListElements pExpressionList;
	private final TypeDeclElements pTypeDecl;
	private final TypeSpecElements pTypeSpec;
	private final AliasDeclElements pAliasDecl;
	private final TypeDefElements pTypeDef;
	private final VarDeclElements pVarDecl;
	private final VarSpecElements pVarSpec;
	private final ShortVarDeclElements pShortVarDecl;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionNameElements pFunctionName;
	private final FunctionBodyElements pFunctionBody;
	private final MethodDeclElements pMethodDecl;
	private final ReceiverElements pReceiver;
	private final OperandElements pOperand;
	private final LiteralElements pLiteral;
	private final BasicLitElements pBasicLit;
	private final OperandNameElements pOperandName;
	private final CompositeLitElements pCompositeLit;
	private final LiteralTypeElements pLiteralType;
	private final LiteralTypeLinhaElements pLiteralTypeLinha;
	private final LiteralValueElements pLiteralValue;
	private final ElementListElements pElementList;
	private final KeyedElementElements pKeyedElement;
	private final KeyElements pKey;
	private final FieldNameElements pFieldName;
	private final ElementElements pElement;
	private final FunctionLitElements pFunctionLit;
	private final PrimaryExprElements pPrimaryExpr;
	private final PrimaryExprLinhaElements pPrimaryExprLinha;
	private final SelectorElements pSelector;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final TypeAssertionElements pTypeAssertion;
	private final ArgumentsElements pArguments;
	private final MethodExprElements pMethodExpr;
	private final ReceiverTypeElements pReceiverType;
	private final ExpressionElements pExpression;
	private final Expression1Elements pExpression1;
	private final Expression_LinhaElements pExpression_Linha;
	private final UnaryExprElements pUnaryExpr;
	private final BINARY_OPElements pBINARY_OP;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tA_D_D__O_P__LINHA;
	private final TerminalRule tMUL_OP;
	private final ConversionElements pConversion;
	private final StatementElements pStatement;
	private final SimpleStmtElements pSimpleStmt;
	private final SimpleStmtLinhaElements pSimpleStmtLinha;
	private final EmptyStmtElements pEmptyStmt;
	private final LabeledStmtElements pLabeledStmt;
	private final LabelElements pLabel;
	private final Assign_opElements pAssign_op;
	private final IfStmtElements pIfStmt;
	private final IfStmtLinhaElements pIfStmtLinha;
	private final SwitchStmtElements pSwitchStmt;
	private final ExprSwitchStmtElements pExprSwitchStmt;
	private final ExprCaseClauseElements pExprCaseClause;
	private final ExprSwitchCaseElements pExprSwitchCase;
	private final TypeSwitchStmtElements pTypeSwitchStmt;
	private final TypeSwitchGuardElements pTypeSwitchGuard;
	private final TypeCaseClauseElements pTypeCaseClause;
	private final TypeSwitchCaseElements pTypeSwitchCase;
	private final TypeListElements pTypeList;
	private final ForStmtElements pForStmt;
	private final ForStmtLinhaElements pForStmtLinha;
	private final ForStmtLinhaLinhaElements pForStmtLinhaLinha;
	private final ConditionElements pCondition;
	private final PostStmtElements pPostStmt;
	private final GoStmtElements pGoStmt;
	private final SelectStmtElements pSelectStmt;
	private final CommClauseElements pCommClause;
	private final CommCaseElements pCommCase;
	private final CommCaseLinhaElements pCommCaseLinha;
	private final RecvExprElements pRecvExpr;
	private final ReturnStmtElements pReturnStmt;
	private final BreakStmtElements pBreakStmt;
	private final ContinueStmtElements pContinueStmt;
	private final GotoStmtElements pGotoStmt;
	private final FallthroughStmtElements pFallthroughStmt;
	private final DeferStmtElements pDeferStmt;
	private final SourceFileElements pSourceFile;
	private final PackageClauseElements pPackageClause;
	private final PackageNameElements pPackageName;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NEWLINE");
		this.tUNICODE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNICODE_CHAR");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECIMAL_DIGIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OCTAL_DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HEX_DIGIT");
		this.tBREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BREAK");
		this.tINTERFACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTERFACE");
		this.tSELECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SELECT");
		this.tDEFER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DEFER");
		this.tGO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GO");
		this.tMAP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MAP");
		this.tSTRUCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRUCT");
		this.tCHAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CHAN");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ELSE");
		this.tGOTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GOTO");
		this.tFALLTHROUGH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FALLTHROUGH");
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IF");
		this.tRANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RANGE");
		this.tCONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CONTINUE");
		this.tFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FOR");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IDENTIFIER");
		this.tINT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INT_LIT");
		this.tFLOAT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FLOAT_LIT");
		this.tDECIMALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECIMALS");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXPONENT");
		this.tIMAGINARY_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IMAGINARY_LIT");
		this.tRUNE_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RUNE_LIT");
		this.tUNICODE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNICODE_VALUE");
		this.tBYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BYTE_VALUE");
		this.tOCTAL_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OCTAL_BYTE_VALUE");
		this.tHEX_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HEX_BYTE_VALUE");
		this.tLITTLE_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LITTLE_U_VALUE");
		this.tBIG_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BIG_U_VALUE");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ESCAPED_CHAR");
		this.tSTRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING_LIT");
		this.tRAW_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RAW_STRING_LIT");
		this.tINTERPRETED_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTERPRETED_STRING_LIT");
		this.pType = new TypeElements();
		this.pTypeName = new TypeNameElements();
		this.pTypeNameLinha = new TypeNameLinhaElements();
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ANY_OTHER");
		this.pTypeLit = new TypeLitElements();
		this.pTypeLitLinha = new TypeLitLinhaElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pElementType = new ElementTypeElements();
		this.pStructType = new StructTypeElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pEmbeddedField = new EmbeddedFieldElements();
		this.pTag = new TagElements();
		this.pPointerType = new PointerTypeElements();
		this.pBaseType = new BaseTypeElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pMethodSpec = new MethodSpecElements();
		this.pMethodName = new MethodNameElements();
		this.pInterfaceTypeName = new InterfaceTypeNameElements();
		this.pMapType = new MapTypeElements();
		this.pKeyType = new KeyTypeElements();
		this.pChannelType = new ChannelTypeElements();
		this.pChannelTypeLinha = new ChannelTypeLinhaElements();
		this.pBlock = new BlockElements();
		this.pStatementList = new StatementListElements();
		this.pDeclaration = new DeclarationElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstSpec = new ConstSpecElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pExpressionList = new ExpressionListElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pAliasDecl = new AliasDeclElements();
		this.pTypeDef = new TypeDefElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarSpec = new VarSpecElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pOperand = new OperandElements();
		this.pLiteral = new LiteralElements();
		this.pBasicLit = new BasicLitElements();
		this.pOperandName = new OperandNameElements();
		this.pCompositeLit = new CompositeLitElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pLiteralTypeLinha = new LiteralTypeLinhaElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pElementList = new ElementListElements();
		this.pKeyedElement = new KeyedElementElements();
		this.pKey = new KeyElements();
		this.pFieldName = new FieldNameElements();
		this.pElement = new ElementElements();
		this.pFunctionLit = new FunctionLitElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pPrimaryExprLinha = new PrimaryExprLinhaElements();
		this.pSelector = new SelectorElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pTypeAssertion = new TypeAssertionElements();
		this.pArguments = new ArgumentsElements();
		this.pMethodExpr = new MethodExprElements();
		this.pReceiverType = new ReceiverTypeElements();
		this.pExpression = new ExpressionElements();
		this.pExpression1 = new Expression1Elements();
		this.pExpression_Linha = new Expression_LinhaElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pBINARY_OP = new BINARY_OPElements();
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ADD_OP");
		this.tA_D_D__O_P__LINHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.A_D_D__O_P__LINHA");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MUL_OP");
		this.pConversion = new ConversionElements();
		this.pStatement = new StatementElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pSimpleStmtLinha = new SimpleStmtLinhaElements();
		this.pEmptyStmt = new EmptyStmtElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pLabel = new LabelElements();
		this.pAssign_op = new Assign_opElements();
		this.pIfStmt = new IfStmtElements();
		this.pIfStmtLinha = new IfStmtLinhaElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pExprSwitchStmt = new ExprSwitchStmtElements();
		this.pExprCaseClause = new ExprCaseClauseElements();
		this.pExprSwitchCase = new ExprSwitchCaseElements();
		this.pTypeSwitchStmt = new TypeSwitchStmtElements();
		this.pTypeSwitchGuard = new TypeSwitchGuardElements();
		this.pTypeCaseClause = new TypeCaseClauseElements();
		this.pTypeSwitchCase = new TypeSwitchCaseElements();
		this.pTypeList = new TypeListElements();
		this.pForStmt = new ForStmtElements();
		this.pForStmtLinha = new ForStmtLinhaElements();
		this.pForStmtLinhaLinha = new ForStmtLinhaLinhaElements();
		this.pCondition = new ConditionElements();
		this.pPostStmt = new PostStmtElements();
		this.pGoStmt = new GoStmtElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pCommClause = new CommClauseElements();
		this.pCommCase = new CommCaseElements();
		this.pCommCaseLinha = new CommCaseLinhaElements();
		this.pRecvExpr = new RecvExprElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pFallthroughStmt = new FallthroughStmtElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pSourceFile = new SourceFileElements();
		this.pPackageClause = new PackageClauseElements();
		this.pPackageName = new PackageNameElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=SourceFile*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal NEWLINE:
	//	"\n" | "\r" | "\n\r";
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal UNICODE_CHAR:
	//	LETTER;
	public TerminalRule getUNICODE_CHARRule() {
		return tUNICODE_CHAR;
	}
	
	//terminal LETTER:
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DECIMAL_DIGIT:
	//	"0".."9";
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal OCTAL_DIGIT:
	//	"0".."7";
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal HEX_DIGIT:
	//	"0".."9" | "A".."F" | "a".."f";
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal BREAK:
	//	"break";
	public TerminalRule getBREAKRule() {
		return tBREAK;
	}
	
	//terminal INTERFACE:
	//	"interface";
	public TerminalRule getINTERFACERule() {
		return tINTERFACE;
	}
	
	//terminal SELECT:
	//	"select";
	public TerminalRule getSELECTRule() {
		return tSELECT;
	}
	
	//terminal DEFER:
	//	"defer";
	public TerminalRule getDEFERRule() {
		return tDEFER;
	}
	
	//terminal GO:
	//	"go";
	public TerminalRule getGORule() {
		return tGO;
	}
	
	//terminal MAP:
	//	"map";
	public TerminalRule getMAPRule() {
		return tMAP;
	}
	
	//terminal STRUCT:
	//	"struct";
	public TerminalRule getSTRUCTRule() {
		return tSTRUCT;
	}
	
	//terminal CHAN:
	//	"chan";
	public TerminalRule getCHANRule() {
		return tCHAN;
	}
	
	//terminal ELSE:
	//	"else";
	public TerminalRule getELSERule() {
		return tELSE;
	}
	
	//terminal GOTO:
	//	"goto";
	public TerminalRule getGOTORule() {
		return tGOTO;
	}
	
	//terminal FALLTHROUGH:
	//	"fallthrough";
	public TerminalRule getFALLTHROUGHRule() {
		return tFALLTHROUGH;
	}
	
	//terminal IF:
	//	"if";
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal RANGE:
	//	"range";
	public TerminalRule getRANGERule() {
		return tRANGE;
	}
	
	//terminal CONTINUE:
	//	"continue";
	public TerminalRule getCONTINUERule() {
		return tCONTINUE;
	}
	
	//terminal FOR:
	//	"for";
	public TerminalRule getFORRule() {
		return tFOR;
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | "0".."9")*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal INT_LIT:
	//	'1'..'9' DECIMAL_DIGIT* | "0" OCTAL_DIGIT*
	//	| '0' ('x' | "X") HEX_DIGIT+;
	public TerminalRule getINT_LITRule() {
		return tINT_LIT;
	}
	
	//terminal FLOAT_LIT:
	//	DECIMALS "." DECIMALS? EXPONENT? | DECIMALS EXPONENT |
	//	"." DECIMALS EXPONENT?;
	public TerminalRule getFLOAT_LITRule() {
		return tFLOAT_LIT;
	}
	
	//terminal DECIMALS:
	//	INT;
	public TerminalRule getDECIMALSRule() {
		return tDECIMALS;
	}
	
	//terminal EXPONENT:
	//	("e" | "E") ('+' | '-')? DECIMALS;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal IMAGINARY_LIT:
	//	(DECIMALS | FLOAT_LIT) "i";
	public TerminalRule getIMAGINARY_LITRule() {
		return tIMAGINARY_LIT;
	}
	
	//terminal RUNE_LIT:
	//	"'" (UNICODE_VALUE | BYTE_VALUE) "'";
	public TerminalRule getRUNE_LITRule() {
		return tRUNE_LIT;
	}
	
	//terminal UNICODE_VALUE:
	//	UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR;
	public TerminalRule getUNICODE_VALUERule() {
		return tUNICODE_VALUE;
	}
	
	//terminal BYTE_VALUE:
	//	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE;
	public TerminalRule getBYTE_VALUERule() {
		return tBYTE_VALUE;
	}
	
	//terminal OCTAL_BYTE_VALUE:
	//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public TerminalRule getOCTAL_BYTE_VALUERule() {
		return tOCTAL_BYTE_VALUE;
	}
	
	//terminal HEX_BYTE_VALUE:
	//	'\\' "x" HEX_DIGIT HEX_DIGIT;
	public TerminalRule getHEX_BYTE_VALUERule() {
		return tHEX_BYTE_VALUE;
	}
	
	//terminal LITTLE_U_VALUE:
	//	'\\' "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getLITTLE_U_VALUERule() {
		return tLITTLE_U_VALUE;
	}
	
	//terminal BIG_U_VALUE:
	//	'\\' "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getBIG_U_VALUERule() {
		return tBIG_U_VALUE;
	}
	
	//terminal ESCAPED_CHAR:
	//	'\\' ("a" | "b" | "f" | "n" | "r" | "t" | "v" | '\\' | "'" | '"');
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//terminal STRING_LIT:
	//	RAW_STRING_LIT | INTERPRETED_STRING_LIT;
	public TerminalRule getSTRING_LITRule() {
		return tSTRING_LIT;
	}
	
	//terminal RAW_STRING_LIT:
	//	"'" (UNICODE_CHAR | NEWLINE)* "'";
	public TerminalRule getRAW_STRING_LITRule() {
		return tRAW_STRING_LIT;
	}
	
	//terminal INTERPRETED_STRING_LIT:
	//	'"' (UNICODE_VALUE | BYTE_VALUE)* '"';
	public TerminalRule getINTERPRETED_STRING_LITRule() {
		return tINTERPRETED_STRING_LIT;
	}
	
	//Type:
	//	typeName=TypeName | typeLit=TypeLit | "(" type=Type ")";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeName:
	//	id=IDENTIFIER;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//TypeNameLinha:
	//	"." id=IDENTIFIER //| ANY_OTHER
	//;
	public TypeNameLinhaElements getTypeNameLinhaAccess() {
		return pTypeNameLinha;
	}
	
	public ParserRule getTypeNameLinhaRule() {
		return getTypeNameLinhaAccess().getRule();
	}
	
	//terminal ANY_OTHER:
	//	"#";
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
	
	//TypeLit:
	//	"[" typeLitLinha=TypeLitLinha | srtuctType=StructType | pointerType=PointerType | functionType=FunctionType |
	//	interfaceType=InterfaceType | mapType=MapType | channelType=ChannelType;
	public TypeLitElements getTypeLitAccess() {
		return pTypeLit;
	}
	
	public ParserRule getTypeLitRule() {
		return getTypeLitAccess().getRule();
	}
	
	//TypeLitLinha:
	//	arrayLength=ArrayLength "]" elementType=ElementType
	//	| "]" elementType=ElementType;
	public TypeLitLinhaElements getTypeLitLinhaAccess() {
		return pTypeLitLinha;
	}
	
	public ParserRule getTypeLitLinhaRule() {
		return getTypeLitLinhaAccess().getRule();
	}
	
	//ArrayLength:
	//	expression=Expression;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//ElementType:
	//	type=Type;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	//StructType:
	//	struct=STRUCT "{" fieldDecl+=FieldDecl* "}";
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//FieldDecl:
	//	(identifierList=IdentifierList type=Type | embeddedField=EmbeddedField) tag=Tag?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//EmbeddedField:
	//	"*"? typeName=TypeName;
	public EmbeddedFieldElements getEmbeddedFieldAccess() {
		return pEmbeddedField;
	}
	
	public ParserRule getEmbeddedFieldRule() {
		return getEmbeddedFieldAccess().getRule();
	}
	
	//Tag:
	//	string_lit=STRING_LIT;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//PointerType:
	//	"*" baseType=BaseType;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//BaseType:
	//	type=Type;
	public BaseTypeElements getBaseTypeAccess() {
		return pBaseType;
	}
	
	public ParserRule getBaseTypeRule() {
		return getBaseTypeAccess().getRule();
	}
	
	//FunctionType:
	//	func="func" signature=Signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//Signature:
	//	parameters=Parameters result=Result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	parameters=Parameters | type=Type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	{Parameters} "(" parameterList=ParameterList? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ParameterList:
	//	parameterDecl=ParameterDecl ("," parameterDecl1+=ParameterDecl)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDecl:
	//	identifierList=IdentifierList? "..."? type=Type;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	//InterfaceType:
	//	interface=INTERFACE "{" methodSpec+=MethodSpec* "}";
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	//MethodSpec:
	//	methodName=MethodName Signature=Signature | interfaceTypeName=InterfaceTypeName;
	public MethodSpecElements getMethodSpecAccess() {
		return pMethodSpec;
	}
	
	public ParserRule getMethodSpecRule() {
		return getMethodSpecAccess().getRule();
	}
	
	//MethodName:
	//	id=IDENTIFIER;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//InterfaceTypeName:
	//	typeName=TypeName;
	public InterfaceTypeNameElements getInterfaceTypeNameAccess() {
		return pInterfaceTypeName;
	}
	
	public ParserRule getInterfaceTypeNameRule() {
		return getInterfaceTypeNameAccess().getRule();
	}
	
	//MapType:
	//	map=MAP "[" keyType=KeyType "]" elementType=ElementType;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//KeyType:
	//	type=Type;
	public KeyTypeElements getKeyTypeAccess() {
		return pKeyType;
	}
	
	public ParserRule getKeyTypeRule() {
		return getKeyTypeAccess().getRule();
	}
	
	//ChannelType:
	//	(chan=CHAN channelTypeLinha=ChannelTypeLinha | "<-" chan=CHAN) elementType=ElementType;
	public ChannelTypeElements getChannelTypeAccess() {
		return pChannelType;
	}
	
	public ParserRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}
	
	//ChannelTypeLinha:
	//	"<-" | aNY_OTHER=ANY_OTHER;
	public ChannelTypeLinhaElements getChannelTypeLinhaAccess() {
		return pChannelTypeLinha;
	}
	
	public ParserRule getChannelTypeLinhaRule() {
		return getChannelTypeLinhaAccess().getRule();
	}
	
	//Block:
	//	"{" statementList=StatementList "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//StatementList:
	//	{StatementList} (statements+=Statement ";")*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Declaration:
	//	constDecl=ConstDecl | typeDecl=TypeDecl | varDecl=VarDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//TopLevelDecl:
	//	declaration=Declaration | functionDecl=FunctionDecl | methodDecl=MethodDecl;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	//ConstDecl:
	//	const='const' (constSpec=ConstSpec | "(" constSpec1+=ConstSpec* ")");
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	//ConstSpec:
	//	identifierList=IdentifierList (type=Type? "=" expressionList=ExpressionList)? //(type = (Type)? "=" expressionList = ExpressionList)?
	//;
	public ConstSpecElements getConstSpecAccess() {
		return pConstSpec;
	}
	
	public ParserRule getConstSpecRule() {
		return getConstSpecAccess().getRule();
	}
	
	//IdentifierList:
	//	id=IDENTIFIER ("," id1+=IDENTIFIER)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//ExpressionList:
	//	expression=Expression ("," expression1+=Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	//TypeDecl:
	//	typekeyword='type' (typeSpec=TypeSpec | "(" typeSpec1+=TypeSpec* ")");
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//TypeSpec:
	//	aliasDecl=AliasDecl | typeDef=TypeDef;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//AliasDecl:
	//	id=IDENTIFIER "=" type=Type;
	public AliasDeclElements getAliasDeclAccess() {
		return pAliasDecl;
	}
	
	public ParserRule getAliasDeclRule() {
		return getAliasDeclAccess().getRule();
	}
	
	//TypeDef:
	//	id=IDENTIFIER type=Type;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//VarDecl:
	//	var="var" (varSpec=VarSpec | "(" varSpec1+=VarSpec* ")");
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//VarSpec:
	//	IdentifierList=IdentifierList (type=Type ("=" expressionList=ExpressionList)? | "=" expressionList=ExpressionList);
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	//ShortVarDecl:
	//	identifierList=IdentifierList ":=" expressionList=ExpressionList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//FunctionDecl:
	//	"func" functionName=FunctionName signature=Signature functionBody=FunctionBody?;
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//FunctionName:
	//	id=IDENTIFIER;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//FunctionBody:
	//	block=Block;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//MethodDecl:
	//	"func" receiver=Receiver methodName=MethodName signature=Signature functionBody=FunctionBody?;
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//Receiver:
	//	parameters=Parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//Operand:
	//	literal=Literal | operandName=OperandName | "(" expression=Expression ")";
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//Literal:
	//	basicLit=BasicLit | compositeLit=CompositeLit | functionLit=FunctionLit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BasicLit:
	//	int_lit=INT_LIT | float_lit=FLOAT_LIT | imaginary_lit=IMAGINARY_LIT | rune_lit=RUNE_LIT | string_lit=STRING_LIT;
	public BasicLitElements getBasicLitAccess() {
		return pBasicLit;
	}
	
	public ParserRule getBasicLitRule() {
		return getBasicLitAccess().getRule();
	}
	
	//OperandName:
	//	id=IDENTIFIER //OperandNameLinha
	//;
	public OperandNameElements getOperandNameAccess() {
		return pOperandName;
	}
	
	public ParserRule getOperandNameRule() {
		return getOperandNameAccess().getRule();
	}
	
	/// *OperandNameLinha:
	//	"." IDENTIFIER |  ANY_OTHER
	//;* / CompositeLit:
	//	literalType=LiteralType literalValue=LiteralValue;
	public CompositeLitElements getCompositeLitAccess() {
		return pCompositeLit;
	}
	
	public ParserRule getCompositeLitRule() {
		return getCompositeLitAccess().getRule();
	}
	
	//LiteralType:
	//	structType=StructType | mapType=MapType | typeName=TypeName | "[" literalTypeLinha=LiteralTypeLinha;
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//LiteralTypeLinha:
	//	arrayLength=ArrayLength "]" elementType=ElementType |
	//	"..." "]" elementType=ElementType |
	//	"]" elementType=ElementType;
	public LiteralTypeLinhaElements getLiteralTypeLinhaAccess() {
		return pLiteralTypeLinha;
	}
	
	public ParserRule getLiteralTypeLinhaRule() {
		return getLiteralTypeLinhaAccess().getRule();
	}
	
	//LiteralValue:
	//	{LiteralValue} "{" (elementList=ElementList ","?)? "}";
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//ElementList:
	//	keyedElement=KeyedElement ("," keyedElement1+=KeyedElement)*;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//KeyedElement:
	//	(key=Key ":")? element=Element;
	public KeyedElementElements getKeyedElementAccess() {
		return pKeyedElement;
	}
	
	public ParserRule getKeyedElementRule() {
		return getKeyedElementAccess().getRule();
	}
	
	//Key:
	//	fieldName=FieldName | expression=Expression | literalValue=LiteralValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//FieldName:
	//	id=IDENTIFIER;
	public FieldNameElements getFieldNameAccess() {
		return pFieldName;
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}
	
	//Element:
	//	expression=Expression | literalValue=LiteralValue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//FunctionLit:
	//	func="func" signature=Signature functionBody=FunctionBody;
	public FunctionLitElements getFunctionLitAccess() {
		return pFunctionLit;
	}
	
	public ParserRule getFunctionLitRule() {
		return getFunctionLitAccess().getRule();
	}
	
	//PrimaryExpr:
	//	operand=Operand primaryExprLinha=PrimaryExprLinha | conversion=Conversion primaryExprLinha=PrimaryExprLinha |
	//	methodExpr=MethodExpr primaryExprLinha=PrimaryExprLinha;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//PrimaryExprLinha:
	//	{PrimaryExprLinha} (selector=Selector primaryExprLinha=PrimaryExprLinha | index=Index
	//	primaryExprLinha=PrimaryExprLinha | slice=Slice primaryExprLinha=PrimaryExprLinha | typeAssertion=TypeAssertion
	//	primaryExprLinha=PrimaryExprLinha | arguments=Arguments primaryExprLinha=PrimaryExprLinha)?;
	public PrimaryExprLinhaElements getPrimaryExprLinhaAccess() {
		return pPrimaryExprLinha;
	}
	
	public ParserRule getPrimaryExprLinhaRule() {
		return getPrimaryExprLinhaAccess().getRule();
	}
	
	//Selector:
	//	"." id=IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Index:
	//	"[" expression=Expression "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//Slice:
	//	{Slice} ("[" expression=Expression? ":" expression1=Expression? "]" |
	//	"[" expression=Expression? ":" expression1=Expression ":" expression2=Expression "]");
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//TypeAssertion:
	//	"." "(" type=Type ")";
	public TypeAssertionElements getTypeAssertionAccess() {
		return pTypeAssertion;
	}
	
	public ParserRule getTypeAssertionRule() {
		return getTypeAssertionAccess().getRule();
	}
	
	//Arguments:
	//	{Arguments} "(" ((expressionList=ExpressionList | type=Type ("," expressionList=ExpressionList)?) "..."? ","?)? ")";
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//MethodExpr:
	//	receiverType=ReceiverType "." methodName=MethodName;
	public MethodExprElements getMethodExprAccess() {
		return pMethodExpr;
	}
	
	public ParserRule getMethodExprRule() {
		return getMethodExprAccess().getRule();
	}
	
	//ReceiverType:
	//	type=Type;
	public ReceiverTypeElements getReceiverTypeAccess() {
		return pReceiverType;
	}
	
	public ParserRule getReceiverTypeRule() {
		return getReceiverTypeAccess().getRule();
	}
	
	//Expression:
	//	unaryExpr=UnaryExpr expression_Linha=Expression_Linha;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression1:
	//	unaryExpr=UnaryExpr expression_Linha=Expression_Linha;
	public Expression1Elements getExpression1Access() {
		return pExpression1;
	}
	
	public ParserRule getExpression1Rule() {
		return getExpression1Access().getRule();
	}
	
	//Expression_Linha:
	//	{Expression_Linha} (BINARY_OP=BINARY_OP expression1=Expression1 expression_Linha=Expression_Linha)?;
	public Expression_LinhaElements getExpression_LinhaAccess() {
		return pExpression_Linha;
	}
	
	public ParserRule getExpression_LinhaRule() {
		return getExpression_LinhaAccess().getRule();
	}
	
	//UnaryExpr:
	//	primaryExpr=PrimaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//BINARY_OP:
	//	rEL_OP=REL_OP | aDD_OP=ADD_OP;
	public BINARY_OPElements getBINARY_OPAccess() {
		return pBINARY_OP;
	}
	
	public ParserRule getBINARY_OPRule() {
		return getBINARY_OPAccess().getRule();
	}
	
	//terminal REL_OP:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal ADD_OP:
	//	"*" | "/" | A_D_D__O_P__LINHA;
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal A_D_D__O_P__LINHA:
	//	"+" | "-";
	public TerminalRule getA_D_D__O_P__LINHARule() {
		return tA_D_D__O_P__LINHA;
	}
	
	//terminal MUL_OP:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	////terminal UNARY_OP: 
	////"+" | "-" | "!" | "^" | "*" | "&" | "<-" 
	////;
	//Conversion:
	//	type=Type "(" expression=Expression ","? ")";
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//Statement:
	//	declaration=Declaration | labeledStmt=LabeledStmt | simpleStmt=SimpleStmt | goStmt=GoStmt | returnStmt=ReturnStmt |
	//	breakStmt=BreakStmt | continueStmt=ContinueStmt | gotoStmt=GotoStmt | fallthroughStmt=FallthroughStmt | block=Block |
	//	ifStmt=IfStmt | switchStmt=SwitchStmt | selectStmt=SelectStmt | forStmt=ForStmt | deferStmt=DeferStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SimpleStmt:
	//	emptyStmt=EmptyStmt | expression=Expression simpleStmtLinha=SimpleStmtLinha | shortVarDecl=ShortVarDecl;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	//SimpleStmtLinha:
	//	"<-" expression=Expression | ("++" | "--") | ("," expression1+=Expression)* assign_op=assign_op
	//	expressionList=ExpressionList | aNY_OTHER=ANY_OTHER;
	public SimpleStmtLinhaElements getSimpleStmtLinhaAccess() {
		return pSimpleStmtLinha;
	}
	
	public ParserRule getSimpleStmtLinhaRule() {
		return getSimpleStmtLinhaAccess().getRule();
	}
	
	//EmptyStmt:
	//	aNY_OTHER=ANY_OTHER;
	public EmptyStmtElements getEmptyStmtAccess() {
		return pEmptyStmt;
	}
	
	public ParserRule getEmptyStmtRule() {
		return getEmptyStmtAccess().getRule();
	}
	
	//LabeledStmt:
	//	label=Label ":" statement=Statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	//Label:
	//	id=IDENTIFIER;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	/// *ExpressionStmt: 
	//	Expression
	//;
	//
	//SendStmt:
	//	Channel "<-" Expression
	//;
	//
	//Channel:
	//	Expression
	//;
	//
	//IncDecStmt:
	//	Expression ( "++" | "--" )
	//;
	//
	//Assignment: 
	//	ExpressionList assign_op ExpressionList
	//;* / assign_op:
	//	(aDD_OP=ADD_OP | mUL_OP=MUL_OP)? "=";
	public Assign_opElements getAssign_opAccess() {
		return pAssign_op;
	}
	
	public ParserRule getAssign_opRule() {
		return getAssign_opAccess().getRule();
	}
	
	//IfStmt:
	//	if=IF expression=Expression ifStmtLinha=IfStmtLinha | if=IF ((emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";")
	//	expression=Expression block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//IfStmtLinha:
	//	simpleStmtLinha=SimpleStmtLinha ";" expression=Expression block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))? |
	//	block=Block (else=ELSE (ifStmt=IfStmt | block1=Block))?;
	public IfStmtLinhaElements getIfStmtLinhaAccess() {
		return pIfStmtLinha;
	}
	
	public ParserRule getIfStmtLinhaRule() {
		return getIfStmtLinhaAccess().getRule();
	}
	
	//SwitchStmt:
	//	exprSwitchStmt=ExprSwitchStmt | typeSwitchStmt=TypeSwitchStmt;
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	/// *SwitchStmtLinha:
	//	primaryExpr = PrimaryExpr switchStmtLinhaLinha = SwitchStmtLinhaLinha |
	//	((unary_op = ("+" | "-" | "!" | "^" | "*" | "&" | "<-" ) unaryExpr = UnaryExpr) expression = Expression_Linha)? "{" exprCaseClause += ( ExprCaseClause )* "}" | 
	//	(id = IDENTIFIER ":=") primaryExpr = PrimaryExpr "." "(" typekeyword = 'type' ")" "{" typeCaseClause += (TypeCaseClause)* "}"
	//;
	//
	//SwitchStmtLinhaLinha:
	//	"{" exprCaseClause += ( ExprCaseClause )* "}" | "." "(" typekeyword = 'type' ")" "{"  typeCaseClause += (TypeCaseClause)* "}"
	//;* / ExprSwitchStmt:
	//	switch="switch" simpleStmt=SimpleStmt? expression=Expression? "{" exprCaseClause+=ExprCaseClause* "}";
	public ExprSwitchStmtElements getExprSwitchStmtAccess() {
		return pExprSwitchStmt;
	}
	
	public ParserRule getExprSwitchStmtRule() {
		return getExprSwitchStmtAccess().getRule();
	}
	
	//ExprCaseClause:
	//	exprSwitchCase=ExprSwitchCase ":" statementList=StatementList;
	public ExprCaseClauseElements getExprCaseClauseAccess() {
		return pExprCaseClause;
	}
	
	public ParserRule getExprCaseClauseRule() {
		return getExprCaseClauseAccess().getRule();
	}
	
	//ExprSwitchCase:
	//	case="case" expressionList=ExpressionList | default="default";
	public ExprSwitchCaseElements getExprSwitchCaseAccess() {
		return pExprSwitchCase;
	}
	
	public ParserRule getExprSwitchCaseRule() {
		return getExprSwitchCaseAccess().getRule();
	}
	
	//TypeSwitchStmt:
	//	switch="switch" (simpleStmt=SimpleStmt ";")? typeSwitchGuard=TypeSwitchGuard "{" typeCaseClause+=TypeCaseClause* "}";
	public TypeSwitchStmtElements getTypeSwitchStmtAccess() {
		return pTypeSwitchStmt;
	}
	
	public ParserRule getTypeSwitchStmtRule() {
		return getTypeSwitchStmtAccess().getRule();
	}
	
	//TypeSwitchGuard:
	//	(id=IDENTIFIER ":=")? primaryExpr=PrimaryExpr "." "(" type="type" ")";
	public TypeSwitchGuardElements getTypeSwitchGuardAccess() {
		return pTypeSwitchGuard;
	}
	
	public ParserRule getTypeSwitchGuardRule() {
		return getTypeSwitchGuardAccess().getRule();
	}
	
	//TypeCaseClause:
	//	typeSwitchCase=TypeSwitchCase ":" statementList=StatementList;
	public TypeCaseClauseElements getTypeCaseClauseAccess() {
		return pTypeCaseClause;
	}
	
	public ParserRule getTypeCaseClauseRule() {
		return getTypeCaseClauseAccess().getRule();
	}
	
	//TypeSwitchCase:
	//	case="case" typeList=TypeList | default="default";
	public TypeSwitchCaseElements getTypeSwitchCaseAccess() {
		return pTypeSwitchCase;
	}
	
	public ParserRule getTypeSwitchCaseRule() {
		return getTypeSwitchCaseAccess().getRule();
	}
	
	//TypeList:
	//	type=Type ("," type1+=Type)*;
	public TypeListElements getTypeListAccess() {
		return pTypeList;
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}
	
	//ForStmt:
	//	for=FOR (expression=Expression forStmtLinha=ForStmtLinha | (emptyStmt=EmptyStmt | shortVarDecl=ShortVarDecl) ";"
	//	condition=Condition ";" postStmt=PostStmt | identifierList=IdentifierList ":=" range=RANGE expression=Expression)?
	//	block=Block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//ForStmtLinha:
	//	vazio=ANY_OTHER | ("," expression+=Expression)* forStmtLinhaLinha=ForStmtLinhaLinha | ("<-" expression1=Expression |
	//	("++" | "--") | vazio=ANY_OTHER) ";" condition=Condition ";" postStmt=PostStmt;
	public ForStmtLinhaElements getForStmtLinhaAccess() {
		return pForStmtLinha;
	}
	
	public ParserRule getForStmtLinhaRule() {
		return getForStmtLinhaAccess().getRule();
	}
	
	//ForStmtLinhaLinha:
	//	assign_op=assign_op expressionList=ExpressionList ";" condition=Condition ";" postStmt=PostStmt | "=" range=RANGE
	//	expression=Expression;
	public ForStmtLinhaLinhaElements getForStmtLinhaLinhaAccess() {
		return pForStmtLinhaLinha;
	}
	
	public ParserRule getForStmtLinhaLinhaRule() {
		return getForStmtLinhaLinhaAccess().getRule();
	}
	
	//Condition:
	//	expression=Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	/// *ForClause:
	//	( InitStmt ) ";" ( Condition ) ";" ( PostStmt )
	//;* / PostStmt:
	//	simpleStmt=SimpleStmt;
	public PostStmtElements getPostStmtAccess() {
		return pPostStmt;
	}
	
	public ParserRule getPostStmtRule() {
		return getPostStmtAccess().getRule();
	}
	
	/// *InitStmt:
	//	SimpleStmt
	//;* / / *RangeClause:
	//	( ExpressionList "=" | IdentifierList ":=" ) RANGE Expression
	//;* / GoStmt:
	//	go=GO expression=Expression;
	public GoStmtElements getGoStmtAccess() {
		return pGoStmt;
	}
	
	public ParserRule getGoStmtRule() {
		return getGoStmtAccess().getRule();
	}
	
	//SelectStmt:
	//	select=SELECT "{" commClause+=CommClause* "}";
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//CommClause:
	//	commCase=CommCase ":" statementList=StatementList;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//CommCase:
	//	case="case" (expression=Expression commCaseLinha=CommCaseLinha) | default="default";
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//CommCaseLinha:
	//	"<-" expression=Expression | (("," expression1+=Expression)* "=" | identifierList=IdentifierList ":=")
	//	recvExpr=RecvExpr;
	public CommCaseLinhaElements getCommCaseLinhaAccess() {
		return pCommCaseLinha;
	}
	
	public ParserRule getCommCaseLinhaRule() {
		return getCommCaseLinhaAccess().getRule();
	}
	
	/// *RecvStmt:
	//	(ExpressionList "=" | IdentifierList ":=") RecvExpr
	//;* / RecvExpr:
	//	expression=Expression;
	public RecvExprElements getRecvExprAccess() {
		return pRecvExpr;
	}
	
	public ParserRule getRecvExprRule() {
		return getRecvExprAccess().getRule();
	}
	
	//ReturnStmt:
	//	return="return" expressionList=ExpressionList;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//BreakStmt:
	//	break=BREAK label=Label;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	//ContinueStmt:
	//	continue=CONTINUE label=Label;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	//GotoStmt:
	//	goto=GOTO label=Label;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	//FallthroughStmt:
	//	fallthrough=FALLTHROUGH;
	public FallthroughStmtElements getFallthroughStmtAccess() {
		return pFallthroughStmt;
	}
	
	public ParserRule getFallthroughStmtRule() {
		return getFallthroughStmtAccess().getRule();
	}
	
	//DeferStmt:
	//	defer=DEFER expression=Expression;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	//SourceFile:
	//	{SourceFile} packageClause=PackageClause importDecl+=ImportDecl* topLevelDecl+=TopLevelDecl*;
	public SourceFileElements getSourceFileAccess() {
		return pSourceFile;
	}
	
	public ParserRule getSourceFileRule() {
		return getSourceFileAccess().getRule();
	}
	
	//PackageClause:
	//	package="package" packageName=PackageName;
	public PackageClauseElements getPackageClauseAccess() {
		return pPackageClause;
	}
	
	public ParserRule getPackageClauseRule() {
		return getPackageClauseAccess().getRule();
	}
	
	//PackageName:
	//	id=IDENTIFIER;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//ImportDecl:
	//	importt="import" (importSpec=ImportSpec | "(" importSpec1+=ImportSpec* ")");
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//ImportSpec:
	//	("." | packageName=PackageName)? sTRING_LIT=STRING_LIT;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
}
