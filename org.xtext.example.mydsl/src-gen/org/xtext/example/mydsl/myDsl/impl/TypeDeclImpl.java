/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.TypeDecl;
import org.xtext.example.mydsl.myDsl.TypeSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TypeDeclImpl#getTypekeyword <em>Typekeyword</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TypeDeclImpl#getTypeSpec <em>Type Spec</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TypeDeclImpl#getTypeSpec1 <em>Type Spec1</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeDeclImpl extends MinimalEObjectImpl.Container implements TypeDecl
{
  /**
   * The default value of the '{@link #getTypekeyword() <em>Typekeyword</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypekeyword()
   * @generated
   * @ordered
   */
  protected static final String TYPEKEYWORD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypekeyword() <em>Typekeyword</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypekeyword()
   * @generated
   * @ordered
   */
  protected String typekeyword = TYPEKEYWORD_EDEFAULT;

  /**
   * The cached value of the '{@link #getTypeSpec() <em>Type Spec</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeSpec()
   * @generated
   * @ordered
   */
  protected TypeSpec typeSpec;

  /**
   * The cached value of the '{@link #getTypeSpec1() <em>Type Spec1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeSpec1()
   * @generated
   * @ordered
   */
  protected EList<TypeSpec> typeSpec1;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.TYPE_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTypekeyword()
  {
    return typekeyword;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypekeyword(String newTypekeyword)
  {
    String oldTypekeyword = typekeyword;
    typekeyword = newTypekeyword;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TYPE_DECL__TYPEKEYWORD, oldTypekeyword, typekeyword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSpec getTypeSpec()
  {
    return typeSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeSpec(TypeSpec newTypeSpec, NotificationChain msgs)
  {
    TypeSpec oldTypeSpec = typeSpec;
    typeSpec = newTypeSpec;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.TYPE_DECL__TYPE_SPEC, oldTypeSpec, newTypeSpec);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeSpec(TypeSpec newTypeSpec)
  {
    if (newTypeSpec != typeSpec)
    {
      NotificationChain msgs = null;
      if (typeSpec != null)
        msgs = ((InternalEObject)typeSpec).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TYPE_DECL__TYPE_SPEC, null, msgs);
      if (newTypeSpec != null)
        msgs = ((InternalEObject)newTypeSpec).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TYPE_DECL__TYPE_SPEC, null, msgs);
      msgs = basicSetTypeSpec(newTypeSpec, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TYPE_DECL__TYPE_SPEC, newTypeSpec, newTypeSpec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeSpec> getTypeSpec1()
  {
    if (typeSpec1 == null)
    {
      typeSpec1 = new EObjectContainmentEList<TypeSpec>(TypeSpec.class, this, MyDslPackage.TYPE_DECL__TYPE_SPEC1);
    }
    return typeSpec1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_DECL__TYPE_SPEC:
        return basicSetTypeSpec(null, msgs);
      case MyDslPackage.TYPE_DECL__TYPE_SPEC1:
        return ((InternalEList<?>)getTypeSpec1()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_DECL__TYPEKEYWORD:
        return getTypekeyword();
      case MyDslPackage.TYPE_DECL__TYPE_SPEC:
        return getTypeSpec();
      case MyDslPackage.TYPE_DECL__TYPE_SPEC1:
        return getTypeSpec1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_DECL__TYPEKEYWORD:
        setTypekeyword((String)newValue);
        return;
      case MyDslPackage.TYPE_DECL__TYPE_SPEC:
        setTypeSpec((TypeSpec)newValue);
        return;
      case MyDslPackage.TYPE_DECL__TYPE_SPEC1:
        getTypeSpec1().clear();
        getTypeSpec1().addAll((Collection<? extends TypeSpec>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_DECL__TYPEKEYWORD:
        setTypekeyword(TYPEKEYWORD_EDEFAULT);
        return;
      case MyDslPackage.TYPE_DECL__TYPE_SPEC:
        setTypeSpec((TypeSpec)null);
        return;
      case MyDslPackage.TYPE_DECL__TYPE_SPEC1:
        getTypeSpec1().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_DECL__TYPEKEYWORD:
        return TYPEKEYWORD_EDEFAULT == null ? typekeyword != null : !TYPEKEYWORD_EDEFAULT.equals(typekeyword);
      case MyDslPackage.TYPE_DECL__TYPE_SPEC:
        return typeSpec != null;
      case MyDslPackage.TYPE_DECL__TYPE_SPEC1:
        return typeSpec1 != null && !typeSpec1.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (typekeyword: ");
    result.append(typekeyword);
    result.append(')');
    return result.toString();
  }

} //TypeDeclImpl
