/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.ExpressionList;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.SimpleStmtLinha;
import org.xtext.example.mydsl.myDsl.assign_op;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simple Stmt Linha</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SimpleStmtLinhaImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SimpleStmtLinhaImpl#getExpression1 <em>Expression1</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SimpleStmtLinhaImpl#getAssign_op <em>Assign op</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SimpleStmtLinhaImpl#getExpressionList <em>Expression List</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SimpleStmtLinhaImpl#getANY_OTHER <em>ANY OTHER</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimpleStmtLinhaImpl extends MinimalEObjectImpl.Container implements SimpleStmtLinha
{
  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The cached value of the '{@link #getExpression1() <em>Expression1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression1()
   * @generated
   * @ordered
   */
  protected EList<Expression> expression1;

  /**
   * The cached value of the '{@link #getAssign_op() <em>Assign op</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssign_op()
   * @generated
   * @ordered
   */
  protected assign_op assign_op;

  /**
   * The cached value of the '{@link #getExpressionList() <em>Expression List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionList()
   * @generated
   * @ordered
   */
  protected ExpressionList expressionList;

  /**
   * The default value of the '{@link #getANY_OTHER() <em>ANY OTHER</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getANY_OTHER()
   * @generated
   * @ordered
   */
  protected static final String ANY_OTHER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getANY_OTHER() <em>ANY OTHER</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getANY_OTHER()
   * @generated
   * @ordered
   */
  protected String aNY_OTHER = ANY_OTHER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleStmtLinhaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SIMPLE_STMT_LINHA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getExpression1()
  {
    if (expression1 == null)
    {
      expression1 = new EObjectContainmentEList<Expression>(Expression.class, this, MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION1);
    }
    return expression1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public assign_op getAssign_op()
  {
    return assign_op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssign_op(assign_op newAssign_op, NotificationChain msgs)
  {
    assign_op oldAssign_op = assign_op;
    assign_op = newAssign_op;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP, oldAssign_op, newAssign_op);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAssign_op(assign_op newAssign_op)
  {
    if (newAssign_op != assign_op)
    {
      NotificationChain msgs = null;
      if (assign_op != null)
        msgs = ((InternalEObject)assign_op).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP, null, msgs);
      if (newAssign_op != null)
        msgs = ((InternalEObject)newAssign_op).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP, null, msgs);
      msgs = basicSetAssign_op(newAssign_op, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP, newAssign_op, newAssign_op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionList getExpressionList()
  {
    return expressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionList(ExpressionList newExpressionList, NotificationChain msgs)
  {
    ExpressionList oldExpressionList = expressionList;
    expressionList = newExpressionList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST, oldExpressionList, newExpressionList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpressionList(ExpressionList newExpressionList)
  {
    if (newExpressionList != expressionList)
    {
      NotificationChain msgs = null;
      if (expressionList != null)
        msgs = ((InternalEObject)expressionList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST, null, msgs);
      if (newExpressionList != null)
        msgs = ((InternalEObject)newExpressionList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST, null, msgs);
      msgs = basicSetExpressionList(newExpressionList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST, newExpressionList, newExpressionList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getANY_OTHER()
  {
    return aNY_OTHER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setANY_OTHER(String newANY_OTHER)
  {
    String oldANY_OTHER = aNY_OTHER;
    aNY_OTHER = newANY_OTHER;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_STMT_LINHA__ANY_OTHER, oldANY_OTHER, aNY_OTHER));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION:
        return basicSetExpression(null, msgs);
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION1:
        return ((InternalEList<?>)getExpression1()).basicRemove(otherEnd, msgs);
      case MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP:
        return basicSetAssign_op(null, msgs);
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST:
        return basicSetExpressionList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION:
        return getExpression();
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION1:
        return getExpression1();
      case MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP:
        return getAssign_op();
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST:
        return getExpressionList();
      case MyDslPackage.SIMPLE_STMT_LINHA__ANY_OTHER:
        return getANY_OTHER();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION1:
        getExpression1().clear();
        getExpression1().addAll((Collection<? extends Expression>)newValue);
        return;
      case MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP:
        setAssign_op((assign_op)newValue);
        return;
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST:
        setExpressionList((ExpressionList)newValue);
        return;
      case MyDslPackage.SIMPLE_STMT_LINHA__ANY_OTHER:
        setANY_OTHER((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION:
        setExpression((Expression)null);
        return;
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION1:
        getExpression1().clear();
        return;
      case MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP:
        setAssign_op((assign_op)null);
        return;
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST:
        setExpressionList((ExpressionList)null);
        return;
      case MyDslPackage.SIMPLE_STMT_LINHA__ANY_OTHER:
        setANY_OTHER(ANY_OTHER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION:
        return expression != null;
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION1:
        return expression1 != null && !expression1.isEmpty();
      case MyDslPackage.SIMPLE_STMT_LINHA__ASSIGN_OP:
        return assign_op != null;
      case MyDslPackage.SIMPLE_STMT_LINHA__EXPRESSION_LIST:
        return expressionList != null;
      case MyDslPackage.SIMPLE_STMT_LINHA__ANY_OTHER:
        return ANY_OTHER_EDEFAULT == null ? aNY_OTHER != null : !ANY_OTHER_EDEFAULT.equals(aNY_OTHER);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (aNY_OTHER: ");
    result.append(aNY_OTHER);
    result.append(')');
    return result.toString();
  }

} //SimpleStmtLinhaImpl
