/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.ExprCaseClause;
import org.xtext.example.mydsl.myDsl.ExprSwitchStmt;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.SimpleStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Switch Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprSwitchStmtImpl#getSwitch <em>Switch</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprSwitchStmtImpl#getSimpleStmt <em>Simple Stmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprSwitchStmtImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprSwitchStmtImpl#getExprCaseClause <em>Expr Case Clause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprSwitchStmtImpl extends MinimalEObjectImpl.Container implements ExprSwitchStmt
{
  /**
   * The default value of the '{@link #getSwitch() <em>Switch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitch()
   * @generated
   * @ordered
   */
  protected static final String SWITCH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSwitch() <em>Switch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitch()
   * @generated
   * @ordered
   */
  protected String switch_ = SWITCH_EDEFAULT;

  /**
   * The cached value of the '{@link #getSimpleStmt() <em>Simple Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleStmt()
   * @generated
   * @ordered
   */
  protected SimpleStmt simpleStmt;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The cached value of the '{@link #getExprCaseClause() <em>Expr Case Clause</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprCaseClause()
   * @generated
   * @ordered
   */
  protected EList<ExprCaseClause> exprCaseClause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprSwitchStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.EXPR_SWITCH_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSwitch()
  {
    return switch_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSwitch(String newSwitch)
  {
    String oldSwitch = switch_;
    switch_ = newSwitch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR_SWITCH_STMT__SWITCH, oldSwitch, switch_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStmt getSimpleStmt()
  {
    return simpleStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimpleStmt(SimpleStmt newSimpleStmt, NotificationChain msgs)
  {
    SimpleStmt oldSimpleStmt = simpleStmt;
    simpleStmt = newSimpleStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT, oldSimpleStmt, newSimpleStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimpleStmt(SimpleStmt newSimpleStmt)
  {
    if (newSimpleStmt != simpleStmt)
    {
      NotificationChain msgs = null;
      if (simpleStmt != null)
        msgs = ((InternalEObject)simpleStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT, null, msgs);
      if (newSimpleStmt != null)
        msgs = ((InternalEObject)newSimpleStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT, null, msgs);
      msgs = basicSetSimpleStmt(newSimpleStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT, newSimpleStmt, newSimpleStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExprCaseClause> getExprCaseClause()
  {
    if (exprCaseClause == null)
    {
      exprCaseClause = new EObjectContainmentEList<ExprCaseClause>(ExprCaseClause.class, this, MyDslPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE);
    }
    return exprCaseClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        return basicSetSimpleStmt(null, msgs);
      case MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case MyDslPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        return ((InternalEList<?>)getExprCaseClause()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR_SWITCH_STMT__SWITCH:
        return getSwitch();
      case MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        return getSimpleStmt();
      case MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return getExpression();
      case MyDslPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        return getExprCaseClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR_SWITCH_STMT__SWITCH:
        setSwitch((String)newValue);
        return;
      case MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        setSimpleStmt((SimpleStmt)newValue);
        return;
      case MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case MyDslPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        getExprCaseClause().clear();
        getExprCaseClause().addAll((Collection<? extends ExprCaseClause>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR_SWITCH_STMT__SWITCH:
        setSwitch(SWITCH_EDEFAULT);
        return;
      case MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        setSimpleStmt((SimpleStmt)null);
        return;
      case MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION:
        setExpression((Expression)null);
        return;
      case MyDslPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        getExprCaseClause().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR_SWITCH_STMT__SWITCH:
        return SWITCH_EDEFAULT == null ? switch_ != null : !SWITCH_EDEFAULT.equals(switch_);
      case MyDslPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        return simpleStmt != null;
      case MyDslPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return expression != null;
      case MyDslPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        return exprCaseClause != null && !exprCaseClause.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (switch: ");
    result.append(switch_);
    result.append(')');
    return result.toString();
  }

} //ExprSwitchStmtImpl
