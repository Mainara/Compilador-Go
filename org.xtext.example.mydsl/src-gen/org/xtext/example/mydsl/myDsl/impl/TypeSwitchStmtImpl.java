/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.SimpleStmt;
import org.xtext.example.mydsl.myDsl.TypeCaseClause;
import org.xtext.example.mydsl.myDsl.TypeSwitchGuard;
import org.xtext.example.mydsl.myDsl.TypeSwitchStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Switch Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TypeSwitchStmtImpl#getSimpleStmt <em>Simple Stmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TypeSwitchStmtImpl#getTypeSwitchGuard <em>Type Switch Guard</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TypeSwitchStmtImpl#getTypeCaseClause <em>Type Case Clause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeSwitchStmtImpl extends MinimalEObjectImpl.Container implements TypeSwitchStmt
{
  /**
   * The cached value of the '{@link #getSimpleStmt() <em>Simple Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleStmt()
   * @generated
   * @ordered
   */
  protected SimpleStmt simpleStmt;

  /**
   * The cached value of the '{@link #getTypeSwitchGuard() <em>Type Switch Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeSwitchGuard()
   * @generated
   * @ordered
   */
  protected TypeSwitchGuard typeSwitchGuard;

  /**
   * The cached value of the '{@link #getTypeCaseClause() <em>Type Case Clause</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeCaseClause()
   * @generated
   * @ordered
   */
  protected EList<TypeCaseClause> typeCaseClause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeSwitchStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.TYPE_SWITCH_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStmt getSimpleStmt()
  {
    return simpleStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimpleStmt(SimpleStmt newSimpleStmt, NotificationChain msgs)
  {
    SimpleStmt oldSimpleStmt = simpleStmt;
    simpleStmt = newSimpleStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT, oldSimpleStmt, newSimpleStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimpleStmt(SimpleStmt newSimpleStmt)
  {
    if (newSimpleStmt != simpleStmt)
    {
      NotificationChain msgs = null;
      if (simpleStmt != null)
        msgs = ((InternalEObject)simpleStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT, null, msgs);
      if (newSimpleStmt != null)
        msgs = ((InternalEObject)newSimpleStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT, null, msgs);
      msgs = basicSetSimpleStmt(newSimpleStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT, newSimpleStmt, newSimpleStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSwitchGuard getTypeSwitchGuard()
  {
    return typeSwitchGuard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeSwitchGuard(TypeSwitchGuard newTypeSwitchGuard, NotificationChain msgs)
  {
    TypeSwitchGuard oldTypeSwitchGuard = typeSwitchGuard;
    typeSwitchGuard = newTypeSwitchGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD, oldTypeSwitchGuard, newTypeSwitchGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeSwitchGuard(TypeSwitchGuard newTypeSwitchGuard)
  {
    if (newTypeSwitchGuard != typeSwitchGuard)
    {
      NotificationChain msgs = null;
      if (typeSwitchGuard != null)
        msgs = ((InternalEObject)typeSwitchGuard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD, null, msgs);
      if (newTypeSwitchGuard != null)
        msgs = ((InternalEObject)newTypeSwitchGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD, null, msgs);
      msgs = basicSetTypeSwitchGuard(newTypeSwitchGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD, newTypeSwitchGuard, newTypeSwitchGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeCaseClause> getTypeCaseClause()
  {
    if (typeCaseClause == null)
    {
      typeCaseClause = new EObjectContainmentEList<TypeCaseClause>(TypeCaseClause.class, this, MyDslPackage.TYPE_SWITCH_STMT__TYPE_CASE_CLAUSE);
    }
    return typeCaseClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT:
        return basicSetSimpleStmt(null, msgs);
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD:
        return basicSetTypeSwitchGuard(null, msgs);
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_CASE_CLAUSE:
        return ((InternalEList<?>)getTypeCaseClause()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT:
        return getSimpleStmt();
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD:
        return getTypeSwitchGuard();
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_CASE_CLAUSE:
        return getTypeCaseClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT:
        setSimpleStmt((SimpleStmt)newValue);
        return;
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD:
        setTypeSwitchGuard((TypeSwitchGuard)newValue);
        return;
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_CASE_CLAUSE:
        getTypeCaseClause().clear();
        getTypeCaseClause().addAll((Collection<? extends TypeCaseClause>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT:
        setSimpleStmt((SimpleStmt)null);
        return;
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD:
        setTypeSwitchGuard((TypeSwitchGuard)null);
        return;
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_CASE_CLAUSE:
        getTypeCaseClause().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_SWITCH_STMT__SIMPLE_STMT:
        return simpleStmt != null;
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_SWITCH_GUARD:
        return typeSwitchGuard != null;
      case MyDslPackage.TYPE_SWITCH_STMT__TYPE_CASE_CLAUSE:
        return typeCaseClause != null && !typeCaseClause.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TypeSwitchStmtImpl
