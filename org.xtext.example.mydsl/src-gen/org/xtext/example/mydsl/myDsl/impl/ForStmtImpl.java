/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.Block;
import org.xtext.example.mydsl.myDsl.Condition;
import org.xtext.example.mydsl.myDsl.EmptyStmt;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.ForStmt;
import org.xtext.example.mydsl.myDsl.ForStmtLinha;
import org.xtext.example.mydsl.myDsl.IdentifierList;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PostStmt;
import org.xtext.example.mydsl.myDsl.ShortVarDecl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getFor <em>For</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getForStmtLinha <em>For Stmt Linha</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getEmptyStmt <em>Empty Stmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getShortVarDecl <em>Short Var Decl</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getPostStmt <em>Post Stmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getIdentifierList <em>Identifier List</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getRange <em>Range</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ForStmtImpl#getBlock <em>Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForStmtImpl extends MinimalEObjectImpl.Container implements ForStmt
{
  /**
   * The default value of the '{@link #getFor() <em>For</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFor()
   * @generated
   * @ordered
   */
  protected static final String FOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFor() <em>For</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFor()
   * @generated
   * @ordered
   */
  protected String for_ = FOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The cached value of the '{@link #getForStmtLinha() <em>For Stmt Linha</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForStmtLinha()
   * @generated
   * @ordered
   */
  protected ForStmtLinha forStmtLinha;

  /**
   * The cached value of the '{@link #getEmptyStmt() <em>Empty Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmptyStmt()
   * @generated
   * @ordered
   */
  protected EmptyStmt emptyStmt;

  /**
   * The cached value of the '{@link #getShortVarDecl() <em>Short Var Decl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShortVarDecl()
   * @generated
   * @ordered
   */
  protected ShortVarDecl shortVarDecl;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * The cached value of the '{@link #getPostStmt() <em>Post Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostStmt()
   * @generated
   * @ordered
   */
  protected PostStmt postStmt;

  /**
   * The cached value of the '{@link #getIdentifierList() <em>Identifier List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifierList()
   * @generated
   * @ordered
   */
  protected IdentifierList identifierList;

  /**
   * The default value of the '{@link #getRange() <em>Range</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRange()
   * @generated
   * @ordered
   */
  protected static final String RANGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRange() <em>Range</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRange()
   * @generated
   * @ordered
   */
  protected String range = RANGE_EDEFAULT;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected Block block;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.FOR_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFor()
  {
    return for_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFor(String newFor)
  {
    String oldFor = for_;
    for_ = newFor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__FOR, oldFor, for_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForStmtLinha getForStmtLinha()
  {
    return forStmtLinha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForStmtLinha(ForStmtLinha newForStmtLinha, NotificationChain msgs)
  {
    ForStmtLinha oldForStmtLinha = forStmtLinha;
    forStmtLinha = newForStmtLinha;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__FOR_STMT_LINHA, oldForStmtLinha, newForStmtLinha);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setForStmtLinha(ForStmtLinha newForStmtLinha)
  {
    if (newForStmtLinha != forStmtLinha)
    {
      NotificationChain msgs = null;
      if (forStmtLinha != null)
        msgs = ((InternalEObject)forStmtLinha).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__FOR_STMT_LINHA, null, msgs);
      if (newForStmtLinha != null)
        msgs = ((InternalEObject)newForStmtLinha).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__FOR_STMT_LINHA, null, msgs);
      msgs = basicSetForStmtLinha(newForStmtLinha, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__FOR_STMT_LINHA, newForStmtLinha, newForStmtLinha));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EmptyStmt getEmptyStmt()
  {
    return emptyStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEmptyStmt(EmptyStmt newEmptyStmt, NotificationChain msgs)
  {
    EmptyStmt oldEmptyStmt = emptyStmt;
    emptyStmt = newEmptyStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__EMPTY_STMT, oldEmptyStmt, newEmptyStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEmptyStmt(EmptyStmt newEmptyStmt)
  {
    if (newEmptyStmt != emptyStmt)
    {
      NotificationChain msgs = null;
      if (emptyStmt != null)
        msgs = ((InternalEObject)emptyStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__EMPTY_STMT, null, msgs);
      if (newEmptyStmt != null)
        msgs = ((InternalEObject)newEmptyStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__EMPTY_STMT, null, msgs);
      msgs = basicSetEmptyStmt(newEmptyStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__EMPTY_STMT, newEmptyStmt, newEmptyStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShortVarDecl getShortVarDecl()
  {
    return shortVarDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetShortVarDecl(ShortVarDecl newShortVarDecl, NotificationChain msgs)
  {
    ShortVarDecl oldShortVarDecl = shortVarDecl;
    shortVarDecl = newShortVarDecl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__SHORT_VAR_DECL, oldShortVarDecl, newShortVarDecl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setShortVarDecl(ShortVarDecl newShortVarDecl)
  {
    if (newShortVarDecl != shortVarDecl)
    {
      NotificationChain msgs = null;
      if (shortVarDecl != null)
        msgs = ((InternalEObject)shortVarDecl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__SHORT_VAR_DECL, null, msgs);
      if (newShortVarDecl != null)
        msgs = ((InternalEObject)newShortVarDecl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__SHORT_VAR_DECL, null, msgs);
      msgs = basicSetShortVarDecl(newShortVarDecl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__SHORT_VAR_DECL, newShortVarDecl, newShortVarDecl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PostStmt getPostStmt()
  {
    return postStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPostStmt(PostStmt newPostStmt, NotificationChain msgs)
  {
    PostStmt oldPostStmt = postStmt;
    postStmt = newPostStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__POST_STMT, oldPostStmt, newPostStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPostStmt(PostStmt newPostStmt)
  {
    if (newPostStmt != postStmt)
    {
      NotificationChain msgs = null;
      if (postStmt != null)
        msgs = ((InternalEObject)postStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__POST_STMT, null, msgs);
      if (newPostStmt != null)
        msgs = ((InternalEObject)newPostStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__POST_STMT, null, msgs);
      msgs = basicSetPostStmt(newPostStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__POST_STMT, newPostStmt, newPostStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdentifierList getIdentifierList()
  {
    return identifierList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIdentifierList(IdentifierList newIdentifierList, NotificationChain msgs)
  {
    IdentifierList oldIdentifierList = identifierList;
    identifierList = newIdentifierList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__IDENTIFIER_LIST, oldIdentifierList, newIdentifierList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIdentifierList(IdentifierList newIdentifierList)
  {
    if (newIdentifierList != identifierList)
    {
      NotificationChain msgs = null;
      if (identifierList != null)
        msgs = ((InternalEObject)identifierList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__IDENTIFIER_LIST, null, msgs);
      if (newIdentifierList != null)
        msgs = ((InternalEObject)newIdentifierList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__IDENTIFIER_LIST, null, msgs);
      msgs = basicSetIdentifierList(newIdentifierList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__IDENTIFIER_LIST, newIdentifierList, newIdentifierList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRange()
  {
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRange(String newRange)
  {
    String oldRange = range;
    range = newRange;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__RANGE, oldRange, range));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Block getBlock()
  {
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlock(Block newBlock, NotificationChain msgs)
  {
    Block oldBlock = block;
    block = newBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__BLOCK, oldBlock, newBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBlock(Block newBlock)
  {
    if (newBlock != block)
    {
      NotificationChain msgs = null;
      if (block != null)
        msgs = ((InternalEObject)block).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__BLOCK, null, msgs);
      if (newBlock != null)
        msgs = ((InternalEObject)newBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_STMT__BLOCK, null, msgs);
      msgs = basicSetBlock(newBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_STMT__BLOCK, newBlock, newBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_STMT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case MyDslPackage.FOR_STMT__FOR_STMT_LINHA:
        return basicSetForStmtLinha(null, msgs);
      case MyDslPackage.FOR_STMT__EMPTY_STMT:
        return basicSetEmptyStmt(null, msgs);
      case MyDslPackage.FOR_STMT__SHORT_VAR_DECL:
        return basicSetShortVarDecl(null, msgs);
      case MyDslPackage.FOR_STMT__CONDITION:
        return basicSetCondition(null, msgs);
      case MyDslPackage.FOR_STMT__POST_STMT:
        return basicSetPostStmt(null, msgs);
      case MyDslPackage.FOR_STMT__IDENTIFIER_LIST:
        return basicSetIdentifierList(null, msgs);
      case MyDslPackage.FOR_STMT__BLOCK:
        return basicSetBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_STMT__FOR:
        return getFor();
      case MyDslPackage.FOR_STMT__EXPRESSION:
        return getExpression();
      case MyDslPackage.FOR_STMT__FOR_STMT_LINHA:
        return getForStmtLinha();
      case MyDslPackage.FOR_STMT__EMPTY_STMT:
        return getEmptyStmt();
      case MyDslPackage.FOR_STMT__SHORT_VAR_DECL:
        return getShortVarDecl();
      case MyDslPackage.FOR_STMT__CONDITION:
        return getCondition();
      case MyDslPackage.FOR_STMT__POST_STMT:
        return getPostStmt();
      case MyDslPackage.FOR_STMT__IDENTIFIER_LIST:
        return getIdentifierList();
      case MyDslPackage.FOR_STMT__RANGE:
        return getRange();
      case MyDslPackage.FOR_STMT__BLOCK:
        return getBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_STMT__FOR:
        setFor((String)newValue);
        return;
      case MyDslPackage.FOR_STMT__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case MyDslPackage.FOR_STMT__FOR_STMT_LINHA:
        setForStmtLinha((ForStmtLinha)newValue);
        return;
      case MyDslPackage.FOR_STMT__EMPTY_STMT:
        setEmptyStmt((EmptyStmt)newValue);
        return;
      case MyDslPackage.FOR_STMT__SHORT_VAR_DECL:
        setShortVarDecl((ShortVarDecl)newValue);
        return;
      case MyDslPackage.FOR_STMT__CONDITION:
        setCondition((Condition)newValue);
        return;
      case MyDslPackage.FOR_STMT__POST_STMT:
        setPostStmt((PostStmt)newValue);
        return;
      case MyDslPackage.FOR_STMT__IDENTIFIER_LIST:
        setIdentifierList((IdentifierList)newValue);
        return;
      case MyDslPackage.FOR_STMT__RANGE:
        setRange((String)newValue);
        return;
      case MyDslPackage.FOR_STMT__BLOCK:
        setBlock((Block)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_STMT__FOR:
        setFor(FOR_EDEFAULT);
        return;
      case MyDslPackage.FOR_STMT__EXPRESSION:
        setExpression((Expression)null);
        return;
      case MyDslPackage.FOR_STMT__FOR_STMT_LINHA:
        setForStmtLinha((ForStmtLinha)null);
        return;
      case MyDslPackage.FOR_STMT__EMPTY_STMT:
        setEmptyStmt((EmptyStmt)null);
        return;
      case MyDslPackage.FOR_STMT__SHORT_VAR_DECL:
        setShortVarDecl((ShortVarDecl)null);
        return;
      case MyDslPackage.FOR_STMT__CONDITION:
        setCondition((Condition)null);
        return;
      case MyDslPackage.FOR_STMT__POST_STMT:
        setPostStmt((PostStmt)null);
        return;
      case MyDslPackage.FOR_STMT__IDENTIFIER_LIST:
        setIdentifierList((IdentifierList)null);
        return;
      case MyDslPackage.FOR_STMT__RANGE:
        setRange(RANGE_EDEFAULT);
        return;
      case MyDslPackage.FOR_STMT__BLOCK:
        setBlock((Block)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_STMT__FOR:
        return FOR_EDEFAULT == null ? for_ != null : !FOR_EDEFAULT.equals(for_);
      case MyDslPackage.FOR_STMT__EXPRESSION:
        return expression != null;
      case MyDslPackage.FOR_STMT__FOR_STMT_LINHA:
        return forStmtLinha != null;
      case MyDslPackage.FOR_STMT__EMPTY_STMT:
        return emptyStmt != null;
      case MyDslPackage.FOR_STMT__SHORT_VAR_DECL:
        return shortVarDecl != null;
      case MyDslPackage.FOR_STMT__CONDITION:
        return condition != null;
      case MyDslPackage.FOR_STMT__POST_STMT:
        return postStmt != null;
      case MyDslPackage.FOR_STMT__IDENTIFIER_LIST:
        return identifierList != null;
      case MyDslPackage.FOR_STMT__RANGE:
        return RANGE_EDEFAULT == null ? range != null : !RANGE_EDEFAULT.equals(range);
      case MyDslPackage.FOR_STMT__BLOCK:
        return block != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (for: ");
    result.append(for_);
    result.append(", range: ");
    result.append(range);
    result.append(')');
    return result.toString();
  }

} //ForStmtImpl
