/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.FallthroughStmt;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fallthrough Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FallthroughStmtImpl#getFallthrough <em>Fallthrough</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FallthroughStmtImpl extends MinimalEObjectImpl.Container implements FallthroughStmt
{
  /**
   * The default value of the '{@link #getFallthrough() <em>Fallthrough</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFallthrough()
   * @generated
   * @ordered
   */
  protected static final String FALLTHROUGH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFallthrough() <em>Fallthrough</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFallthrough()
   * @generated
   * @ordered
   */
  protected String fallthrough = FALLTHROUGH_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FallthroughStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.FALLTHROUGH_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFallthrough()
  {
    return fallthrough;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFallthrough(String newFallthrough)
  {
    String oldFallthrough = fallthrough;
    fallthrough = newFallthrough;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FALLTHROUGH_STMT__FALLTHROUGH, oldFallthrough, fallthrough));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.FALLTHROUGH_STMT__FALLTHROUGH:
        return getFallthrough();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.FALLTHROUGH_STMT__FALLTHROUGH:
        setFallthrough((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FALLTHROUGH_STMT__FALLTHROUGH:
        setFallthrough(FALLTHROUGH_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FALLTHROUGH_STMT__FALLTHROUGH:
        return FALLTHROUGH_EDEFAULT == null ? fallthrough != null : !FALLTHROUGH_EDEFAULT.equals(fallthrough);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (fallthrough: ");
    result.append(fallthrough);
    result.append(')');
    return result.toString();
  }

} //FallthroughStmtImpl
