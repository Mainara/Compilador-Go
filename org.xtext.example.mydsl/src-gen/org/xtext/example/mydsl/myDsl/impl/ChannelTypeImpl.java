/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.ChannelType;
import org.xtext.example.mydsl.myDsl.ChannelTypeLinha;
import org.xtext.example.mydsl.myDsl.ElementType;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Channel Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ChannelTypeImpl#getChan <em>Chan</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ChannelTypeImpl#getChannelTypeLinha <em>Channel Type Linha</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ChannelTypeImpl#getElementType <em>Element Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChannelTypeImpl extends MinimalEObjectImpl.Container implements ChannelType
{
  /**
   * The default value of the '{@link #getChan() <em>Chan</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChan()
   * @generated
   * @ordered
   */
  protected static final String CHAN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getChan() <em>Chan</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChan()
   * @generated
   * @ordered
   */
  protected String chan = CHAN_EDEFAULT;

  /**
   * The cached value of the '{@link #getChannelTypeLinha() <em>Channel Type Linha</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChannelTypeLinha()
   * @generated
   * @ordered
   */
  protected ChannelTypeLinha channelTypeLinha;

  /**
   * The cached value of the '{@link #getElementType() <em>Element Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementType()
   * @generated
   * @ordered
   */
  protected ElementType elementType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChannelTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.CHANNEL_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getChan()
  {
    return chan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChan(String newChan)
  {
    String oldChan = chan;
    chan = newChan;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANNEL_TYPE__CHAN, oldChan, chan));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChannelTypeLinha getChannelTypeLinha()
  {
    return channelTypeLinha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChannelTypeLinha(ChannelTypeLinha newChannelTypeLinha, NotificationChain msgs)
  {
    ChannelTypeLinha oldChannelTypeLinha = channelTypeLinha;
    channelTypeLinha = newChannelTypeLinha;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA, oldChannelTypeLinha, newChannelTypeLinha);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChannelTypeLinha(ChannelTypeLinha newChannelTypeLinha)
  {
    if (newChannelTypeLinha != channelTypeLinha)
    {
      NotificationChain msgs = null;
      if (channelTypeLinha != null)
        msgs = ((InternalEObject)channelTypeLinha).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA, null, msgs);
      if (newChannelTypeLinha != null)
        msgs = ((InternalEObject)newChannelTypeLinha).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA, null, msgs);
      msgs = basicSetChannelTypeLinha(newChannelTypeLinha, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA, newChannelTypeLinha, newChannelTypeLinha));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementType getElementType()
  {
    return elementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElementType(ElementType newElementType, NotificationChain msgs)
  {
    ElementType oldElementType = elementType;
    elementType = newElementType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE, oldElementType, newElementType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElementType(ElementType newElementType)
  {
    if (newElementType != elementType)
    {
      NotificationChain msgs = null;
      if (elementType != null)
        msgs = ((InternalEObject)elementType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE, null, msgs);
      if (newElementType != null)
        msgs = ((InternalEObject)newElementType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE, null, msgs);
      msgs = basicSetElementType(newElementType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE, newElementType, newElementType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA:
        return basicSetChannelTypeLinha(null, msgs);
      case MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE:
        return basicSetElementType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANNEL_TYPE__CHAN:
        return getChan();
      case MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA:
        return getChannelTypeLinha();
      case MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE:
        return getElementType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANNEL_TYPE__CHAN:
        setChan((String)newValue);
        return;
      case MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA:
        setChannelTypeLinha((ChannelTypeLinha)newValue);
        return;
      case MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE:
        setElementType((ElementType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANNEL_TYPE__CHAN:
        setChan(CHAN_EDEFAULT);
        return;
      case MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA:
        setChannelTypeLinha((ChannelTypeLinha)null);
        return;
      case MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE:
        setElementType((ElementType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANNEL_TYPE__CHAN:
        return CHAN_EDEFAULT == null ? chan != null : !CHAN_EDEFAULT.equals(chan);
      case MyDslPackage.CHANNEL_TYPE__CHANNEL_TYPE_LINHA:
        return channelTypeLinha != null;
      case MyDslPackage.CHANNEL_TYPE__ELEMENT_TYPE:
        return elementType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (chan: ");
    result.append(chan);
    result.append(')');
    return result.toString();
  }

} //ChannelTypeImpl
