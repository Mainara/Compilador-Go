/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.ImportSpec;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PackageName;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Import Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ImportSpecImpl#getPackageName <em>Package Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ImportSpecImpl#getSTRING_LIT <em>STRING LIT</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImportSpecImpl extends MinimalEObjectImpl.Container implements ImportSpec
{
  /**
   * The cached value of the '{@link #getPackageName() <em>Package Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackageName()
   * @generated
   * @ordered
   */
  protected PackageName packageName;

  /**
   * The default value of the '{@link #getSTRING_LIT() <em>STRING LIT</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSTRING_LIT()
   * @generated
   * @ordered
   */
  protected static final String STRING_LIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSTRING_LIT() <em>STRING LIT</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSTRING_LIT()
   * @generated
   * @ordered
   */
  protected String sTRING_LIT = STRING_LIT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImportSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.IMPORT_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PackageName getPackageName()
  {
    return packageName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPackageName(PackageName newPackageName, NotificationChain msgs)
  {
    PackageName oldPackageName = packageName;
    packageName = newPackageName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.IMPORT_SPEC__PACKAGE_NAME, oldPackageName, newPackageName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPackageName(PackageName newPackageName)
  {
    if (newPackageName != packageName)
    {
      NotificationChain msgs = null;
      if (packageName != null)
        msgs = ((InternalEObject)packageName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMPORT_SPEC__PACKAGE_NAME, null, msgs);
      if (newPackageName != null)
        msgs = ((InternalEObject)newPackageName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IMPORT_SPEC__PACKAGE_NAME, null, msgs);
      msgs = basicSetPackageName(newPackageName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IMPORT_SPEC__PACKAGE_NAME, newPackageName, newPackageName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSTRING_LIT()
  {
    return sTRING_LIT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSTRING_LIT(String newSTRING_LIT)
  {
    String oldSTRING_LIT = sTRING_LIT;
    sTRING_LIT = newSTRING_LIT;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IMPORT_SPEC__STRING_LIT, oldSTRING_LIT, sTRING_LIT));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.IMPORT_SPEC__PACKAGE_NAME:
        return basicSetPackageName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.IMPORT_SPEC__PACKAGE_NAME:
        return getPackageName();
      case MyDslPackage.IMPORT_SPEC__STRING_LIT:
        return getSTRING_LIT();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.IMPORT_SPEC__PACKAGE_NAME:
        setPackageName((PackageName)newValue);
        return;
      case MyDslPackage.IMPORT_SPEC__STRING_LIT:
        setSTRING_LIT((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.IMPORT_SPEC__PACKAGE_NAME:
        setPackageName((PackageName)null);
        return;
      case MyDslPackage.IMPORT_SPEC__STRING_LIT:
        setSTRING_LIT(STRING_LIT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.IMPORT_SPEC__PACKAGE_NAME:
        return packageName != null;
      case MyDslPackage.IMPORT_SPEC__STRING_LIT:
        return STRING_LIT_EDEFAULT == null ? sTRING_LIT != null : !STRING_LIT_EDEFAULT.equals(sTRING_LIT);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (sTRING_LIT: ");
    result.append(sTRING_LIT);
    result.append(')');
    return result.toString();
  }

} //ImportSpecImpl
