/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.AliasDecl;
import org.xtext.example.mydsl.myDsl.BINARY_OP;
import org.xtext.example.mydsl.myDsl.BasicLit;
import org.xtext.example.mydsl.myDsl.Block;
import org.xtext.example.mydsl.myDsl.ConstDecl;
import org.xtext.example.mydsl.myDsl.ConstSpec;
import org.xtext.example.mydsl.myDsl.Declaration;
import org.xtext.example.mydsl.myDsl.ExprCaseClause;
import org.xtext.example.mydsl.myDsl.ExprSwitchCase;
import org.xtext.example.mydsl.myDsl.ExprSwitchStmt;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.Expression1;
import org.xtext.example.mydsl.myDsl.ExpressionList;
import org.xtext.example.mydsl.myDsl.Expression_Linha;
import org.xtext.example.mydsl.myDsl.FunctionBody;
import org.xtext.example.mydsl.myDsl.IdentifierList;
import org.xtext.example.mydsl.myDsl.Literal;
import org.xtext.example.mydsl.myDsl.MethodDecl;
import org.xtext.example.mydsl.myDsl.MethodName;
import org.xtext.example.mydsl.myDsl.Operand;
import org.xtext.example.mydsl.myDsl.OperandName;
import org.xtext.example.mydsl.myDsl.PrimaryExpr;
import org.xtext.example.mydsl.myDsl.ShortVarDecl;
import org.xtext.example.mydsl.myDsl.SimpleStmt;
import org.xtext.example.mydsl.myDsl.SourceFile;
import org.xtext.example.mydsl.myDsl.Statement;
import org.xtext.example.mydsl.myDsl.StatementList;
import org.xtext.example.mydsl.myDsl.SwitchStmt;
import org.xtext.example.mydsl.myDsl.TopLevelDecl;
import org.xtext.example.mydsl.myDsl.TypeDecl;
import org.xtext.example.mydsl.myDsl.TypeDef;
import org.xtext.example.mydsl.myDsl.TypeSpec;
import org.xtext.example.mydsl.myDsl.UnaryExpr;
import org.xtext.example.mydsl.myDsl.VarDecl;
import org.xtext.example.mydsl.myDsl.VarSpec;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  private Integer countVar = Integer.valueOf(1);
  
  private Integer countaddr = Integer.valueOf(0);
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.countVar = Integer.valueOf(1);
    this.countaddr = Integer.valueOf(0);
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<SourceFile> _filter = Iterables.<SourceFile>filter(_iterable, SourceFile.class);
    for (final SourceFile e : _filter) {
      EList<TopLevelDecl> _topLevelDecl = e.getTopLevelDecl();
      String _string = _topLevelDecl.toString();
      String _plus = (_string + ".txt");
      CharSequence _compile = this.compile(e);
      fsa.generateFile(_plus, _compile);
    }
  }
  
  public CharSequence compile(final SourceFile sourceFile) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(this.countaddr, "");
    _builder.append(": LD SP, 1000");
    _builder.newLineIfNotEmpty();
    this.nextAddress();
    _builder.newLineIfNotEmpty();
    {
      EList<TopLevelDecl> _topLevelDecl = sourceFile.getTopLevelDecl();
      for(final TopLevelDecl topLeveDecl : _topLevelDecl) {
        CharSequence _genField = this.genField(topLeveDecl);
        _builder.append(_genField, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genField(final TopLevelDecl topLevelDecl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Declaration _declaration = topLevelDecl.getDeclaration();
      if ((_declaration instanceof Declaration)) {
        Declaration _declaration_1 = topLevelDecl.getDeclaration();
        CharSequence _genDeclaration = this.genDeclaration(((Declaration) _declaration_1));
        _builder.append(_genDeclaration, "");
        _builder.newLineIfNotEmpty();
      } else {
        MethodDecl _methodDecl = topLevelDecl.getMethodDecl();
        if ((_methodDecl instanceof MethodDecl)) {
          MethodDecl _methodDecl_1 = topLevelDecl.getMethodDecl();
          CharSequence _genMethodDecl = this.genMethodDecl(((MethodDecl) _methodDecl_1));
          _builder.append(_genMethodDecl, "");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genMethodDecl(final MethodDecl declaration) {
    StringConcatenation _builder = new StringConcatenation();
    {
      FunctionBody _functionBody = declaration.getFunctionBody();
      boolean _notEquals = (!Objects.equal(_functionBody, null));
      if (_notEquals) {
        MethodName _methodName = declaration.getMethodName();
        _builder.append(_methodName, "");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        FunctionBody _functionBody_1 = declaration.getFunctionBody();
        CharSequence _genFunctionBody = this.genFunctionBody(_functionBody_1);
        _builder.append(_genFunctionBody, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genFunctionBody(final FunctionBody functioBody) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Block _block = functioBody.getBlock();
      boolean _notEquals = (!Objects.equal(_block, null));
      if (_notEquals) {
        Block _block_1 = functioBody.getBlock();
        CharSequence _genBlock = this.genBlock(_block_1);
        _builder.append(_genBlock, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genBlock(final Block block) {
    StringConcatenation _builder = new StringConcatenation();
    {
      StatementList _statementList = block.getStatementList();
      boolean _notEquals = (!Objects.equal(_statementList, null));
      if (_notEquals) {
        StatementList _statementList_1 = block.getStatementList();
        CharSequence _genStatementList = this.genStatementList(_statementList_1);
        _builder.append(_genStatementList, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genStatementList(final StatementList statementList) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Statement> _statements = statementList.getStatements();
      boolean _notEquals = (!Objects.equal(_statements, null));
      if (_notEquals) {
        {
          EList<Statement> _statements_1 = statementList.getStatements();
          for(final Statement actualStatment : _statements_1) {
            CharSequence _genStatement = this.genStatement(actualStatment);
            _builder.append(_genStatement, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genStatement(final Statement statement) {
    StringConcatenation _builder = new StringConcatenation();
    {
      SwitchStmt _switchStmt = statement.getSwitchStmt();
      boolean _notEquals = (!Objects.equal(_switchStmt, null));
      if (_notEquals) {
        SwitchStmt _switchStmt_1 = statement.getSwitchStmt();
        CharSequence _genSwicthStmt = this.genSwicthStmt(_switchStmt_1);
        _builder.append(_genSwicthStmt, "");
        _builder.newLineIfNotEmpty();
      } else {
        Declaration _declaration = statement.getDeclaration();
        boolean _notEquals_1 = (!Objects.equal(_declaration, null));
        if (_notEquals_1) {
          Declaration _declaration_1 = statement.getDeclaration();
          CharSequence _genDeclaration = this.genDeclaration(_declaration_1);
          _builder.append(_genDeclaration, "");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genSwicthStmt(final SwitchStmt switchStmt) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ExprSwitchStmt _exprSwitchStmt = switchStmt.getExprSwitchStmt();
      boolean _notEquals = (!Objects.equal(_exprSwitchStmt, null));
      if (_notEquals) {
        {
          ExprSwitchStmt _exprSwitchStmt_1 = switchStmt.getExprSwitchStmt();
          SimpleStmt _simpleStmt = _exprSwitchStmt_1.getSimpleStmt();
          boolean _notEquals_1 = (!Objects.equal(_simpleStmt, null));
          if (_notEquals_1) {
            {
              ExprSwitchStmt _exprSwitchStmt_2 = switchStmt.getExprSwitchStmt();
              SimpleStmt _simpleStmt_1 = _exprSwitchStmt_2.getSimpleStmt();
              ShortVarDecl _shortVarDecl = _simpleStmt_1.getShortVarDecl();
              boolean _notEquals_2 = (!Objects.equal(_shortVarDecl, null));
              if (_notEquals_2) {
                ExprSwitchStmt _exprSwitchStmt_3 = switchStmt.getExprSwitchStmt();
                SimpleStmt _simpleStmt_2 = _exprSwitchStmt_3.getSimpleStmt();
                ShortVarDecl _shortVarDecl_1 = _simpleStmt_2.getShortVarDecl();
                ExpressionList _expressionList = _shortVarDecl_1.getExpressionList();
                Expression _expression = _expressionList.getExpression();
                ExprSwitchStmt _exprSwitchStmt_4 = switchStmt.getExprSwitchStmt();
                SimpleStmt _simpleStmt_3 = _exprSwitchStmt_4.getSimpleStmt();
                ShortVarDecl _shortVarDecl_2 = _simpleStmt_3.getShortVarDecl();
                IdentifierList _identifierList = _shortVarDecl_2.getIdentifierList();
                String _id = _identifierList.getId();
                CharSequence _genExpression = this.genExpression(_expression, _id);
                _builder.append(_genExpression, "");
                _builder.newLineIfNotEmpty();
                String _string = this.countaddr.toString();
                _builder.append(_string, "");
                _builder.append(": LD R");
                String _string_1 = this.countVar.toString();
                _builder.append(_string_1, "");
                _builder.append(", ");
                ExprSwitchStmt _exprSwitchStmt_5 = switchStmt.getExprSwitchStmt();
                SimpleStmt _simpleStmt_4 = _exprSwitchStmt_5.getSimpleStmt();
                ShortVarDecl _shortVarDecl_3 = _simpleStmt_4.getShortVarDecl();
                IdentifierList _identifierList_1 = _shortVarDecl_3.getIdentifierList();
                String _id_1 = _identifierList_1.getId();
                _builder.append(_id_1, "");
                _builder.newLineIfNotEmpty();
                this.increment();
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          ExprSwitchStmt _exprSwitchStmt_6 = switchStmt.getExprSwitchStmt();
          EList<ExprCaseClause> _exprCaseClause = _exprSwitchStmt_6.getExprCaseClause();
          boolean _notEquals_3 = (!Objects.equal(_exprCaseClause, null));
          if (_notEquals_3) {
            {
              ExprSwitchStmt _exprSwitchStmt_7 = switchStmt.getExprSwitchStmt();
              EList<ExprCaseClause> _exprCaseClause_1 = _exprSwitchStmt_7.getExprCaseClause();
              for(final ExprCaseClause exprCaseClause : _exprCaseClause_1) {
                CharSequence _genExprCaseClause = this.genExprCaseClause(exprCaseClause);
                _builder.append(_genExprCaseClause, "");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExprCaseClause(final ExprCaseClause exprCaseClause) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ExprSwitchCase _exprSwitchCase = exprCaseClause.getExprSwitchCase();
      ExpressionList _expressionList = _exprSwitchCase.getExpressionList();
      boolean _notEquals = (!Objects.equal(_expressionList, null));
      if (_notEquals) {
        {
          ExprSwitchCase _exprSwitchCase_1 = exprCaseClause.getExprSwitchCase();
          ExpressionList _expressionList_1 = _exprSwitchCase_1.getExpressionList();
          Expression _expression = _expressionList_1.getExpression();
          UnaryExpr _unaryExpr = _expression.getUnaryExpr();
          PrimaryExpr _primaryExpr = _unaryExpr.getPrimaryExpr();
          Operand _operand = _primaryExpr.getOperand();
          Literal _literal = _operand.getLiteral();
          boolean _notEquals_1 = (!Objects.equal(_literal, null));
          if (_notEquals_1) {
            String _string = this.countaddr.toString();
            _builder.append(_string, "");
            _builder.append(": LD R");
            String _string_1 = this.countVar.toString();
            _builder.append(_string_1, "");
            _builder.append(", ");
            ExprSwitchCase _exprSwitchCase_2 = exprCaseClause.getExprSwitchCase();
            ExpressionList _expressionList_2 = _exprSwitchCase_2.getExpressionList();
            Expression _expression_1 = _expressionList_2.getExpression();
            UnaryExpr _unaryExpr_1 = _expression_1.getUnaryExpr();
            PrimaryExpr _primaryExpr_1 = _unaryExpr_1.getPrimaryExpr();
            Operand _operand_1 = _primaryExpr_1.getOperand();
            Literal _literal_1 = _operand_1.getLiteral();
            BasicLit _basicLit = _literal_1.getBasicLit();
            _builder.append(_basicLit, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            String _string_2 = this.countaddr.toString();
            _builder.append(_string_2, "");
            _builder.append(": BQE R");
            String _string_3 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
            _builder.append(_string_3, "");
            _builder.append(",  R");
            String _string_4 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
            _builder.append(_string_4, "");
            _builder.append(", #EXECUTE");
            _builder.newLineIfNotEmpty();
            _builder.append("#EXECUTE:");
            _builder.newLine();
          } else {
            String _string_5 = this.countaddr.toString();
            _builder.append(_string_5, "");
            _builder.append(": LD R");
            String _string_6 = this.countVar.toString();
            _builder.append(_string_6, "");
            _builder.append(", ");
            ExprSwitchCase _exprSwitchCase_3 = exprCaseClause.getExprSwitchCase();
            ExpressionList _expressionList_3 = _exprSwitchCase_3.getExpressionList();
            Expression _expression_2 = _expressionList_3.getExpression();
            UnaryExpr _unaryExpr_2 = _expression_2.getUnaryExpr();
            PrimaryExpr _primaryExpr_2 = _unaryExpr_2.getPrimaryExpr();
            Operand _operand_2 = _primaryExpr_2.getOperand();
            OperandName _operandName = _operand_2.getOperandName();
            _builder.append(_operandName, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            String _string_7 = this.countaddr.toString();
            _builder.append(_string_7, "");
            _builder.append(": BQE R");
            String _string_8 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
            _builder.append(_string_8, "");
            _builder.append(",  R");
            String _string_9 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
            _builder.append(_string_9, "");
            _builder.append(", #EXECUTE");
            _builder.newLineIfNotEmpty();
            _builder.append("#EXECUTE:");
            _builder.newLine();
          }
        }
      } else {
        _builder.append("DEFAULT:");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence genType(final TypeDecl typeDecl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      TypeSpec _typeSpec = typeDecl.getTypeSpec();
      boolean _notEquals = (!Objects.equal(_typeSpec, null));
      if (_notEquals) {
        TypeSpec _typeSpec_1 = typeDecl.getTypeSpec();
        CharSequence _genTypeSpec = this.genTypeSpec(((TypeSpec) _typeSpec_1));
        _builder.append(_genTypeSpec, "");
        _builder.newLineIfNotEmpty();
      } else {
        EList<TypeSpec> _typeSpec1 = typeDecl.getTypeSpec1();
        boolean _notEquals_1 = (!Objects.equal(_typeSpec1, null));
        if (_notEquals_1) {
          {
            EList<TypeSpec> _typeSpec1_1 = typeDecl.getTypeSpec1();
            for(final TypeSpec typeSpec : _typeSpec1_1) {
              CharSequence _genTypeSpec_1 = this.genTypeSpec(typeSpec);
              _builder.append(_genTypeSpec_1, "");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genTypeSpec(final TypeSpec typeSpec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      AliasDecl _aliasDecl = typeSpec.getAliasDecl();
      boolean _notEquals = (!Objects.equal(_aliasDecl, null));
      if (_notEquals) {
        AliasDecl _aliasDecl_1 = typeSpec.getAliasDecl();
        CharSequence _genAliasDecl = this.genAliasDecl(((AliasDecl) _aliasDecl_1));
        _builder.append(_genAliasDecl, "");
        _builder.newLineIfNotEmpty();
      } else {
        TypeDef _typeDef = typeSpec.getTypeDef();
        boolean _notEquals_1 = (!Objects.equal(_typeDef, null));
        if (_notEquals_1) {
          TypeDef _typeDef_1 = typeSpec.getTypeDef();
          CharSequence _genTypeDef = this.genTypeDef(((TypeDef) _typeDef_1));
          _builder.append(_genTypeDef, "");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genAliasDecl(final AliasDecl aliasDecl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _id = aliasDecl.getId();
      boolean _isEmpty = _id.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        String _string = this.countaddr.toString();
        _builder.append(_string, "");
        _builder.append(": LD R");
        String _string_1 = this.countVar.toString();
        _builder.append(_string_1, "");
        _builder.append(", ");
        String _id_1 = aliasDecl.getId();
        _builder.append(_id_1, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genTypeDef(final TypeDef typeDef) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _id = typeDef.getId();
      boolean _isEmpty = _id.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        String _string = this.countaddr.toString();
        _builder.append(_string, "");
        _builder.append(": LD R");
        String _string_1 = this.countVar.toString();
        _builder.append(_string_1, "");
        _builder.append(", ");
        String _id_1 = typeDef.getId();
        _builder.append(_id_1, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genDeclaration(final Declaration decl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ConstDecl _constDecl = decl.getConstDecl();
      if ((_constDecl instanceof ConstDecl)) {
        ConstDecl _constDecl_1 = decl.getConstDecl();
        CharSequence _genConst = this.genConst(((ConstDecl) _constDecl_1));
        _builder.append(_genConst, "");
        _builder.newLineIfNotEmpty();
      } else {
        TypeDecl _typeDecl = decl.getTypeDecl();
        if ((_typeDecl instanceof TypeDecl)) {
          TypeDecl _typeDecl_1 = decl.getTypeDecl();
          CharSequence _genType = this.genType(((TypeDecl) _typeDecl_1));
          _builder.append(_genType, "");
          _builder.newLineIfNotEmpty();
        } else {
          VarDecl _varDecl = decl.getVarDecl();
          if ((_varDecl instanceof VarDecl)) {
            VarDecl _varDecl_1 = decl.getVarDecl();
            CharSequence _genVar = this.genVar(((VarDecl) _varDecl_1));
            _builder.append(_genVar, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genVar(final VarDecl varDecl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      VarSpec _varSpec = varDecl.getVarSpec();
      boolean _notEquals = (!Objects.equal(_varSpec, null));
      if (_notEquals) {
        VarSpec _varSpec_1 = varDecl.getVarSpec();
        CharSequence _genVarSpec = this.genVarSpec(((VarSpec) _varSpec_1));
        _builder.append(_genVarSpec, "");
        _builder.newLineIfNotEmpty();
      } else {
        EList<VarSpec> _varSpec1 = varDecl.getVarSpec1();
        boolean _notEquals_1 = (!Objects.equal(_varSpec1, null));
        if (_notEquals_1) {
          {
            EList<VarSpec> _varSpec1_1 = varDecl.getVarSpec1();
            for(final VarSpec varSpec : _varSpec1_1) {
              CharSequence _genVarSpec_1 = this.genVarSpec(varSpec);
              _builder.append(_genVarSpec_1, "");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genVarSpec(final VarSpec varSpec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ExpressionList _expressionList = varSpec.getExpressionList();
      boolean _notEquals = (!Objects.equal(_expressionList, null));
      if (_notEquals) {
        {
          IdentifierList _identifierList = varSpec.getIdentifierList();
          String _id = _identifierList.getId();
          boolean _isEmpty = _id.isEmpty();
          boolean _not = (!_isEmpty);
          if (_not) {
            ExpressionList _expressionList_1 = varSpec.getExpressionList();
            Expression _expression = _expressionList_1.getExpression();
            IdentifierList _identifierList_1 = varSpec.getIdentifierList();
            String _id_1 = _identifierList_1.getId();
            CharSequence _genExpression = this.genExpression(_expression, _id_1);
            _builder.append(_genExpression, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        {
          IdentifierList _identifierList_2 = varSpec.getIdentifierList();
          EList<String> _id1 = _identifierList_2.getId1();
          boolean _notEquals_1 = (!Objects.equal(_id1, null));
          if (_notEquals_1) {
            {
              IdentifierList _identifierList_3 = varSpec.getIdentifierList();
              EList<String> _id1_1 = _identifierList_3.getId1();
              for(final String id : _id1_1) {
                String _string = this.countaddr.toString();
                _builder.append(_string, "");
                _builder.append(": LD R");
                String _string_1 = this.countVar.toString();
                _builder.append(_string_1, "");
                _builder.append(", #TRUE");
                _builder.newLineIfNotEmpty();
                this.increment();
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
                String _string_2 = this.countaddr.toString();
                _builder.append(_string_2, "");
                _builder.append(": ST ");
                IdentifierList _identifierList_4 = varSpec.getIdentifierList();
                String _id_2 = _identifierList_4.getId();
                _builder.append(_id_2, "");
                _builder.append(", R");
                Integer _integer = new Integer(((this.countVar).intValue() - 1));
                String _string_3 = _integer.toString();
                _builder.append(_string_3, "");
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      } else {
        {
          IdentifierList _identifierList_5 = varSpec.getIdentifierList();
          String _id_3 = _identifierList_5.getId();
          boolean _isEmpty_1 = _id_3.isEmpty();
          boolean _not_1 = (!_isEmpty_1);
          if (_not_1) {
            String _string_4 = this.countaddr.toString();
            _builder.append(_string_4, "");
            _builder.append(": LD R");
            String _string_5 = this.countVar.toString();
            _builder.append(_string_5, "");
            _builder.append(", ");
            IdentifierList _identifierList_6 = varSpec.getIdentifierList();
            String _id_4 = _identifierList_6.getId();
            _builder.append(_id_4, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        {
          IdentifierList _identifierList_7 = varSpec.getIdentifierList();
          EList<String> _id1_2 = _identifierList_7.getId1();
          boolean _notEquals_2 = (!Objects.equal(_id1_2, null));
          if (_notEquals_2) {
            {
              IdentifierList _identifierList_8 = varSpec.getIdentifierList();
              EList<String> _id1_3 = _identifierList_8.getId1();
              for(final String id_1 : _id1_3) {
                String _string_6 = this.countaddr.toString();
                _builder.append(_string_6, "");
                _builder.append(": LD R");
                String _string_7 = this.countVar.toString();
                _builder.append(_string_7, "");
                _builder.append(", ");
                _builder.append(id_1, "");
                _builder.newLineIfNotEmpty();
                this.increment();
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genConst(final ConstDecl constDecl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ConstSpec _constSpec = constDecl.getConstSpec();
      boolean _notEquals = (!Objects.equal(_constSpec, null));
      if (_notEquals) {
        ConstSpec _constSpec_1 = constDecl.getConstSpec();
        CharSequence _genConstSpec = this.genConstSpec(((ConstSpec) _constSpec_1));
        _builder.append(_genConstSpec, "");
        _builder.newLineIfNotEmpty();
      } else {
        EList<ConstSpec> _constSpec1 = constDecl.getConstSpec1();
        boolean _notEquals_1 = (!Objects.equal(_constSpec1, null));
        if (_notEquals_1) {
          {
            EList<ConstSpec> _constSpec1_1 = constDecl.getConstSpec1();
            for(final ConstSpec constSpec : _constSpec1_1) {
              CharSequence _genConstSpec_1 = this.genConstSpec(constSpec);
              _builder.append(_genConstSpec_1, "");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genConstSpec(final ConstSpec spec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ExpressionList _expressionList = spec.getExpressionList();
      boolean _notEquals = (!Objects.equal(_expressionList, null));
      if (_notEquals) {
        {
          IdentifierList _identifierList = spec.getIdentifierList();
          String _id = _identifierList.getId();
          boolean _isEmpty = _id.isEmpty();
          boolean _not = (!_isEmpty);
          if (_not) {
            ExpressionList _expressionList_1 = spec.getExpressionList();
            Expression _expression = _expressionList_1.getExpression();
            IdentifierList _identifierList_1 = spec.getIdentifierList();
            String _id_1 = _identifierList_1.getId();
            CharSequence _genExpression = this.genExpression(_expression, _id_1);
            _builder.append(_genExpression, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        {
          IdentifierList _identifierList_2 = spec.getIdentifierList();
          EList<String> _id1 = _identifierList_2.getId1();
          boolean _notEquals_1 = (!Objects.equal(_id1, null));
          if (_notEquals_1) {
            {
              IdentifierList _identifierList_3 = spec.getIdentifierList();
              EList<String> _id1_1 = _identifierList_3.getId1();
              for(final String id : _id1_1) {
                _builder.append("\t");
                String _string = this.countaddr.toString();
                _builder.append(_string, "\t");
                _builder.append(": LD R");
                String _string_1 = this.countVar.toString();
                _builder.append(_string_1, "\t");
                _builder.append(", #TRUE");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                this.increment();
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                this.nextAddress();
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                String _string_2 = this.countaddr.toString();
                _builder.append(_string_2, "\t");
                _builder.append(": ST ");
                _builder.append(id, "\t");
                _builder.append(", R");
                Integer _integer = new Integer(((this.countVar).intValue() - 1));
                String _string_3 = _integer.toString();
                _builder.append(_string_3, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                this.nextAddress();
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      } else {
        {
          IdentifierList _identifierList_4 = spec.getIdentifierList();
          String _id_2 = _identifierList_4.getId();
          boolean _isEmpty_1 = _id_2.isEmpty();
          boolean _not_1 = (!_isEmpty_1);
          if (_not_1) {
            String _string_4 = this.countaddr.toString();
            _builder.append(_string_4, "");
            _builder.append(": LD R");
            String _string_5 = this.countVar.toString();
            _builder.append(_string_5, "");
            _builder.append(", ");
            IdentifierList _identifierList_5 = spec.getIdentifierList();
            String _id_3 = _identifierList_5.getId();
            _builder.append(_id_3, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        {
          IdentifierList _identifierList_6 = spec.getIdentifierList();
          EList<String> _id1_2 = _identifierList_6.getId1();
          boolean _notEquals_2 = (!Objects.equal(_id1_2, null));
          if (_notEquals_2) {
            {
              IdentifierList _identifierList_7 = spec.getIdentifierList();
              EList<String> _id1_3 = _identifierList_7.getId1();
              for(final String id_1 : _id1_3) {
                String _string_6 = this.countaddr.toString();
                _builder.append(_string_6, "");
                _builder.append(": LD R");
                String _string_7 = this.countVar.toString();
                _builder.append(_string_7, "");
                _builder.append(", ");
                _builder.append(id_1, "");
                _builder.newLineIfNotEmpty();
                this.increment();
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public void nextAddress() {
    this.countaddr = Integer.valueOf(((this.countaddr).intValue() + 8));
  }
  
  public void increment() {
    this.countVar++;
  }
  
  public CharSequence genExpression(final Expression exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression_Linha _expression_Linha = exp.getExpression_Linha();
      BINARY_OP _bINARY_OP = _expression_Linha.getBINARY_OP();
      boolean _notEquals = (!Objects.equal(_bINARY_OP, null));
      if (_notEquals) {
        {
          Expression_Linha _expression_Linha_1 = exp.getExpression_Linha();
          BINARY_OP _bINARY_OP_1 = _expression_Linha_1.getBINARY_OP();
          String _rEL_OP = _bINARY_OP_1.getREL_OP();
          boolean _notEquals_1 = (!Objects.equal(_rEL_OP, null));
          if (_notEquals_1) {
            CharSequence _genExpressionRelop = this.genExpressionRelop(exp, name);
            _builder.append(_genExpressionRelop, "");
            _builder.newLineIfNotEmpty();
          } else {
            Expression_Linha _expression_Linha_2 = exp.getExpression_Linha();
            BINARY_OP _bINARY_OP_2 = _expression_Linha_2.getBINARY_OP();
            String _aDD_OP = _bINARY_OP_2.getADD_OP();
            boolean _notEquals_2 = (!Objects.equal(_aDD_OP, null));
            if (_notEquals_2) {
              Expression_Linha _expression_Linha_3 = exp.getExpression_Linha();
              BINARY_OP _bINARY_OP_3 = _expression_Linha_3.getBINARY_OP();
              String _aDD_OP_1 = _bINARY_OP_3.getADD_OP();
              CharSequence _genExpressionArit = this.genExpressionArit(exp, name, _aDD_OP_1);
              _builder.append(_genExpressionArit, "");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExpressionRelop(final Expression exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression_Linha _expression_Linha = exp.getExpression_Linha();
      BINARY_OP _bINARY_OP = _expression_Linha.getBINARY_OP();
      String _rEL_OP = _bINARY_OP.getREL_OP();
      boolean _equals = _rEL_OP.equals("==");
      if (_equals) {
        CharSequence _genExpressionEquals = this.genExpressionEquals(name, exp);
        _builder.append(_genExpressionEquals, "");
        _builder.newLineIfNotEmpty();
      } else {
        Expression_Linha _expression_Linha_1 = exp.getExpression_Linha();
        BINARY_OP _bINARY_OP_1 = _expression_Linha_1.getBINARY_OP();
        String _rEL_OP_1 = _bINARY_OP_1.getREL_OP();
        boolean _equals_1 = _rEL_OP_1.equals("!=");
        if (_equals_1) {
          CharSequence _genExpressionNotEquals = this.genExpressionNotEquals(name, exp);
          _builder.append(_genExpressionNotEquals, "");
          _builder.newLineIfNotEmpty();
        } else {
          Expression_Linha _expression_Linha_2 = exp.getExpression_Linha();
          BINARY_OP _bINARY_OP_2 = _expression_Linha_2.getBINARY_OP();
          String _rEL_OP_2 = _bINARY_OP_2.getREL_OP();
          boolean _equals_2 = _rEL_OP_2.equals(">");
          if (_equals_2) {
            CharSequence _genExpressionMaior = this.genExpressionMaior(name, exp);
            _builder.append(_genExpressionMaior, "");
            _builder.newLineIfNotEmpty();
          } else {
            Expression_Linha _expression_Linha_3 = exp.getExpression_Linha();
            BINARY_OP _bINARY_OP_3 = _expression_Linha_3.getBINARY_OP();
            String _rEL_OP_3 = _bINARY_OP_3.getREL_OP();
            boolean _equals_3 = _rEL_OP_3.equals("<");
            if (_equals_3) {
              CharSequence _genExpressionMenor = this.genExpressionMenor(name, exp);
              _builder.append(_genExpressionMenor, "");
              _builder.newLineIfNotEmpty();
            } else {
              Expression_Linha _expression_Linha_4 = exp.getExpression_Linha();
              BINARY_OP _bINARY_OP_4 = _expression_Linha_4.getBINARY_OP();
              String _rEL_OP_4 = _bINARY_OP_4.getREL_OP();
              boolean _equals_4 = _rEL_OP_4.equals(">=");
              if (_equals_4) {
                CharSequence _genExpressionMaiorIgual = this.genExpressionMaiorIgual(name, exp);
                _builder.append(_genExpressionMaiorIgual, "");
                _builder.newLineIfNotEmpty();
              } else {
                CharSequence _genExpressionMenorIgual = this.genExpressionMenorIgual(name, exp);
                _builder.append(_genExpressionMenorIgual, "");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genExpressionMaior(final String name, final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      UnaryExpr _unaryExpr = exp.getUnaryExpr();
      PrimaryExpr _primaryExpr = _unaryExpr.getPrimaryExpr();
      Operand _operand = _primaryExpr.getOperand();
      Literal _literal = _operand.getLiteral();
      BasicLit _basicLit = _literal.getBasicLit();
      String _string_lit = _basicLit.getString_lit();
      boolean _notEquals = (!Objects.equal(_string_lit, null));
      if (_notEquals) {
        String _string = this.countaddr.toString();
        _builder.append(_string, "");
        _builder.append(": LD R");
        String _string_1 = this.countVar.toString();
        _builder.append(_string_1, "");
        _builder.append(", ");
        UnaryExpr _unaryExpr_1 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_1 = _unaryExpr_1.getPrimaryExpr();
        Operand _operand_1 = _primaryExpr_1.getOperand();
        Literal _literal_1 = _operand_1.getLiteral();
        BasicLit _basicLit_1 = _literal_1.getBasicLit();
        String _string_lit_1 = _basicLit_1.getString_lit();
        _builder.append(_string_lit_1, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_2 = this.countaddr.toString();
        _builder.append(_string_2, "");
        _builder.append(": LD R");
        String _string_3 = this.countVar.toString();
        _builder.append(_string_3, "");
        _builder.append(", ");
        Expression_Linha _expression_Linha = exp.getExpression_Linha();
        Expression1 _expression1 = _expression_Linha.getExpression1();
        UnaryExpr _unaryExpr_2 = _expression1.getUnaryExpr();
        PrimaryExpr _primaryExpr_2 = _unaryExpr_2.getPrimaryExpr();
        Operand _operand_2 = _primaryExpr_2.getOperand();
        Literal _literal_2 = _operand_2.getLiteral();
        BasicLit _basicLit_2 = _literal_2.getBasicLit();
        String _string_lit_2 = _basicLit_2.getString_lit();
        _builder.append(_string_lit_2, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_4 = this.countaddr.toString();
        _builder.append(_string_4, "");
        _builder.append(": SUB R");
        String _string_5 = this.countVar.toString();
        _builder.append(_string_5, "");
        _builder.append(", R");
        Integer _integer = new Integer(((this.countVar).intValue() - 1));
        String _string_6 = _integer.toString();
        _builder.append(_string_6, "");
        _builder.append(" , R");
        Integer _integer_1 = new Integer(((this.countVar).intValue() - 2));
        String _string_7 = _integer_1.toString();
        _builder.append(_string_7, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_8 = this.countaddr.toString();
        _builder.append(_string_8, "");
        _builder.append(": BGTZ R");
        String _string_9 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
        _builder.append(_string_9, "");
        _builder.append(", #ATRIBTRUE");
        _builder.newLineIfNotEmpty();
        String _string_10 = this.countaddr.toString();
        _builder.append(_string_10, "");
        _builder.append(": ST ");
        _builder.append(name, "");
        _builder.append(", false");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("#ATRIBTRUE:");
        _builder.newLine();
        _builder.append(" \t");
        String _string_11 = this.countaddr.toString();
        _builder.append(_string_11, " \t");
        _builder.append(": ST ");
        _builder.append(name, " \t");
        _builder.append(", true");
        _builder.newLineIfNotEmpty();
      } else {
        UnaryExpr _unaryExpr_3 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_3 = _unaryExpr_3.getPrimaryExpr();
        Operand _operand_3 = _primaryExpr_3.getOperand();
        Literal _literal_3 = _operand_3.getLiteral();
        BasicLit _basicLit_3 = _literal_3.getBasicLit();
        String _int_lit = _basicLit_3.getInt_lit();
        boolean _notEquals_1 = (!Objects.equal(_int_lit, null));
        if (_notEquals_1) {
          String _string_12 = this.countaddr.toString();
          _builder.append(_string_12, "");
          _builder.append(": LD R");
          String _string_13 = this.countVar.toString();
          _builder.append(_string_13, "");
          _builder.append(", ");
          UnaryExpr _unaryExpr_4 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_4 = _unaryExpr_4.getPrimaryExpr();
          Operand _operand_4 = _primaryExpr_4.getOperand();
          Literal _literal_4 = _operand_4.getLiteral();
          BasicLit _basicLit_4 = _literal_4.getBasicLit();
          String _int_lit_1 = _basicLit_4.getInt_lit();
          _builder.append(_int_lit_1, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_14 = this.countaddr.toString();
          _builder.append(_string_14, "");
          _builder.append(": LD R");
          String _string_15 = this.countVar.toString();
          _builder.append(_string_15, "");
          _builder.append(", ");
          Expression_Linha _expression_Linha_1 = exp.getExpression_Linha();
          Expression1 _expression1_1 = _expression_Linha_1.getExpression1();
          UnaryExpr _unaryExpr_5 = _expression1_1.getUnaryExpr();
          PrimaryExpr _primaryExpr_5 = _unaryExpr_5.getPrimaryExpr();
          Operand _operand_5 = _primaryExpr_5.getOperand();
          Literal _literal_5 = _operand_5.getLiteral();
          BasicLit _basicLit_5 = _literal_5.getBasicLit();
          String _int_lit_2 = _basicLit_5.getInt_lit();
          _builder.append(_int_lit_2, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_16 = this.countaddr.toString();
          _builder.append(_string_16, "");
          _builder.append(": SUB R");
          String _string_17 = this.countVar.toString();
          _builder.append(_string_17, "");
          _builder.append(", R");
          Integer _integer_2 = new Integer(((this.countVar).intValue() - 1));
          String _string_18 = _integer_2.toString();
          _builder.append(_string_18, "");
          _builder.append(" , R");
          Integer _integer_3 = new Integer(((this.countVar).intValue() - 2));
          String _string_19 = _integer_3.toString();
          _builder.append(_string_19, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_20 = this.countaddr.toString();
          _builder.append(_string_20, "");
          _builder.append(": BGTZ R");
          String _string_21 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
          _builder.append(_string_21, "");
          _builder.append(", #ATRIBTRUE");
          _builder.newLineIfNotEmpty();
          String _string_22 = this.countaddr.toString();
          _builder.append(_string_22, "");
          _builder.append(": ST ");
          _builder.append(name, "");
          _builder.append(", false");
          _builder.newLineIfNotEmpty();
          _builder.append("#ATRIBTRUE:");
          _builder.newLine();
          _builder.append("\t");
          String _string_23 = this.countaddr.toString();
          _builder.append(_string_23, "\t");
          _builder.append(": ST ");
          _builder.append(name, "\t");
          _builder.append(", true");
          _builder.newLineIfNotEmpty();
        } else {
          UnaryExpr _unaryExpr_6 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_6 = _unaryExpr_6.getPrimaryExpr();
          Operand _operand_6 = _primaryExpr_6.getOperand();
          Literal _literal_6 = _operand_6.getLiteral();
          BasicLit _basicLit_6 = _literal_6.getBasicLit();
          String _float_lit = _basicLit_6.getFloat_lit();
          boolean _notEquals_2 = (!Objects.equal(_float_lit, null));
          if (_notEquals_2) {
            String _string_24 = this.countaddr.toString();
            _builder.append(_string_24, "");
            _builder.append(": LD R");
            String _string_25 = this.countVar.toString();
            _builder.append(_string_25, "");
            _builder.append(", ");
            UnaryExpr _unaryExpr_7 = exp.getUnaryExpr();
            PrimaryExpr _primaryExpr_7 = _unaryExpr_7.getPrimaryExpr();
            Operand _operand_7 = _primaryExpr_7.getOperand();
            Literal _literal_7 = _operand_7.getLiteral();
            BasicLit _basicLit_7 = _literal_7.getBasicLit();
            String _float_lit_1 = _basicLit_7.getFloat_lit();
            _builder.append(_float_lit_1, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_26 = this.countaddr.toString();
            _builder.append(_string_26, "");
            _builder.append(": LD R");
            String _string_27 = this.countVar.toString();
            _builder.append(_string_27, "");
            _builder.append(", ");
            Expression_Linha _expression_Linha_2 = exp.getExpression_Linha();
            Expression1 _expression1_2 = _expression_Linha_2.getExpression1();
            UnaryExpr _unaryExpr_8 = _expression1_2.getUnaryExpr();
            PrimaryExpr _primaryExpr_8 = _unaryExpr_8.getPrimaryExpr();
            Operand _operand_8 = _primaryExpr_8.getOperand();
            Literal _literal_8 = _operand_8.getLiteral();
            BasicLit _basicLit_8 = _literal_8.getBasicLit();
            String _float_lit_2 = _basicLit_8.getFloat_lit();
            _builder.append(_float_lit_2, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_28 = this.countaddr.toString();
            _builder.append(_string_28, "");
            _builder.append(": SUB R");
            String _string_29 = this.countVar.toString();
            _builder.append(_string_29, "");
            _builder.append(", R");
            Integer _integer_4 = new Integer(((this.countVar).intValue() - 1));
            String _string_30 = _integer_4.toString();
            _builder.append(_string_30, "");
            _builder.append(" , R");
            Integer _integer_5 = new Integer(((this.countVar).intValue() - 2));
            String _string_31 = _integer_5.toString();
            _builder.append(_string_31, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_32 = this.countaddr.toString();
            _builder.append(_string_32, "");
            _builder.append(": BGTZ R");
            String _string_33 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
            _builder.append(_string_33, "");
            _builder.append(", #ATRIBTRUE");
            _builder.newLineIfNotEmpty();
            String _string_34 = this.countaddr.toString();
            _builder.append(_string_34, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", false");
            _builder.newLineIfNotEmpty();
            _builder.append("#ATRIBTRUE:");
            _builder.newLine();
            String _string_35 = this.countaddr.toString();
            _builder.append(_string_35, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", true");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExpressionMenor(final String name, final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      UnaryExpr _unaryExpr = exp.getUnaryExpr();
      PrimaryExpr _primaryExpr = _unaryExpr.getPrimaryExpr();
      Operand _operand = _primaryExpr.getOperand();
      Literal _literal = _operand.getLiteral();
      BasicLit _basicLit = _literal.getBasicLit();
      String _string_lit = _basicLit.getString_lit();
      boolean _notEquals = (!Objects.equal(_string_lit, null));
      if (_notEquals) {
        String _string = this.countaddr.toString();
        _builder.append(_string, "");
        _builder.append(": LD R");
        String _string_1 = this.countVar.toString();
        _builder.append(_string_1, "");
        _builder.append(", ");
        UnaryExpr _unaryExpr_1 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_1 = _unaryExpr_1.getPrimaryExpr();
        Operand _operand_1 = _primaryExpr_1.getOperand();
        Literal _literal_1 = _operand_1.getLiteral();
        BasicLit _basicLit_1 = _literal_1.getBasicLit();
        String _string_lit_1 = _basicLit_1.getString_lit();
        _builder.append(_string_lit_1, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_2 = this.countaddr.toString();
        _builder.append(_string_2, "");
        _builder.append(": LD R");
        String _string_3 = this.countVar.toString();
        _builder.append(_string_3, "");
        _builder.append(", ");
        Expression_Linha _expression_Linha = exp.getExpression_Linha();
        Expression1 _expression1 = _expression_Linha.getExpression1();
        UnaryExpr _unaryExpr_2 = _expression1.getUnaryExpr();
        PrimaryExpr _primaryExpr_2 = _unaryExpr_2.getPrimaryExpr();
        Operand _operand_2 = _primaryExpr_2.getOperand();
        Literal _literal_2 = _operand_2.getLiteral();
        BasicLit _basicLit_2 = _literal_2.getBasicLit();
        String _string_lit_2 = _basicLit_2.getString_lit();
        _builder.append(_string_lit_2, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_4 = this.countaddr.toString();
        _builder.append(_string_4, "");
        _builder.append(": SUB R");
        String _string_5 = this.countVar.toString();
        _builder.append(_string_5, "");
        _builder.append(", R");
        Integer _integer = new Integer(((this.countVar).intValue() - 1));
        String _string_6 = _integer.toString();
        _builder.append(_string_6, "");
        _builder.append(" , R");
        Integer _integer_1 = new Integer(((this.countVar).intValue() - 2));
        String _string_7 = _integer_1.toString();
        _builder.append(_string_7, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_8 = this.countaddr.toString();
        _builder.append(_string_8, "");
        _builder.append(": BLTZ R");
        String _string_9 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
        _builder.append(_string_9, "");
        _builder.append(", #ATRIBTRUE");
        _builder.newLineIfNotEmpty();
        String _string_10 = this.countaddr.toString();
        _builder.append(_string_10, "");
        _builder.append(": ST ");
        _builder.append(name, "");
        _builder.append(", false");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("#ATRIBTRUE:");
        _builder.newLine();
        _builder.append(" \t");
        String _string_11 = this.countaddr.toString();
        _builder.append(_string_11, " \t");
        _builder.append(": ST ");
        _builder.append(name, " \t");
        _builder.append(", true");
        _builder.newLineIfNotEmpty();
      } else {
        UnaryExpr _unaryExpr_3 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_3 = _unaryExpr_3.getPrimaryExpr();
        Operand _operand_3 = _primaryExpr_3.getOperand();
        Literal _literal_3 = _operand_3.getLiteral();
        BasicLit _basicLit_3 = _literal_3.getBasicLit();
        String _int_lit = _basicLit_3.getInt_lit();
        boolean _notEquals_1 = (!Objects.equal(_int_lit, null));
        if (_notEquals_1) {
          String _string_12 = this.countaddr.toString();
          _builder.append(_string_12, "");
          _builder.append(": LD R");
          String _string_13 = this.countVar.toString();
          _builder.append(_string_13, "");
          _builder.append(", ");
          UnaryExpr _unaryExpr_4 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_4 = _unaryExpr_4.getPrimaryExpr();
          Operand _operand_4 = _primaryExpr_4.getOperand();
          Literal _literal_4 = _operand_4.getLiteral();
          BasicLit _basicLit_4 = _literal_4.getBasicLit();
          String _int_lit_1 = _basicLit_4.getInt_lit();
          _builder.append(_int_lit_1, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_14 = this.countaddr.toString();
          _builder.append(_string_14, "");
          _builder.append(": LD R");
          String _string_15 = this.countVar.toString();
          _builder.append(_string_15, "");
          _builder.append(", ");
          Expression_Linha _expression_Linha_1 = exp.getExpression_Linha();
          Expression1 _expression1_1 = _expression_Linha_1.getExpression1();
          UnaryExpr _unaryExpr_5 = _expression1_1.getUnaryExpr();
          PrimaryExpr _primaryExpr_5 = _unaryExpr_5.getPrimaryExpr();
          Operand _operand_5 = _primaryExpr_5.getOperand();
          Literal _literal_5 = _operand_5.getLiteral();
          BasicLit _basicLit_5 = _literal_5.getBasicLit();
          String _int_lit_2 = _basicLit_5.getInt_lit();
          _builder.append(_int_lit_2, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_16 = this.countaddr.toString();
          _builder.append(_string_16, "");
          _builder.append(": SUB R");
          String _string_17 = this.countVar.toString();
          _builder.append(_string_17, "");
          _builder.append(", R");
          Integer _integer_2 = new Integer(((this.countVar).intValue() - 1));
          String _string_18 = _integer_2.toString();
          _builder.append(_string_18, "");
          _builder.append(" , R");
          Integer _integer_3 = new Integer(((this.countVar).intValue() - 2));
          String _string_19 = _integer_3.toString();
          _builder.append(_string_19, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_20 = this.countaddr.toString();
          _builder.append(_string_20, "");
          _builder.append(": BLTZ R");
          String _string_21 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
          _builder.append(_string_21, "");
          _builder.append(", #ATRIBTRUE");
          _builder.newLineIfNotEmpty();
          String _string_22 = this.countaddr.toString();
          _builder.append(_string_22, "");
          _builder.append(": ST ");
          _builder.append(name, "");
          _builder.append(", false");
          _builder.newLineIfNotEmpty();
          _builder.append("#ATRIBTRUE:");
          _builder.newLine();
          _builder.append("\t");
          String _string_23 = this.countaddr.toString();
          _builder.append(_string_23, "\t");
          _builder.append(": ST ");
          _builder.append(name, "\t");
          _builder.append(", true");
          _builder.newLineIfNotEmpty();
        } else {
          UnaryExpr _unaryExpr_6 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_6 = _unaryExpr_6.getPrimaryExpr();
          Operand _operand_6 = _primaryExpr_6.getOperand();
          Literal _literal_6 = _operand_6.getLiteral();
          BasicLit _basicLit_6 = _literal_6.getBasicLit();
          String _float_lit = _basicLit_6.getFloat_lit();
          boolean _notEquals_2 = (!Objects.equal(_float_lit, null));
          if (_notEquals_2) {
            String _string_24 = this.countaddr.toString();
            _builder.append(_string_24, "");
            _builder.append(": LD R");
            String _string_25 = this.countVar.toString();
            _builder.append(_string_25, "");
            _builder.append(", ");
            UnaryExpr _unaryExpr_7 = exp.getUnaryExpr();
            PrimaryExpr _primaryExpr_7 = _unaryExpr_7.getPrimaryExpr();
            Operand _operand_7 = _primaryExpr_7.getOperand();
            Literal _literal_7 = _operand_7.getLiteral();
            BasicLit _basicLit_7 = _literal_7.getBasicLit();
            String _float_lit_1 = _basicLit_7.getFloat_lit();
            _builder.append(_float_lit_1, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_26 = this.countaddr.toString();
            _builder.append(_string_26, "");
            _builder.append(": LD R");
            String _string_27 = this.countVar.toString();
            _builder.append(_string_27, "");
            _builder.append(", ");
            Expression_Linha _expression_Linha_2 = exp.getExpression_Linha();
            Expression1 _expression1_2 = _expression_Linha_2.getExpression1();
            UnaryExpr _unaryExpr_8 = _expression1_2.getUnaryExpr();
            PrimaryExpr _primaryExpr_8 = _unaryExpr_8.getPrimaryExpr();
            Operand _operand_8 = _primaryExpr_8.getOperand();
            Literal _literal_8 = _operand_8.getLiteral();
            BasicLit _basicLit_8 = _literal_8.getBasicLit();
            String _float_lit_2 = _basicLit_8.getFloat_lit();
            _builder.append(_float_lit_2, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_28 = this.countaddr.toString();
            _builder.append(_string_28, "");
            _builder.append(": SUB R");
            String _string_29 = this.countVar.toString();
            _builder.append(_string_29, "");
            _builder.append(", R");
            Integer _integer_4 = new Integer(((this.countVar).intValue() - 1));
            String _string_30 = _integer_4.toString();
            _builder.append(_string_30, "");
            _builder.append(" , R");
            Integer _integer_5 = new Integer(((this.countVar).intValue() - 2));
            String _string_31 = _integer_5.toString();
            _builder.append(_string_31, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_32 = this.countaddr.toString();
            _builder.append(_string_32, "");
            _builder.append(": BLTZ R");
            String _string_33 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
            _builder.append(_string_33, "");
            _builder.append(", #ATRIBTRUE");
            _builder.newLineIfNotEmpty();
            String _string_34 = this.countaddr.toString();
            _builder.append(_string_34, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", false");
            _builder.newLineIfNotEmpty();
            _builder.append("#ATRIBTRUE:");
            _builder.newLine();
            String _string_35 = this.countaddr.toString();
            _builder.append(_string_35, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", true");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExpressionMaiorIgual(final String name, final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      UnaryExpr _unaryExpr = exp.getUnaryExpr();
      PrimaryExpr _primaryExpr = _unaryExpr.getPrimaryExpr();
      Operand _operand = _primaryExpr.getOperand();
      Literal _literal = _operand.getLiteral();
      BasicLit _basicLit = _literal.getBasicLit();
      String _string_lit = _basicLit.getString_lit();
      boolean _notEquals = (!Objects.equal(_string_lit, null));
      if (_notEquals) {
        String _string = this.countaddr.toString();
        _builder.append(_string, "");
        _builder.append(": LD R");
        String _string_1 = this.countVar.toString();
        _builder.append(_string_1, "");
        _builder.append(", ");
        UnaryExpr _unaryExpr_1 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_1 = _unaryExpr_1.getPrimaryExpr();
        Operand _operand_1 = _primaryExpr_1.getOperand();
        Literal _literal_1 = _operand_1.getLiteral();
        BasicLit _basicLit_1 = _literal_1.getBasicLit();
        String _string_lit_1 = _basicLit_1.getString_lit();
        _builder.append(_string_lit_1, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_2 = this.countaddr.toString();
        _builder.append(_string_2, "");
        _builder.append(": LD R");
        String _string_3 = this.countVar.toString();
        _builder.append(_string_3, "");
        _builder.append(", ");
        Expression_Linha _expression_Linha = exp.getExpression_Linha();
        Expression1 _expression1 = _expression_Linha.getExpression1();
        UnaryExpr _unaryExpr_2 = _expression1.getUnaryExpr();
        PrimaryExpr _primaryExpr_2 = _unaryExpr_2.getPrimaryExpr();
        Operand _operand_2 = _primaryExpr_2.getOperand();
        Literal _literal_2 = _operand_2.getLiteral();
        BasicLit _basicLit_2 = _literal_2.getBasicLit();
        String _string_lit_2 = _basicLit_2.getString_lit();
        _builder.append(_string_lit_2, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_4 = this.countaddr.toString();
        _builder.append(_string_4, "");
        _builder.append(": SUB R");
        String _string_5 = this.countVar.toString();
        _builder.append(_string_5, "");
        _builder.append(", R");
        Integer _integer = new Integer(((this.countVar).intValue() - 1));
        String _string_6 = _integer.toString();
        _builder.append(_string_6, "");
        _builder.append(" , R");
        Integer _integer_1 = new Integer(((this.countVar).intValue() - 2));
        String _string_7 = _integer_1.toString();
        _builder.append(_string_7, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_8 = this.countaddr.toString();
        _builder.append(_string_8, "");
        _builder.append(": BGEZ R");
        String _string_9 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
        _builder.append(_string_9, "");
        _builder.append(", #ATRIBTRUE");
        _builder.newLineIfNotEmpty();
        String _string_10 = this.countaddr.toString();
        _builder.append(_string_10, "");
        _builder.append(": ST ");
        _builder.append(name, "");
        _builder.append(", false");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("#ATRIBTRUE:");
        _builder.newLine();
        _builder.append(" \t");
        String _string_11 = this.countaddr.toString();
        _builder.append(_string_11, " \t");
        _builder.append(": ST ");
        _builder.append(name, " \t");
        _builder.append(", true");
        _builder.newLineIfNotEmpty();
      } else {
        UnaryExpr _unaryExpr_3 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_3 = _unaryExpr_3.getPrimaryExpr();
        Operand _operand_3 = _primaryExpr_3.getOperand();
        Literal _literal_3 = _operand_3.getLiteral();
        BasicLit _basicLit_3 = _literal_3.getBasicLit();
        String _int_lit = _basicLit_3.getInt_lit();
        boolean _notEquals_1 = (!Objects.equal(_int_lit, null));
        if (_notEquals_1) {
          String _string_12 = this.countaddr.toString();
          _builder.append(_string_12, "");
          _builder.append(": LD R");
          String _string_13 = this.countVar.toString();
          _builder.append(_string_13, "");
          _builder.append(", ");
          UnaryExpr _unaryExpr_4 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_4 = _unaryExpr_4.getPrimaryExpr();
          Operand _operand_4 = _primaryExpr_4.getOperand();
          Literal _literal_4 = _operand_4.getLiteral();
          BasicLit _basicLit_4 = _literal_4.getBasicLit();
          String _int_lit_1 = _basicLit_4.getInt_lit();
          _builder.append(_int_lit_1, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_14 = this.countaddr.toString();
          _builder.append(_string_14, "");
          _builder.append(": LD R");
          String _string_15 = this.countVar.toString();
          _builder.append(_string_15, "");
          _builder.append(", ");
          Expression_Linha _expression_Linha_1 = exp.getExpression_Linha();
          Expression1 _expression1_1 = _expression_Linha_1.getExpression1();
          UnaryExpr _unaryExpr_5 = _expression1_1.getUnaryExpr();
          PrimaryExpr _primaryExpr_5 = _unaryExpr_5.getPrimaryExpr();
          Operand _operand_5 = _primaryExpr_5.getOperand();
          Literal _literal_5 = _operand_5.getLiteral();
          BasicLit _basicLit_5 = _literal_5.getBasicLit();
          String _int_lit_2 = _basicLit_5.getInt_lit();
          _builder.append(_int_lit_2, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_16 = this.countaddr.toString();
          _builder.append(_string_16, "");
          _builder.append(": SUB R");
          String _string_17 = this.countVar.toString();
          _builder.append(_string_17, "");
          _builder.append(", R");
          Integer _integer_2 = new Integer(((this.countVar).intValue() - 1));
          String _string_18 = _integer_2.toString();
          _builder.append(_string_18, "");
          _builder.append(" , R");
          Integer _integer_3 = new Integer(((this.countVar).intValue() - 2));
          String _string_19 = _integer_3.toString();
          _builder.append(_string_19, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_20 = this.countaddr.toString();
          _builder.append(_string_20, "");
          _builder.append(": BGEZ R");
          String _string_21 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
          _builder.append(_string_21, "");
          _builder.append(", #ATRIBTRUE");
          _builder.newLineIfNotEmpty();
          String _string_22 = this.countaddr.toString();
          _builder.append(_string_22, "");
          _builder.append(": ST ");
          _builder.append(name, "");
          _builder.append(", false");
          _builder.newLineIfNotEmpty();
          _builder.append("#ATRIBTRUE:");
          _builder.newLine();
          _builder.append("\t");
          String _string_23 = this.countaddr.toString();
          _builder.append(_string_23, "\t");
          _builder.append(": ST ");
          _builder.append(name, "\t");
          _builder.append(", true");
          _builder.newLineIfNotEmpty();
        } else {
          UnaryExpr _unaryExpr_6 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_6 = _unaryExpr_6.getPrimaryExpr();
          Operand _operand_6 = _primaryExpr_6.getOperand();
          Literal _literal_6 = _operand_6.getLiteral();
          BasicLit _basicLit_6 = _literal_6.getBasicLit();
          String _float_lit = _basicLit_6.getFloat_lit();
          boolean _notEquals_2 = (!Objects.equal(_float_lit, null));
          if (_notEquals_2) {
            String _string_24 = this.countaddr.toString();
            _builder.append(_string_24, "");
            _builder.append(": LD R");
            String _string_25 = this.countVar.toString();
            _builder.append(_string_25, "");
            _builder.append(", ");
            UnaryExpr _unaryExpr_7 = exp.getUnaryExpr();
            PrimaryExpr _primaryExpr_7 = _unaryExpr_7.getPrimaryExpr();
            Operand _operand_7 = _primaryExpr_7.getOperand();
            Literal _literal_7 = _operand_7.getLiteral();
            BasicLit _basicLit_7 = _literal_7.getBasicLit();
            String _float_lit_1 = _basicLit_7.getFloat_lit();
            _builder.append(_float_lit_1, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_26 = this.countaddr.toString();
            _builder.append(_string_26, "");
            _builder.append(": LD R");
            String _string_27 = this.countVar.toString();
            _builder.append(_string_27, "");
            _builder.append(", ");
            Expression_Linha _expression_Linha_2 = exp.getExpression_Linha();
            Expression1 _expression1_2 = _expression_Linha_2.getExpression1();
            UnaryExpr _unaryExpr_8 = _expression1_2.getUnaryExpr();
            PrimaryExpr _primaryExpr_8 = _unaryExpr_8.getPrimaryExpr();
            Operand _operand_8 = _primaryExpr_8.getOperand();
            Literal _literal_8 = _operand_8.getLiteral();
            BasicLit _basicLit_8 = _literal_8.getBasicLit();
            String _float_lit_2 = _basicLit_8.getFloat_lit();
            _builder.append(_float_lit_2, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_28 = this.countaddr.toString();
            _builder.append(_string_28, "");
            _builder.append(": SUB R");
            String _string_29 = this.countVar.toString();
            _builder.append(_string_29, "");
            _builder.append(", R");
            Integer _integer_4 = new Integer(((this.countVar).intValue() - 1));
            String _string_30 = _integer_4.toString();
            _builder.append(_string_30, "");
            _builder.append(" , R");
            Integer _integer_5 = new Integer(((this.countVar).intValue() - 2));
            String _string_31 = _integer_5.toString();
            _builder.append(_string_31, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_32 = this.countaddr.toString();
            _builder.append(_string_32, "");
            _builder.append(": BGEZ R");
            String _string_33 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
            _builder.append(_string_33, "");
            _builder.append(", #ATRIBTRUE");
            _builder.newLineIfNotEmpty();
            String _string_34 = this.countaddr.toString();
            _builder.append(_string_34, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", false");
            _builder.newLineIfNotEmpty();
            _builder.append("#ATRIBTRUE:");
            _builder.newLine();
            String _string_35 = this.countaddr.toString();
            _builder.append(_string_35, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", true");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExpressionMenorIgual(final String name, final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      UnaryExpr _unaryExpr = exp.getUnaryExpr();
      PrimaryExpr _primaryExpr = _unaryExpr.getPrimaryExpr();
      Operand _operand = _primaryExpr.getOperand();
      Literal _literal = _operand.getLiteral();
      BasicLit _basicLit = _literal.getBasicLit();
      String _string_lit = _basicLit.getString_lit();
      boolean _notEquals = (!Objects.equal(_string_lit, null));
      if (_notEquals) {
        String _string = this.countaddr.toString();
        _builder.append(_string, "");
        _builder.append(": LD R");
        String _string_1 = this.countVar.toString();
        _builder.append(_string_1, "");
        _builder.append(", ");
        UnaryExpr _unaryExpr_1 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_1 = _unaryExpr_1.getPrimaryExpr();
        Operand _operand_1 = _primaryExpr_1.getOperand();
        Literal _literal_1 = _operand_1.getLiteral();
        BasicLit _basicLit_1 = _literal_1.getBasicLit();
        String _string_lit_1 = _basicLit_1.getString_lit();
        _builder.append(_string_lit_1, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_2 = this.countaddr.toString();
        _builder.append(_string_2, "");
        _builder.append(": LD R");
        String _string_3 = this.countVar.toString();
        _builder.append(_string_3, "");
        _builder.append(", ");
        Expression_Linha _expression_Linha = exp.getExpression_Linha();
        Expression1 _expression1 = _expression_Linha.getExpression1();
        UnaryExpr _unaryExpr_2 = _expression1.getUnaryExpr();
        PrimaryExpr _primaryExpr_2 = _unaryExpr_2.getPrimaryExpr();
        Operand _operand_2 = _primaryExpr_2.getOperand();
        Literal _literal_2 = _operand_2.getLiteral();
        BasicLit _basicLit_2 = _literal_2.getBasicLit();
        String _string_lit_2 = _basicLit_2.getString_lit();
        _builder.append(_string_lit_2, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_4 = this.countaddr.toString();
        _builder.append(_string_4, "");
        _builder.append(": SUB R");
        String _string_5 = this.countVar.toString();
        _builder.append(_string_5, "");
        _builder.append(", R");
        Integer _integer = new Integer(((this.countVar).intValue() - 1));
        String _string_6 = _integer.toString();
        _builder.append(_string_6, "");
        _builder.append(" , R");
        Integer _integer_1 = new Integer(((this.countVar).intValue() - 2));
        String _string_7 = _integer_1.toString();
        _builder.append(_string_7, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_8 = this.countaddr.toString();
        _builder.append(_string_8, "");
        _builder.append(": BLEZ R");
        String _string_9 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
        _builder.append(_string_9, "");
        _builder.append(", #ATRIBTRUE");
        _builder.newLineIfNotEmpty();
        String _string_10 = this.countaddr.toString();
        _builder.append(_string_10, "");
        _builder.append(": ST ");
        _builder.append(name, "");
        _builder.append(", false");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("#ATRIBTRUE:");
        _builder.newLine();
        _builder.append(" \t");
        String _string_11 = this.countaddr.toString();
        _builder.append(_string_11, " \t");
        _builder.append(": ST ");
        _builder.append(name, " \t");
        _builder.append(", true");
        _builder.newLineIfNotEmpty();
      } else {
        UnaryExpr _unaryExpr_3 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_3 = _unaryExpr_3.getPrimaryExpr();
        Operand _operand_3 = _primaryExpr_3.getOperand();
        Literal _literal_3 = _operand_3.getLiteral();
        BasicLit _basicLit_3 = _literal_3.getBasicLit();
        String _int_lit = _basicLit_3.getInt_lit();
        boolean _notEquals_1 = (!Objects.equal(_int_lit, null));
        if (_notEquals_1) {
          String _string_12 = this.countaddr.toString();
          _builder.append(_string_12, "");
          _builder.append(": LD R");
          String _string_13 = this.countVar.toString();
          _builder.append(_string_13, "");
          _builder.append(", ");
          UnaryExpr _unaryExpr_4 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_4 = _unaryExpr_4.getPrimaryExpr();
          Operand _operand_4 = _primaryExpr_4.getOperand();
          Literal _literal_4 = _operand_4.getLiteral();
          BasicLit _basicLit_4 = _literal_4.getBasicLit();
          String _int_lit_1 = _basicLit_4.getInt_lit();
          _builder.append(_int_lit_1, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_14 = this.countaddr.toString();
          _builder.append(_string_14, "");
          _builder.append(": LD R");
          String _string_15 = this.countVar.toString();
          _builder.append(_string_15, "");
          _builder.append(", ");
          Expression_Linha _expression_Linha_1 = exp.getExpression_Linha();
          Expression1 _expression1_1 = _expression_Linha_1.getExpression1();
          UnaryExpr _unaryExpr_5 = _expression1_1.getUnaryExpr();
          PrimaryExpr _primaryExpr_5 = _unaryExpr_5.getPrimaryExpr();
          Operand _operand_5 = _primaryExpr_5.getOperand();
          Literal _literal_5 = _operand_5.getLiteral();
          BasicLit _basicLit_5 = _literal_5.getBasicLit();
          String _int_lit_2 = _basicLit_5.getInt_lit();
          _builder.append(_int_lit_2, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_16 = this.countaddr.toString();
          _builder.append(_string_16, "");
          _builder.append(": SUB R");
          String _string_17 = this.countVar.toString();
          _builder.append(_string_17, "");
          _builder.append(", R");
          Integer _integer_2 = new Integer(((this.countVar).intValue() - 1));
          String _string_18 = _integer_2.toString();
          _builder.append(_string_18, "");
          _builder.append(" , R");
          Integer _integer_3 = new Integer(((this.countVar).intValue() - 2));
          String _string_19 = _integer_3.toString();
          _builder.append(_string_19, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_20 = this.countaddr.toString();
          _builder.append(_string_20, "");
          _builder.append(": BLEZ R");
          String _string_21 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
          _builder.append(_string_21, "");
          _builder.append(", #ATRIBTRUE");
          _builder.newLineIfNotEmpty();
          String _string_22 = this.countaddr.toString();
          _builder.append(_string_22, "");
          _builder.append(": ST ");
          _builder.append(name, "");
          _builder.append(", false");
          _builder.newLineIfNotEmpty();
          _builder.append("#ATRIBTRUE:");
          _builder.newLine();
          _builder.append("\t");
          String _string_23 = this.countaddr.toString();
          _builder.append(_string_23, "\t");
          _builder.append(": ST ");
          _builder.append(name, "\t");
          _builder.append(", true");
          _builder.newLineIfNotEmpty();
        } else {
          UnaryExpr _unaryExpr_6 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_6 = _unaryExpr_6.getPrimaryExpr();
          Operand _operand_6 = _primaryExpr_6.getOperand();
          Literal _literal_6 = _operand_6.getLiteral();
          BasicLit _basicLit_6 = _literal_6.getBasicLit();
          String _float_lit = _basicLit_6.getFloat_lit();
          boolean _notEquals_2 = (!Objects.equal(_float_lit, null));
          if (_notEquals_2) {
            String _string_24 = this.countaddr.toString();
            _builder.append(_string_24, "");
            _builder.append(": LD R");
            String _string_25 = this.countVar.toString();
            _builder.append(_string_25, "");
            _builder.append(", ");
            UnaryExpr _unaryExpr_7 = exp.getUnaryExpr();
            PrimaryExpr _primaryExpr_7 = _unaryExpr_7.getPrimaryExpr();
            Operand _operand_7 = _primaryExpr_7.getOperand();
            Literal _literal_7 = _operand_7.getLiteral();
            BasicLit _basicLit_7 = _literal_7.getBasicLit();
            String _float_lit_1 = _basicLit_7.getFloat_lit();
            _builder.append(_float_lit_1, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_26 = this.countaddr.toString();
            _builder.append(_string_26, "");
            _builder.append(": LD R");
            String _string_27 = this.countVar.toString();
            _builder.append(_string_27, "");
            _builder.append(", ");
            Expression_Linha _expression_Linha_2 = exp.getExpression_Linha();
            Expression1 _expression1_2 = _expression_Linha_2.getExpression1();
            UnaryExpr _unaryExpr_8 = _expression1_2.getUnaryExpr();
            PrimaryExpr _primaryExpr_8 = _unaryExpr_8.getPrimaryExpr();
            Operand _operand_8 = _primaryExpr_8.getOperand();
            Literal _literal_8 = _operand_8.getLiteral();
            BasicLit _basicLit_8 = _literal_8.getBasicLit();
            String _float_lit_2 = _basicLit_8.getFloat_lit();
            _builder.append(_float_lit_2, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_28 = this.countaddr.toString();
            _builder.append(_string_28, "");
            _builder.append(": SUB R");
            String _string_29 = this.countVar.toString();
            _builder.append(_string_29, "");
            _builder.append(", R");
            Integer _integer_4 = new Integer(((this.countVar).intValue() - 1));
            String _string_30 = _integer_4.toString();
            _builder.append(_string_30, "");
            _builder.append(" , R");
            Integer _integer_5 = new Integer(((this.countVar).intValue() - 2));
            String _string_31 = _integer_5.toString();
            _builder.append(_string_31, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_32 = this.countaddr.toString();
            _builder.append(_string_32, "");
            _builder.append(": BLEZ R");
            String _string_33 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
            _builder.append(_string_33, "");
            _builder.append(", #ATRIBTRUE");
            _builder.newLineIfNotEmpty();
            String _string_34 = this.countaddr.toString();
            _builder.append(_string_34, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", false");
            _builder.newLineIfNotEmpty();
            _builder.append("#ATRIBTRUE:");
            _builder.newLine();
            String _string_35 = this.countaddr.toString();
            _builder.append(_string_35, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", true");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExpressionEquals(final String name, final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      UnaryExpr _unaryExpr = exp.getUnaryExpr();
      PrimaryExpr _primaryExpr = _unaryExpr.getPrimaryExpr();
      Operand _operand = _primaryExpr.getOperand();
      Literal _literal = _operand.getLiteral();
      BasicLit _basicLit = _literal.getBasicLit();
      String _string_lit = _basicLit.getString_lit();
      boolean _notEquals = (!Objects.equal(_string_lit, null));
      if (_notEquals) {
        String _string = this.countaddr.toString();
        _builder.append(_string, "");
        _builder.append(": LD R");
        String _string_1 = this.countVar.toString();
        _builder.append(_string_1, "");
        _builder.append(", ");
        UnaryExpr _unaryExpr_1 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_1 = _unaryExpr_1.getPrimaryExpr();
        Operand _operand_1 = _primaryExpr_1.getOperand();
        Literal _literal_1 = _operand_1.getLiteral();
        BasicLit _basicLit_1 = _literal_1.getBasicLit();
        String _string_lit_1 = _basicLit_1.getString_lit();
        _builder.append(_string_lit_1, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_2 = this.countaddr.toString();
        _builder.append(_string_2, "");
        _builder.append(": LD R");
        String _string_3 = this.countVar.toString();
        _builder.append(_string_3, "");
        _builder.append(", ");
        Expression_Linha _expression_Linha = exp.getExpression_Linha();
        Expression1 _expression1 = _expression_Linha.getExpression1();
        UnaryExpr _unaryExpr_2 = _expression1.getUnaryExpr();
        PrimaryExpr _primaryExpr_2 = _unaryExpr_2.getPrimaryExpr();
        Operand _operand_2 = _primaryExpr_2.getOperand();
        Literal _literal_2 = _operand_2.getLiteral();
        BasicLit _basicLit_2 = _literal_2.getBasicLit();
        String _string_lit_2 = _basicLit_2.getString_lit();
        _builder.append(_string_lit_2, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_4 = this.countaddr.toString();
        _builder.append(_string_4, "");
        _builder.append(": BQE R");
        String _string_5 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
        _builder.append(_string_5, "");
        _builder.append(",  R");
        String _string_6 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
        _builder.append(_string_6, "");
        _builder.append(", #ATRIBTRUE");
        _builder.newLineIfNotEmpty();
        String _string_7 = this.countaddr.toString();
        _builder.append(_string_7, "");
        _builder.append(": ST ");
        _builder.append(name, "");
        _builder.append(", false");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("#ATRIBTRUE:");
        _builder.newLine();
        _builder.append(" \t");
        String _string_8 = this.countaddr.toString();
        _builder.append(_string_8, " \t");
        _builder.append(": ST ");
        _builder.append(name, " \t");
        _builder.append(", true");
        _builder.newLineIfNotEmpty();
      } else {
        UnaryExpr _unaryExpr_3 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_3 = _unaryExpr_3.getPrimaryExpr();
        Operand _operand_3 = _primaryExpr_3.getOperand();
        Literal _literal_3 = _operand_3.getLiteral();
        BasicLit _basicLit_3 = _literal_3.getBasicLit();
        String _int_lit = _basicLit_3.getInt_lit();
        boolean _notEquals_1 = (!Objects.equal(_int_lit, null));
        if (_notEquals_1) {
          String _string_9 = this.countaddr.toString();
          _builder.append(_string_9, "");
          _builder.append(": LD R");
          String _string_10 = this.countVar.toString();
          _builder.append(_string_10, "");
          _builder.append(", ");
          UnaryExpr _unaryExpr_4 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_4 = _unaryExpr_4.getPrimaryExpr();
          Operand _operand_4 = _primaryExpr_4.getOperand();
          Literal _literal_4 = _operand_4.getLiteral();
          BasicLit _basicLit_4 = _literal_4.getBasicLit();
          String _int_lit_1 = _basicLit_4.getInt_lit();
          _builder.append(_int_lit_1, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_11 = this.countaddr.toString();
          _builder.append(_string_11, "");
          _builder.append(": LD R");
          String _string_12 = this.countVar.toString();
          _builder.append(_string_12, "");
          _builder.append(", ");
          Expression_Linha _expression_Linha_1 = exp.getExpression_Linha();
          Expression1 _expression1_1 = _expression_Linha_1.getExpression1();
          UnaryExpr _unaryExpr_5 = _expression1_1.getUnaryExpr();
          PrimaryExpr _primaryExpr_5 = _unaryExpr_5.getPrimaryExpr();
          Operand _operand_5 = _primaryExpr_5.getOperand();
          Literal _literal_5 = _operand_5.getLiteral();
          BasicLit _basicLit_5 = _literal_5.getBasicLit();
          String _int_lit_2 = _basicLit_5.getInt_lit();
          _builder.append(_int_lit_2, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_13 = this.countaddr.toString();
          _builder.append(_string_13, "");
          _builder.append(": BQE R");
          String _string_14 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
          _builder.append(_string_14, "");
          _builder.append(",  R");
          String _string_15 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
          _builder.append(_string_15, "");
          _builder.append(", #ATRIBTRUE");
          _builder.newLineIfNotEmpty();
          String _string_16 = this.countaddr.toString();
          _builder.append(_string_16, "");
          _builder.append(": ST ");
          _builder.append(name, "");
          _builder.append(", false");
          _builder.newLineIfNotEmpty();
          _builder.append("#ATRIBTRUE:");
          _builder.newLine();
          _builder.append("\t");
          String _string_17 = this.countaddr.toString();
          _builder.append(_string_17, "\t");
          _builder.append(": ST ");
          _builder.append(name, "\t");
          _builder.append(", true");
          _builder.newLineIfNotEmpty();
        } else {
          UnaryExpr _unaryExpr_6 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_6 = _unaryExpr_6.getPrimaryExpr();
          Operand _operand_6 = _primaryExpr_6.getOperand();
          Literal _literal_6 = _operand_6.getLiteral();
          BasicLit _basicLit_6 = _literal_6.getBasicLit();
          String _float_lit = _basicLit_6.getFloat_lit();
          boolean _notEquals_2 = (!Objects.equal(_float_lit, null));
          if (_notEquals_2) {
            String _string_18 = this.countaddr.toString();
            _builder.append(_string_18, "");
            _builder.append(": LD R");
            String _string_19 = this.countVar.toString();
            _builder.append(_string_19, "");
            _builder.append(", ");
            UnaryExpr _unaryExpr_7 = exp.getUnaryExpr();
            PrimaryExpr _primaryExpr_7 = _unaryExpr_7.getPrimaryExpr();
            Operand _operand_7 = _primaryExpr_7.getOperand();
            Literal _literal_7 = _operand_7.getLiteral();
            BasicLit _basicLit_7 = _literal_7.getBasicLit();
            String _float_lit_1 = _basicLit_7.getFloat_lit();
            _builder.append(_float_lit_1, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_20 = this.countaddr.toString();
            _builder.append(_string_20, "");
            _builder.append(": LD R");
            String _string_21 = this.countVar.toString();
            _builder.append(_string_21, "");
            _builder.append(", ");
            Expression_Linha _expression_Linha_2 = exp.getExpression_Linha();
            Expression1 _expression1_2 = _expression_Linha_2.getExpression1();
            UnaryExpr _unaryExpr_8 = _expression1_2.getUnaryExpr();
            PrimaryExpr _primaryExpr_8 = _unaryExpr_8.getPrimaryExpr();
            Operand _operand_8 = _primaryExpr_8.getOperand();
            Literal _literal_8 = _operand_8.getLiteral();
            BasicLit _basicLit_8 = _literal_8.getBasicLit();
            String _float_lit_2 = _basicLit_8.getFloat_lit();
            _builder.append(_float_lit_2, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_22 = this.countaddr.toString();
            _builder.append(_string_22, "");
            _builder.append(": BQE R");
            String _string_23 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
            _builder.append(_string_23, "");
            _builder.append(",  R");
            String _string_24 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
            _builder.append(_string_24, "");
            _builder.append(", #ATRIBTRUE");
            _builder.newLineIfNotEmpty();
            String _string_25 = this.countaddr.toString();
            _builder.append(_string_25, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", false");
            _builder.newLineIfNotEmpty();
            _builder.append("#ATRIBTRUE:");
            _builder.newLine();
            _builder.append("\t");
            String _string_26 = this.countaddr.toString();
            _builder.append(_string_26, "\t");
            _builder.append(": ST ");
            _builder.append(name, "\t");
            _builder.append(", true");
            _builder.newLineIfNotEmpty();
          } else {
            UnaryExpr _unaryExpr_9 = exp.getUnaryExpr();
            PrimaryExpr _primaryExpr_9 = _unaryExpr_9.getPrimaryExpr();
            Operand _operand_9 = _primaryExpr_9.getOperand();
            OperandName _operandName = _operand_9.getOperandName();
            String _id = _operandName.getId();
            boolean _equals = _id.equals("true");
            if (_equals) {
              String _string_27 = this.countaddr.toString();
              _builder.append(_string_27, "");
              _builder.append(": LD R");
              String _string_28 = this.countVar.toString();
              _builder.append(_string_28, "");
              _builder.append(", ");
              UnaryExpr _unaryExpr_10 = exp.getUnaryExpr();
              PrimaryExpr _primaryExpr_10 = _unaryExpr_10.getPrimaryExpr();
              Operand _operand_10 = _primaryExpr_10.getOperand();
              OperandName _operandName_1 = _operand_10.getOperandName();
              String _id_1 = _operandName_1.getId();
              _builder.append(_id_1, "");
              _builder.newLineIfNotEmpty();
              this.increment();
              _builder.newLineIfNotEmpty();
              this.nextAddress();
              _builder.newLineIfNotEmpty();
              String _string_29 = this.countaddr.toString();
              _builder.append(_string_29, "");
              _builder.append(": LD R");
              String _string_30 = this.countVar.toString();
              _builder.append(_string_30, "");
              _builder.append(", ");
              Expression_Linha _expression_Linha_3 = exp.getExpression_Linha();
              Expression1 _expression1_3 = _expression_Linha_3.getExpression1();
              UnaryExpr _unaryExpr_11 = _expression1_3.getUnaryExpr();
              PrimaryExpr _primaryExpr_11 = _unaryExpr_11.getPrimaryExpr();
              Operand _operand_11 = _primaryExpr_11.getOperand();
              OperandName _operandName_2 = _operand_11.getOperandName();
              String _id_2 = _operandName_2.getId();
              _builder.append(_id_2, "");
              _builder.newLineIfNotEmpty();
              this.increment();
              _builder.newLineIfNotEmpty();
              this.nextAddress();
              _builder.newLineIfNotEmpty();
              String _string_31 = this.countaddr.toString();
              _builder.append(_string_31, "");
              _builder.append(": BQE R");
              String _string_32 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
              _builder.append(_string_32, "");
              _builder.append(",  R");
              String _string_33 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
              _builder.append(_string_33, "");
              _builder.append(", #ATRIBTRUE");
              _builder.newLineIfNotEmpty();
              String _string_34 = this.countaddr.toString();
              _builder.append(_string_34, "");
              _builder.append(": ST ");
              _builder.append(name, "");
              _builder.append(", false");
              _builder.newLineIfNotEmpty();
              _builder.append("#ATRIBTRUE:");
              _builder.newLine();
              _builder.append("\t\t");
              String _string_35 = this.countaddr.toString();
              _builder.append(_string_35, "\t\t");
              _builder.append(": ST ");
              _builder.append(name, "\t\t");
              _builder.append(", true");
              _builder.newLineIfNotEmpty();
            } else {
              UnaryExpr _unaryExpr_12 = exp.getUnaryExpr();
              PrimaryExpr _primaryExpr_12 = _unaryExpr_12.getPrimaryExpr();
              Operand _operand_12 = _primaryExpr_12.getOperand();
              OperandName _operandName_3 = _operand_12.getOperandName();
              String _id_3 = _operandName_3.getId();
              boolean _equals_1 = _id_3.equals("false");
              if (_equals_1) {
                String _string_36 = this.countaddr.toString();
                _builder.append(_string_36, "");
                _builder.append(": LD R");
                String _string_37 = this.countVar.toString();
                _builder.append(_string_37, "");
                _builder.append(", ");
                UnaryExpr _unaryExpr_13 = exp.getUnaryExpr();
                PrimaryExpr _primaryExpr_13 = _unaryExpr_13.getPrimaryExpr();
                Operand _operand_13 = _primaryExpr_13.getOperand();
                OperandName _operandName_4 = _operand_13.getOperandName();
                String _id_4 = _operandName_4.getId();
                _builder.append(_id_4, "");
                _builder.newLineIfNotEmpty();
                this.increment();
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
                String _string_38 = this.countaddr.toString();
                _builder.append(_string_38, "");
                _builder.append(": LD R");
                String _string_39 = this.countVar.toString();
                _builder.append(_string_39, "");
                _builder.append(", ");
                Expression_Linha _expression_Linha_4 = exp.getExpression_Linha();
                Expression1 _expression1_4 = _expression_Linha_4.getExpression1();
                UnaryExpr _unaryExpr_14 = _expression1_4.getUnaryExpr();
                PrimaryExpr _primaryExpr_14 = _unaryExpr_14.getPrimaryExpr();
                Operand _operand_14 = _primaryExpr_14.getOperand();
                OperandName _operandName_5 = _operand_14.getOperandName();
                String _id_5 = _operandName_5.getId();
                _builder.append(_id_5, "");
                _builder.newLineIfNotEmpty();
                this.increment();
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
                String _string_40 = this.countaddr.toString();
                _builder.append(_string_40, "");
                _builder.append(": BQE R");
                String _string_41 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
                _builder.append(_string_41, "");
                _builder.append(",  R");
                String _string_42 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
                _builder.append(_string_42, "");
                _builder.append(", #ATRIBTRUE");
                _builder.newLineIfNotEmpty();
                String _string_43 = this.countaddr.toString();
                _builder.append(_string_43, "");
                _builder.append(": ST ");
                _builder.append(name, "");
                _builder.append(", false");
                _builder.newLineIfNotEmpty();
                _builder.append("#ATRIBTRUE:");
                _builder.newLine();
                _builder.append("\t\t");
                String _string_44 = this.countaddr.toString();
                _builder.append(_string_44, "\t\t");
                _builder.append(": ST ");
                _builder.append(name, "\t\t");
                _builder.append(", true");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExpressionNotEquals(final String name, final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      UnaryExpr _unaryExpr = exp.getUnaryExpr();
      PrimaryExpr _primaryExpr = _unaryExpr.getPrimaryExpr();
      Operand _operand = _primaryExpr.getOperand();
      Literal _literal = _operand.getLiteral();
      BasicLit _basicLit = _literal.getBasicLit();
      String _string_lit = _basicLit.getString_lit();
      boolean _notEquals = (!Objects.equal(_string_lit, null));
      if (_notEquals) {
        String _string = this.countaddr.toString();
        _builder.append(_string, "");
        _builder.append(": LD R");
        String _string_1 = this.countVar.toString();
        _builder.append(_string_1, "");
        _builder.append(", ");
        UnaryExpr _unaryExpr_1 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_1 = _unaryExpr_1.getPrimaryExpr();
        Operand _operand_1 = _primaryExpr_1.getOperand();
        Literal _literal_1 = _operand_1.getLiteral();
        BasicLit _basicLit_1 = _literal_1.getBasicLit();
        String _string_lit_1 = _basicLit_1.getString_lit();
        _builder.append(_string_lit_1, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_2 = this.countaddr.toString();
        _builder.append(_string_2, "");
        _builder.append(": LD R");
        String _string_3 = this.countVar.toString();
        _builder.append(_string_3, "");
        _builder.append(", ");
        Expression_Linha _expression_Linha = exp.getExpression_Linha();
        Expression1 _expression1 = _expression_Linha.getExpression1();
        UnaryExpr _unaryExpr_2 = _expression1.getUnaryExpr();
        PrimaryExpr _primaryExpr_2 = _unaryExpr_2.getPrimaryExpr();
        Operand _operand_2 = _primaryExpr_2.getOperand();
        Literal _literal_2 = _operand_2.getLiteral();
        BasicLit _basicLit_2 = _literal_2.getBasicLit();
        String _string_lit_2 = _basicLit_2.getString_lit();
        _builder.append(_string_lit_2, "");
        _builder.newLineIfNotEmpty();
        this.increment();
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
        String _string_4 = this.countaddr.toString();
        _builder.append(_string_4, "");
        _builder.append(": BNE R");
        String _string_5 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
        _builder.append(_string_5, "");
        _builder.append(",  R");
        String _string_6 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
        _builder.append(_string_6, "");
        _builder.append(", #ATRIBTRUE");
        _builder.newLineIfNotEmpty();
        String _string_7 = this.countaddr.toString();
        _builder.append(_string_7, "");
        _builder.append(": ST ");
        _builder.append(name, "");
        _builder.append(", false");
        _builder.newLineIfNotEmpty();
        _builder.append("#ATRIBTRUE:");
        _builder.newLine();
        _builder.append("\t\t");
        String _string_8 = this.countaddr.toString();
        _builder.append(_string_8, "\t\t");
        _builder.append(": ST ");
        _builder.append(name, "\t\t");
        _builder.append(", true");
        _builder.newLineIfNotEmpty();
      } else {
        UnaryExpr _unaryExpr_3 = exp.getUnaryExpr();
        PrimaryExpr _primaryExpr_3 = _unaryExpr_3.getPrimaryExpr();
        Operand _operand_3 = _primaryExpr_3.getOperand();
        Literal _literal_3 = _operand_3.getLiteral();
        BasicLit _basicLit_3 = _literal_3.getBasicLit();
        String _int_lit = _basicLit_3.getInt_lit();
        boolean _notEquals_1 = (!Objects.equal(_int_lit, null));
        if (_notEquals_1) {
          String _string_9 = this.countaddr.toString();
          _builder.append(_string_9, "");
          _builder.append(": LD R");
          String _string_10 = this.countVar.toString();
          _builder.append(_string_10, "");
          _builder.append(", ");
          UnaryExpr _unaryExpr_4 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_4 = _unaryExpr_4.getPrimaryExpr();
          Operand _operand_4 = _primaryExpr_4.getOperand();
          Literal _literal_4 = _operand_4.getLiteral();
          BasicLit _basicLit_4 = _literal_4.getBasicLit();
          String _int_lit_1 = _basicLit_4.getInt_lit();
          _builder.append(_int_lit_1, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_11 = this.countaddr.toString();
          _builder.append(_string_11, "");
          _builder.append(": LD R");
          String _string_12 = this.countVar.toString();
          _builder.append(_string_12, "");
          _builder.append(", ");
          Expression_Linha _expression_Linha_1 = exp.getExpression_Linha();
          Expression1 _expression1_1 = _expression_Linha_1.getExpression1();
          UnaryExpr _unaryExpr_5 = _expression1_1.getUnaryExpr();
          PrimaryExpr _primaryExpr_5 = _unaryExpr_5.getPrimaryExpr();
          Operand _operand_5 = _primaryExpr_5.getOperand();
          Literal _literal_5 = _operand_5.getLiteral();
          BasicLit _basicLit_5 = _literal_5.getBasicLit();
          String _int_lit_2 = _basicLit_5.getInt_lit();
          _builder.append(_int_lit_2, "");
          _builder.newLineIfNotEmpty();
          this.increment();
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
          String _string_13 = this.countaddr.toString();
          _builder.append(_string_13, "");
          _builder.append(": BNE R");
          String _string_14 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
          _builder.append(_string_14, "");
          _builder.append(",  R");
          String _string_15 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
          _builder.append(_string_15, "");
          _builder.append(", #ATRIBTRUE");
          _builder.newLineIfNotEmpty();
          String _string_16 = this.countaddr.toString();
          _builder.append(_string_16, "");
          _builder.append(": ST ");
          _builder.append(name, "");
          _builder.append(", false");
          _builder.newLineIfNotEmpty();
          _builder.append("#ATRIBTRUE:");
          _builder.newLine();
          _builder.append("\t");
          String _string_17 = this.countaddr.toString();
          _builder.append(_string_17, "\t");
          _builder.append(": ST ");
          _builder.append(name, "\t");
          _builder.append(", true");
          _builder.newLineIfNotEmpty();
        } else {
          UnaryExpr _unaryExpr_6 = exp.getUnaryExpr();
          PrimaryExpr _primaryExpr_6 = _unaryExpr_6.getPrimaryExpr();
          Operand _operand_6 = _primaryExpr_6.getOperand();
          Literal _literal_6 = _operand_6.getLiteral();
          BasicLit _basicLit_6 = _literal_6.getBasicLit();
          String _float_lit = _basicLit_6.getFloat_lit();
          boolean _notEquals_2 = (!Objects.equal(_float_lit, null));
          if (_notEquals_2) {
            String _string_18 = this.countaddr.toString();
            _builder.append(_string_18, "");
            _builder.append(": LD R");
            String _string_19 = this.countVar.toString();
            _builder.append(_string_19, "");
            _builder.append(", ");
            UnaryExpr _unaryExpr_7 = exp.getUnaryExpr();
            PrimaryExpr _primaryExpr_7 = _unaryExpr_7.getPrimaryExpr();
            Operand _operand_7 = _primaryExpr_7.getOperand();
            Literal _literal_7 = _operand_7.getLiteral();
            BasicLit _basicLit_7 = _literal_7.getBasicLit();
            String _float_lit_1 = _basicLit_7.getFloat_lit();
            _builder.append(_float_lit_1, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_20 = this.countaddr.toString();
            _builder.append(_string_20, "");
            _builder.append(": LD R");
            String _string_21 = this.countVar.toString();
            _builder.append(_string_21, "");
            _builder.append(", ");
            Expression_Linha _expression_Linha_2 = exp.getExpression_Linha();
            Expression1 _expression1_2 = _expression_Linha_2.getExpression1();
            UnaryExpr _unaryExpr_8 = _expression1_2.getUnaryExpr();
            PrimaryExpr _primaryExpr_8 = _unaryExpr_8.getPrimaryExpr();
            Operand _operand_8 = _primaryExpr_8.getOperand();
            Literal _literal_8 = _operand_8.getLiteral();
            BasicLit _basicLit_8 = _literal_8.getBasicLit();
            String _float_lit_2 = _basicLit_8.getFloat_lit();
            _builder.append(_float_lit_2, "");
            _builder.newLineIfNotEmpty();
            this.increment();
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
            String _string_22 = this.countaddr.toString();
            _builder.append(_string_22, "");
            _builder.append(": BNE R");
            String _string_23 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
            _builder.append(_string_23, "");
            _builder.append(",  R");
            String _string_24 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
            _builder.append(_string_24, "");
            _builder.append(", #ATRIBTRUE");
            _builder.newLineIfNotEmpty();
            String _string_25 = this.countaddr.toString();
            _builder.append(_string_25, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", false");
            _builder.newLineIfNotEmpty();
            _builder.append("#ATRIBTRUE:");
            _builder.newLine();
            String _string_26 = this.countaddr.toString();
            _builder.append(_string_26, "");
            _builder.append(": ST ");
            _builder.append(name, "");
            _builder.append(", true");
            _builder.newLineIfNotEmpty();
          } else {
            UnaryExpr _unaryExpr_9 = exp.getUnaryExpr();
            PrimaryExpr _primaryExpr_9 = _unaryExpr_9.getPrimaryExpr();
            Operand _operand_9 = _primaryExpr_9.getOperand();
            OperandName _operandName = _operand_9.getOperandName();
            String _id = _operandName.getId();
            boolean _equals = _id.equals("true");
            if (_equals) {
              String _string_27 = this.countaddr.toString();
              _builder.append(_string_27, "");
              _builder.append(": LD R");
              String _string_28 = this.countVar.toString();
              _builder.append(_string_28, "");
              _builder.append(", ");
              UnaryExpr _unaryExpr_10 = exp.getUnaryExpr();
              PrimaryExpr _primaryExpr_10 = _unaryExpr_10.getPrimaryExpr();
              Operand _operand_10 = _primaryExpr_10.getOperand();
              OperandName _operandName_1 = _operand_10.getOperandName();
              String _id_1 = _operandName_1.getId();
              _builder.append(_id_1, "");
              _builder.newLineIfNotEmpty();
              this.increment();
              _builder.newLineIfNotEmpty();
              this.nextAddress();
              _builder.newLineIfNotEmpty();
              String _string_29 = this.countaddr.toString();
              _builder.append(_string_29, "");
              _builder.append(": LD R");
              String _string_30 = this.countVar.toString();
              _builder.append(_string_30, "");
              _builder.append(", ");
              Expression_Linha _expression_Linha_3 = exp.getExpression_Linha();
              Expression1 _expression1_3 = _expression_Linha_3.getExpression1();
              UnaryExpr _unaryExpr_11 = _expression1_3.getUnaryExpr();
              PrimaryExpr _primaryExpr_11 = _unaryExpr_11.getPrimaryExpr();
              Operand _operand_11 = _primaryExpr_11.getOperand();
              OperandName _operandName_2 = _operand_11.getOperandName();
              String _id_2 = _operandName_2.getId();
              _builder.append(_id_2, "");
              _builder.newLineIfNotEmpty();
              this.increment();
              _builder.newLineIfNotEmpty();
              this.nextAddress();
              _builder.newLineIfNotEmpty();
              String _string_31 = this.countaddr.toString();
              _builder.append(_string_31, "");
              _builder.append(": BNE R");
              String _string_32 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
              _builder.append(_string_32, "");
              _builder.append(",  R");
              String _string_33 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
              _builder.append(_string_33, "");
              _builder.append(", #ATRIBTRUE");
              _builder.newLineIfNotEmpty();
              String _string_34 = this.countaddr.toString();
              _builder.append(_string_34, "");
              _builder.append(": ST ");
              _builder.append(name, "");
              _builder.append(", false");
              _builder.newLineIfNotEmpty();
              _builder.append("#ATRIBTRUE:");
              _builder.newLine();
              _builder.append("\t");
              String _string_35 = this.countaddr.toString();
              _builder.append(_string_35, "\t");
              _builder.append(": ST ");
              _builder.append(name, "\t");
              _builder.append(", true");
              _builder.newLineIfNotEmpty();
            } else {
              UnaryExpr _unaryExpr_12 = exp.getUnaryExpr();
              PrimaryExpr _primaryExpr_12 = _unaryExpr_12.getPrimaryExpr();
              Operand _operand_12 = _primaryExpr_12.getOperand();
              OperandName _operandName_3 = _operand_12.getOperandName();
              String _id_3 = _operandName_3.getId();
              boolean _equals_1 = _id_3.equals("false");
              if (_equals_1) {
                String _string_36 = this.countaddr.toString();
                _builder.append(_string_36, "");
                _builder.append(": LD R");
                String _string_37 = this.countVar.toString();
                _builder.append(_string_37, "");
                _builder.append(", ");
                UnaryExpr _unaryExpr_13 = exp.getUnaryExpr();
                PrimaryExpr _primaryExpr_13 = _unaryExpr_13.getPrimaryExpr();
                Operand _operand_13 = _primaryExpr_13.getOperand();
                OperandName _operandName_4 = _operand_13.getOperandName();
                String _id_4 = _operandName_4.getId();
                _builder.append(_id_4, "");
                _builder.newLineIfNotEmpty();
                this.increment();
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
                String _string_38 = this.countaddr.toString();
                _builder.append(_string_38, "");
                _builder.append(": LD R");
                String _string_39 = this.countVar.toString();
                _builder.append(_string_39, "");
                _builder.append(", ");
                Expression_Linha _expression_Linha_4 = exp.getExpression_Linha();
                Expression1 _expression1_4 = _expression_Linha_4.getExpression1();
                UnaryExpr _unaryExpr_14 = _expression1_4.getUnaryExpr();
                PrimaryExpr _primaryExpr_14 = _unaryExpr_14.getPrimaryExpr();
                Operand _operand_14 = _primaryExpr_14.getOperand();
                OperandName _operandName_5 = _operand_14.getOperandName();
                String _id_5 = _operandName_5.getId();
                _builder.append(_id_5, "");
                _builder.newLineIfNotEmpty();
                this.increment();
                _builder.newLineIfNotEmpty();
                this.nextAddress();
                _builder.newLineIfNotEmpty();
                String _string_40 = this.countaddr.toString();
                _builder.append(_string_40, "");
                _builder.append(": BNE R");
                String _string_41 = Integer.valueOf(((this.countVar).intValue() - 1)).toString();
                _builder.append(_string_41, "");
                _builder.append(",  R");
                String _string_42 = Integer.valueOf(((this.countVar).intValue() - 2)).toString();
                _builder.append(_string_42, "");
                _builder.append(", #ATRIBTRUE");
                _builder.newLineIfNotEmpty();
                String _string_43 = this.countaddr.toString();
                _builder.append(_string_43, "");
                _builder.append(": ST ");
                _builder.append(name, "");
                _builder.append(", false");
                _builder.newLineIfNotEmpty();
                _builder.append("#ATRIBTRUE:");
                _builder.newLine();
                _builder.append("\t");
                String _string_44 = this.countaddr.toString();
                _builder.append(_string_44, "\t");
                _builder.append(": ST ");
                _builder.append(name, "\t");
                _builder.append(", true");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExpressionArit(final Expression exp, final String name, final String operador) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = this.countaddr.toString();
    _builder.append(_string, "");
    _builder.append(": LD R");
    String _string_1 = this.countVar.toString();
    _builder.append(_string_1, "");
    _builder.append(", #");
    UnaryExpr _unaryExpr = exp.getUnaryExpr();
    PrimaryExpr _primaryExpr = _unaryExpr.getPrimaryExpr();
    Operand _operand = _primaryExpr.getOperand();
    _builder.append(_operand, "");
    _builder.newLineIfNotEmpty();
    this.increment();
    _builder.newLineIfNotEmpty();
    this.nextAddress();
    _builder.newLineIfNotEmpty();
    String _string_2 = this.countaddr.toString();
    _builder.append(_string_2, "");
    _builder.append(": LD R");
    String _string_3 = this.countVar.toString();
    _builder.append(_string_3, "");
    _builder.append(", #");
    Expression_Linha _expression_Linha = exp.getExpression_Linha();
    Expression1 _expression1 = _expression_Linha.getExpression1();
    UnaryExpr _unaryExpr_1 = _expression1.getUnaryExpr();
    PrimaryExpr _primaryExpr_1 = _unaryExpr_1.getPrimaryExpr();
    Operand _operand_1 = _primaryExpr_1.getOperand();
    _builder.append(_operand_1, "");
    _builder.newLineIfNotEmpty();
    this.increment();
    _builder.newLineIfNotEmpty();
    this.nextAddress();
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = operador.equals("+");
      if (_equals) {
        String _string_4 = this.countaddr.toString();
        _builder.append(_string_4, "");
        _builder.append(": ADD R");
        Integer _integer = new Integer(((this.countVar).intValue() - 2));
        String _string_5 = _integer.toString();
        _builder.append(_string_5, "");
        _builder.append(", R");
        Integer _integer_1 = new Integer(((this.countVar).intValue() - 1));
        String _string_6 = _integer_1.toString();
        _builder.append(_string_6, "");
        _builder.append(" , R");
        Integer _integer_2 = new Integer(((this.countVar).intValue() - 2));
        String _string_7 = _integer_2.toString();
        _builder.append(_string_7, "");
        _builder.newLineIfNotEmpty();
        this.nextAddress();
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equals_1 = operador.equals("*");
        if (_equals_1) {
          String _string_8 = this.countaddr.toString();
          _builder.append(_string_8, "");
          _builder.append(": MUL R");
          Integer _integer_3 = new Integer(((this.countVar).intValue() - 2));
          String _string_9 = _integer_3.toString();
          _builder.append(_string_9, "");
          _builder.append(", R");
          Integer _integer_4 = new Integer(((this.countVar).intValue() - 1));
          String _string_10 = _integer_4.toString();
          _builder.append(_string_10, "");
          _builder.append(" , R");
          Integer _integer_5 = new Integer(((this.countVar).intValue() - 2));
          String _string_11 = _integer_5.toString();
          _builder.append(_string_11, "");
          _builder.newLineIfNotEmpty();
          this.nextAddress();
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equals_2 = operador.equals("/");
          if (_equals_2) {
            String _string_12 = this.countaddr.toString();
            _builder.append(_string_12, "");
            _builder.append(": DIV R");
            Integer _integer_6 = new Integer(((this.countVar).intValue() - 2));
            String _string_13 = _integer_6.toString();
            _builder.append(_string_13, "");
            _builder.append(", R");
            Integer _integer_7 = new Integer(((this.countVar).intValue() - 1));
            String _string_14 = _integer_7.toString();
            _builder.append(_string_14, "");
            _builder.append(" , R");
            Integer _integer_8 = new Integer(((this.countVar).intValue() - 2));
            String _string_15 = _integer_8.toString();
            _builder.append(_string_15, "");
            _builder.newLineIfNotEmpty();
            this.nextAddress();
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_3 = operador.equals("-");
            if (_equals_3) {
              String _string_16 = this.countaddr.toString();
              _builder.append(_string_16, "");
              _builder.append(": SUB R");
              Integer _integer_9 = new Integer(((this.countVar).intValue() - 2));
              String _string_17 = _integer_9.toString();
              _builder.append(_string_17, "");
              _builder.append(", R");
              Integer _integer_10 = new Integer(((this.countVar).intValue() - 1));
              String _string_18 = _integer_10.toString();
              _builder.append(_string_18, "");
              _builder.append(" , R");
              Integer _integer_11 = new Integer(((this.countVar).intValue() - 2));
              String _string_19 = _integer_11.toString();
              _builder.append(_string_19, "");
              _builder.newLineIfNotEmpty();
              this.nextAddress();
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("\t");
    String _string_20 = this.countaddr.toString();
    _builder.append(_string_20, "\t");
    _builder.append(": ST ");
    _builder.append(name, "\t");
    _builder.append(", R");
    Integer _integer_12 = new Integer(((this.countVar).intValue() - 2));
    String _string_21 = _integer_12.toString();
    _builder.append(_string_21, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    this.nextAddress();
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    this.increment();
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
