/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.AliasDecl
import org.xtext.example.mydsl.myDsl.Block
import org.xtext.example.mydsl.myDsl.ConstDecl
import org.xtext.example.mydsl.myDsl.ConstSpec
import org.xtext.example.mydsl.myDsl.Declaration
import org.xtext.example.mydsl.myDsl.ExprCaseClause
import org.xtext.example.mydsl.myDsl.Expression
import org.xtext.example.mydsl.myDsl.FunctionBody
import org.xtext.example.mydsl.myDsl.MethodDecl
import org.xtext.example.mydsl.myDsl.SourceFile
import org.xtext.example.mydsl.myDsl.Statement
import org.xtext.example.mydsl.myDsl.StatementList
import org.xtext.example.mydsl.myDsl.SwitchStmt
import org.xtext.example.mydsl.myDsl.TopLevelDecl
import org.xtext.example.mydsl.myDsl.TypeDecl
import org.xtext.example.mydsl.myDsl.TypeDef
import org.xtext.example.mydsl.myDsl.TypeSpec
import org.xtext.example.mydsl.myDsl.VarDecl
import org.xtext.example.mydsl.myDsl.VarSpec

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	Integer countVar = 1;
	Integer countaddr = 0;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		countVar = 1;
		countaddr = 0;
		for (e : resource.allContents.toIterable.filter(SourceFile)) {
			fsa.generateFile(e.topLevelDecl.toString() + ".txt", e.compile)
		}
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	}

	def compile(SourceFile sourceFile) '''
		«countaddr»: LD SP, 1000
		«nextAddress»
		«FOR topLeveDecl: sourceFile.topLevelDecl»
			«genField(topLeveDecl)»
		«ENDFOR»
	'''
	
	def genField(TopLevelDecl topLevelDecl)'''
		«IF topLevelDecl.declaration instanceof Declaration»
			«(topLevelDecl.declaration as Declaration).genDeclaration»
		«ELSEIF topLevelDecl.methodDecl instanceof MethodDecl»
			«(topLevelDecl.methodDecl as MethodDecl).genMethodDecl»
		«ENDIF»	
	'''
	
	def genMethodDecl(MethodDecl declaration) '''
		«IF declaration.functionBody != null»
			«declaration.methodName»:
			«genFunctionBody(declaration.functionBody)»
		«ENDIF»
		
	'''
	def genFunctionBody(FunctionBody functioBody) '''
		«IF functioBody.block != null»
			«genBlock(functioBody.block)»
		«ENDIF»
		
	'''
	def genBlock(Block block) '''
		«IF block.statementList != null»
			«genStatementList(block.statementList)»
		«ENDIF»
		
	'''

	def genStatementList(StatementList statementList) '''
		«IF statementList.statements != null»
			«FOR actualStatment : statementList.statements»
					«genStatement(actualStatment)»
			«ENDFOR»
		«ENDIF»
	'''
	def genStatement(Statement statement)'''
		«IF statement.switchStmt != null»
			«genSwicthStmt(statement.switchStmt)»
		«ELSEIF statement.declaration != null»
			«genDeclaration(statement.declaration)»
		«ENDIF»
	'''
	
	def genSwicthStmt(SwitchStmt switchStmt)'''
		«IF switchStmt.exprSwitchStmt != null»
			«IF switchStmt.exprSwitchStmt.simpleStmt != null»
				«IF switchStmt.exprSwitchStmt.simpleStmt.shortVarDecl != null»
					«genExpression(switchStmt.exprSwitchStmt.simpleStmt.shortVarDecl.expressionList.expression, switchStmt.exprSwitchStmt.simpleStmt.shortVarDecl.identifierList.id)»
					«countaddr.toString()»: LD R«countVar.toString()», «switchStmt.exprSwitchStmt.simpleStmt.shortVarDecl.identifierList.id»
					«increment»
					«nextAddress»
				«ENDIF»
			«ENDIF»
			«IF switchStmt.exprSwitchStmt.exprCaseClause != null»
				«FOR exprCaseClause: switchStmt.exprSwitchStmt.exprCaseClause»
					«genExprCaseClause(exprCaseClause)»
				«ENDFOR»
			«ENDIF»
		«ENDIF»
	'''
	def genExprCaseClause(ExprCaseClause exprCaseClause)'''
		«IF exprCaseClause.exprSwitchCase.expressionList != null»
			«IF exprCaseClause.exprSwitchCase.expressionList.expression.unaryExpr.primaryExpr.operand.literal != null»
				«countaddr.toString()»: LD R«countVar.toString()», «exprCaseClause.exprSwitchCase.expressionList.expression.unaryExpr.primaryExpr.operand.literal.basicLit»
				«increment»
				«countaddr.toString()»: BQE R«(countVar-2).toString()»,  R«(countVar-1).toString()», #EXECUTE
				#EXECUTE:
			 «ELSE»
			 	«countaddr.toString()»: LD R«countVar.toString()», «exprCaseClause.exprSwitchCase.expressionList.expression.unaryExpr.primaryExpr.operand.operandName»
			 	«increment»
			 	«countaddr.toString()»: BQE R«(countVar-2).toString()»,  R«(countVar-1).toString()», #EXECUTE
			 	#EXECUTE:
			 «ENDIF»
		«ELSE»
			DEFAULT:
		«ENDIF»
	'''
	

	def genType(TypeDecl typeDecl) '''
		«IF typeDecl.typeSpec != null»
			«(typeDecl.typeSpec as TypeSpec).genTypeSpec»
		«ELSEIF typeDecl.typeSpec1 != null»
			«FOR typeSpec: typeDecl.typeSpec1»
				«genTypeSpec(typeSpec)»
			«ENDFOR»
		«ENDIF»
	'''

	def genTypeSpec(TypeSpec typeSpec) '''
		«IF typeSpec.aliasDecl != null»
			«(typeSpec.aliasDecl as AliasDecl).genAliasDecl»
		«ELSEIF (typeSpec.typeDef != null)»
			«(typeSpec.typeDef as TypeDef).genTypeDef»
		«ENDIF»
	'''

	def genAliasDecl(AliasDecl aliasDecl) '''
		«IF !aliasDecl.id.empty»
			«countaddr.toString()»: LD R«countVar.toString()», «aliasDecl.id»
			«increment»
			«nextAddress»
		«ENDIF»
	'''

	def genTypeDef(TypeDef typeDef) '''
		«IF !typeDef.id.empty»
			«countaddr.toString()»: LD R«countVar.toString()», «typeDef.id»
			«increment»
			«nextAddress»
		«ENDIF»
	'''

	def genDeclaration(Declaration decl) '''
		«IF decl.constDecl instanceof ConstDecl»
			«(decl.constDecl as ConstDecl).genConst»
		«ELSEIF decl.typeDecl instanceof TypeDecl»
			«(decl.typeDecl as TypeDecl).genType»
		«ELSEIF decl.varDecl instanceof VarDecl»
			«(decl.varDecl as VarDecl).genVar»
		«ENDIF»
	'''

	def genVar(VarDecl varDecl) '''
		«IF varDecl.varSpec != null»
			«(varDecl.varSpec as VarSpec).genVarSpec»
		«ELSEIF varDecl.varSpec1 != null»
			«FOR varSpec : varDecl.varSpec1»
				«genVarSpec(varSpec)»
			«ENDFOR»
		«ENDIF»
	'''

	def genVarSpec(VarSpec varSpec) '''
		«IF varSpec.expressionList != null»
			«IF !varSpec.identifierList.id.empty»
				«genExpression(varSpec.expressionList.expression, varSpec.identifierList.id)»
			«ENDIF»
			
			«IF varSpec.identifierList.id1 != null»
				«FOR id: varSpec.identifierList.id1»
					«countaddr.toString()»: LD R«countVar.toString()», #TRUE
					«increment»
					«nextAddress»
					«countaddr.toString()»: ST «varSpec.identifierList.id», R«new Integer(countVar-1).toString()»
					«nextAddress»
				«ENDFOR»
			«ENDIF»
		«ELSE»
			«IF !varSpec.identifierList.id.empty»
				«countaddr.toString()»: LD R«countVar.toString()», «varSpec.identifierList.id»
				«increment»
				«nextAddress»
			«ENDIF»
			
			«IF varSpec.identifierList.id1 != null»
				«FOR id: varSpec.identifierList.id1»
					«countaddr.toString()»: LD R«countVar.toString()», «id»
					«increment»
					«nextAddress»
				«ENDFOR»
			«ENDIF»
		«ENDIF»
	'''

	def genConst(ConstDecl constDecl) '''
		«IF constDecl.constSpec != null»
			«(constDecl.constSpec as ConstSpec).genConstSpec»
		«ELSEIF constDecl.constSpec1 != null»
			«FOR constSpec : constDecl.constSpec1»
				«genConstSpec(constSpec)»
			«ENDFOR»
		«ENDIF»
	'''

	def genConstSpec(ConstSpec spec) '''
		«IF spec.expressionList != null»
			«IF !spec.identifierList.id.empty»
				«genExpression(spec.expressionList.expression, spec.identifierList.id)»
			«ENDIF»
			
				«IF spec.identifierList.id1 != null»
					«FOR id: spec.identifierList.id1»
						«countaddr.toString()»: LD R«countVar.toString()», #TRUE
						«increment»
						«nextAddress»
						«countaddr.toString()»: ST «id», R«new Integer(countVar-1).toString()»
						«nextAddress»
					«ENDFOR»
				«ENDIF»
		«ELSE»
			«IF !spec.identifierList.id.empty»
				«countaddr.toString()»: LD R«countVar.toString()», «spec.identifierList.id»
				«increment»
				«nextAddress»
			«ENDIF»
			
			«IF spec.identifierList.id1 != null»
				«FOR id: spec.identifierList.id1»
					«countaddr.toString()»: LD R«countVar.toString()», «id»
					«increment»
					«nextAddress»
				«ENDFOR»
			«ENDIF»
		«ENDIF»
	'''

	def void nextAddress() {
		countaddr = countaddr + 8;
	}

	def void increment() {
		countVar++;
	}

	def genExpression(Expression exp, String name) '''
	«IF exp.expression_Linha.BINARY_OP != null»
		«IF exp.expression_Linha.BINARY_OP.REL_OP != null»
			«genExpressionRelop(exp, name)»
		«ELSEIF exp.expression_Linha.BINARY_OP.ADD_OP != null»
			«genExpressionArit(exp, name,  exp.expression_Linha.BINARY_OP.ADD_OP)»
		«ENDIF»
	«ENDIF»
	'''

	def genExpressionRelop(Expression exp, String name) '''
		«IF exp.expression_Linha.BINARY_OP.REL_OP.equals("==")»
			«genExpressionEquals(name, exp)»
		«ELSEIF exp.expression_Linha.BINARY_OP.REL_OP.equals("!=")»
			«genExpressionNotEquals(name, exp)»
		«ELSEIF exp.expression_Linha.BINARY_OP.REL_OP.equals(">")»
			«genExpressionMaior(name, exp)»
		«ELSEIF exp.expression_Linha.BINARY_OP.REL_OP.equals("<")»
			«genExpressionMenor(name, exp)»
		«ELSEIF exp.expression_Linha.BINARY_OP.REL_OP.equals(">=")»
			«genExpressionMaiorIgual(name, exp)»
		«ELSE»
			«genExpressionMenorIgual(name, exp)»
		«ENDIF»
			
	'''
	
	def genExpressionMaior(String name, Expression exp)'''
	«IF exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit != null»
				«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
				«increment»
				«nextAddress»
				«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
				«increment»
				«nextAddress»
				«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
				«increment»
				«nextAddress»
				«countaddr.toString()»: BGTZ R«(countVar-1).toString()», #ATRIBTRUE
				«countaddr.toString()»: ST «name», false
				 #ATRIBTRUE:
				 	«countaddr.toString()»: ST «name», true
			«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit != null»
				«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
				«increment»
				«nextAddress»
				«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
				«increment»
				«nextAddress»
				«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
				«increment»
				«nextAddress»
				«countaddr.toString()»: BGTZ R«(countVar-1).toString()», #ATRIBTRUE
				«countaddr.toString()»: ST «name», false
				#ATRIBTRUE:
					«countaddr.toString()»: ST «name», true
			«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit != null»
				«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
				«increment»
				«nextAddress»
				«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
				«increment»
				«nextAddress»
				«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
				«increment»
				«nextAddress»
				«countaddr.toString()»: BGTZ R«(countVar-1).toString()», #ATRIBTRUE
				«countaddr.toString()»: ST «name», false
				#ATRIBTRUE:
				«countaddr.toString()»: ST «name», true
			«ENDIF»
	'''
	
	def genExpressionMenor(String name, Expression exp)'''
		«IF exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit != null»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
						«increment»
						«nextAddress»
						«countaddr.toString()»: BLTZ R«(countVar-1).toString()», #ATRIBTRUE
						«countaddr.toString()»: ST «name», false
						 #ATRIBTRUE:
						 	«countaddr.toString()»: ST «name», true
					«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit != null»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
						«increment»
						«nextAddress»
						«countaddr.toString()»: BLTZ R«(countVar-1).toString()», #ATRIBTRUE
						«countaddr.toString()»: ST «name», false
						#ATRIBTRUE:
							«countaddr.toString()»: ST «name», true
					«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit != null»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
						«increment»
						«nextAddress»
						«countaddr.toString()»: BLTZ R«(countVar-1).toString()», #ATRIBTRUE
						«countaddr.toString()»: ST «name», false
						#ATRIBTRUE:
						«countaddr.toString()»: ST «name», true
					«ENDIF»
	'''
	
	def genExpressionMaiorIgual(String name, Expression exp)'''
	«IF exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit != null»
					«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
					«increment»
					«nextAddress»
					«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
					«increment»
					«nextAddress»
					«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
					«increment»
					«nextAddress»
					«countaddr.toString()»: BGEZ R«(countVar-1).toString()», #ATRIBTRUE
					«countaddr.toString()»: ST «name», false
					 #ATRIBTRUE:
					 	«countaddr.toString()»: ST «name», true
				«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit != null»
					«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
					«increment»
					«nextAddress»
					«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
					«increment»
					«nextAddress»
					«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
					«increment»
					«nextAddress»
					«countaddr.toString()»: BGEZ R«(countVar-1).toString()», #ATRIBTRUE
					«countaddr.toString()»: ST «name», false
					#ATRIBTRUE:
						«countaddr.toString()»: ST «name», true
				«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit != null»
					«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
					«increment»
					«nextAddress»
					«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
					«increment»
					«nextAddress»
					«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
					«increment»
					«nextAddress»
					«countaddr.toString()»: BGEZ R«(countVar-1).toString()», #ATRIBTRUE
					«countaddr.toString()»: ST «name», false
					#ATRIBTRUE:
					«countaddr.toString()»: ST «name», true
				«ENDIF»
	'''
	
	def genExpressionMenorIgual(String name, Expression exp)'''
		«IF exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit != null»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
						«increment»
						«nextAddress»
						«countaddr.toString()»: BLEZ R«(countVar-1).toString()», #ATRIBTRUE
						«countaddr.toString()»: ST «name», false
						 #ATRIBTRUE:
						 	«countaddr.toString()»: ST «name», true
					«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit != null»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
						«increment»
						«nextAddress»
						«countaddr.toString()»: BLEZ R«(countVar-1).toString()», #ATRIBTRUE
						«countaddr.toString()»: ST «name», false
						#ATRIBTRUE:
							«countaddr.toString()»: ST «name», true
					«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit != null»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
						«increment»
						«nextAddress»
						«countaddr.toString()»: SUB R«countVar.toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
						«increment»
						«nextAddress»
						«countaddr.toString()»: BLEZ R«(countVar-1).toString()», #ATRIBTRUE
						«countaddr.toString()»: ST «name», false
						#ATRIBTRUE:
						«countaddr.toString()»: ST «name», true
					«ENDIF»
	'''

	def genExpressionEquals(String name, Expression exp) '''
		«IF exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit != null»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BQE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			 #ATRIBTRUE:
			 	«countaddr.toString()»: ST «name», true
		«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit != null»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BQE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
				«countaddr.toString()»: ST «name», true
		«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit != null»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BQE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
				«countaddr.toString()»: ST «name», true
		«ELSEIF exp.unaryExpr.primaryExpr.operand.operandName.id.equals("true")»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.operandName.id»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.operandName.id»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BQE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
					«countaddr.toString()»: ST «name», true
		«ELSEIF exp.unaryExpr.primaryExpr.operand.operandName.id.equals("false")»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.operandName.id»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.operandName.id»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BQE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
					«countaddr.toString()»: ST «name», true
		«ENDIF»
	'''

	def genExpressionNotEquals(String name, Expression exp) '''
		«IF exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit != null»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.string_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BNE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
					«countaddr.toString()»: ST «name», true
		«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit != null»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.int_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BNE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
				«countaddr.toString()»: ST «name», true
		«ELSEIF exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit != null»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.literal.basicLit.float_lit»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BNE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
			«countaddr.toString()»: ST «name», true
		«ELSEIF exp.unaryExpr.primaryExpr.operand.operandName.id.equals("true")»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.operandName.id»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.operandName.id»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BNE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
				«countaddr.toString()»: ST «name», true
		«ELSEIF exp.unaryExpr.primaryExpr.operand.operandName.id.equals("false")»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.unaryExpr.primaryExpr.operand.operandName.id»
			«increment»
			«nextAddress»
			«countaddr.toString()»: LD R«countVar.toString()», «exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand.operandName.id»
			«increment»
			«nextAddress»
			«countaddr.toString()»: BNE R«(countVar-1).toString()»,  R«(countVar-2).toString()», #ATRIBTRUE
			«countaddr.toString()»: ST «name», false
			#ATRIBTRUE:
				«countaddr.toString()»: ST «name», true
		«ENDIF»
	'''
	
	def genExpressionArit(Expression exp, String name, String operador)'''
		«countaddr.toString()»: LD R«countVar.toString()», #«exp.unaryExpr.primaryExpr.operand»
		«increment»
		«nextAddress»
		«countaddr.toString()»: LD R«countVar.toString()», #«exp.expression_Linha.expression1.unaryExpr.primaryExpr.operand»
		«increment»
		«nextAddress»
		«IF operador.equals("+")»
			«countaddr.toString()»: ADD R«new Integer(countVar-2).toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
			«nextAddress»
		«ELSEIF operador.equals("*")»
				«countaddr.toString()»: MUL R«new Integer(countVar-2).toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
				«nextAddress»
		«ELSEIF operador.equals("/")»
				«countaddr.toString()»: DIV R«new Integer(countVar-2).toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
				«nextAddress»
		«ELSEIF operador.equals("-")»
				«countaddr.toString()»: SUB R«new Integer(countVar-2).toString()», R«new Integer(countVar-1).toString()» , R«new Integer(countVar-2).toString()»
				«nextAddress»
		«ENDIF»
			«countaddr.toString()»: ST «name», R«new Integer(countVar-2).toString()»
			«nextAddress»
			«increment»
	'''
}
