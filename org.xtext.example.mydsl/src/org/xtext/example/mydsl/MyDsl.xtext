grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

Model:
	greetings+=Greeting*;
	
Greeting:
	SourceFile;

terminal NEWLINE:
	"\n" | "\r" | "\n\r"
;


terminal LETTER:
	"a".."z" | "A" .."Z"| "_" 
;

terminal DECIMAL_DIGIT:
	"0".. "9"
;

terminal OCTAL_DIGIT:
	"0" .. "7"
;

terminal HEX_DIGIT:
	"0" .. "9" | "A" .. "F" | "a" .. "f"
;

terminal BREAK:
	"break"
;
terminal DEFAULT:
	"default"
;
terminal FUNC:
	"func"
;
terminal INTERFACE:
	"interface"
;
terminal SELECT:
	"select"
;
terminal CASE:
	"case"
;
terminal DEFER:
	"defer"
;
terminal GO:
	"go"
;
terminal MAP:
	"map"
;
terminal STRUCT:
	"struct"
;
terminal CHAN:
	"chan"
;
terminal ELSE:
	"else"
;
terminal GOTO:
	"goto"
;
terminal PACKAGE:
	"package"
;
terminal SWITCH:
	"switch"
;
terminal CONST:
	"const"
;
terminal FALLTHROUGH:
	"fallthrough"
;
terminal IF:
	"if"
;
terminal RANGE:
	"range"
;
terminal TYPEKEYWORD:
	"type"
;
terminal CONTINUE:
	"continue"
;
terminal FOR:
	"for"
;
terminal IMPORT:
	"import"
;
terminal RETURN: 
	"return"
;
terminal VAR: 
	"var"
;
terminal IDENTIFIER:
	LETTER ( LETTER | ("0".."9") )*
;

terminal UNICODE_CHAR:
	"fazeer"
;

terminal INT_LIT:
	( ('1'..'9') DECIMAL_DIGIT*)
	| "0" (OCTAL_DIGIT)*
    | ( '0' ('x'|"X") HEX_DIGIT+)
;

FLOAT_LIT:
	DECIMALS "." (DECIMALS )? ( EXPONENT )? |
    DECIMALS EXPONENT |
   "." DECIMALS ( EXPONENT )? 
;

terminal DECIMALS:
     INT
;

terminal EXPONENT:
    ("e"|"E")('+'|'-')? DECIMALS
;

IMAGINARY_LIT:
	(DECIMALS | FLOAT_LIT) "i" 
;

terminal RUNE_LIT:
	 "'" ( UNICODE_VALUE | BYTE_VALUE ) "'" ;

terminal UNICODE_VALUE:
	UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR
;

terminal BYTE_VALUE:
	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE
;

terminal OCTAL_BYTE_VALUE:
	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT
;

terminal HEX_BYTE_VALUE:
	'\\' "x" HEX_DIGIT HEX_DIGIT
;
terminal LITTLE_U_VALUE:
	'\\' "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
;
terminal BIG_U_VALUE:
	'\\' "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
	
;
terminal ESCAPED_CHAR:
	  '\\' ("a" | "b" | "f" | "n" | "r" | "t" | "v"  | '\\' | "'" | '"')
;

terminal STRING_LIT:
	RAW_STRING_LIT | INTERPRETED_STRING_LIT
;

terminal RAW_STRING_LIT:
	"'" ( UNICODE_CHAR | NEWLINE )* "'"
;

terminal INTERPRETED_STRING_LIT:
	'"' (UNICODE_VALUE | BYTE_VALUE)* '"'
;

Type: 
	TypeName | TypeLit | "(" Type ")"
;

TypeName: 
	IDENTIFIER TypeNameLinha
;

TypeNameLinha:
	"." IDENTIFIER |  ANY_OTHER
;

TypeLit: 
	 "[" TypeLitLinha | StructType | PointerType | FunctionType | InterfaceType |
	  MapType | ChannelType
;

TypeLitLinha:
	ArrayLength "]" ElementType 
	| "]" ElementType
;

ArrayLength: 
	Expression
;

ElementType: 
	Type
;

StructType: 
	STRUCT "{"  (FieldDecl ";")* "}"
;

FieldDecl:
	(IdentifierList Type | EmbeddedField) (Tag)?
;

EmbeddedField: 
	("*")? TypeName
;

Tag: 
	STRING_LIT
;

PointerType:
	"*" BaseType
;

BaseType:
	Type
;

FunctionType: 
	FUNC Signature
;

Signature: 
	(Parameters)(=>Result)?
;

Result: 
	(=>Parameters) | Type
;
Parameters:
	"(" (ParameterList (",")?)? ")"
;

ParameterList:
	ParameterDecl ("," ParameterDecl)*
;

ParameterDecl:
	(IdentifierList)? ("...")? Type
;

InterfaceType: 
	INTERFACE "{" (MethodSpec ";")* "}"
;

MethodSpec: 
	MethodName Signature | InterfaceTypeName
;

MethodName: 
	IDENTIFIER
;

InterfaceTypeName: 
	TypeName
;

MapType:
	MAP "[" KeyType "]" ElementType
;

KeyType:
	Type
;

ChannelType: 
	( CHAN ChannelTypeLinha | "<-" CHAN) ElementType
;

ChannelTypeLinha:
	"<-" | ANY_OTHER
;

Block: 
	"{" StatementList "}"
;

StatementList: 
	( Statement ";")*
;

Declaration: 
	ConstDecl | TypeDecl | VarDecl
;

TopLevelDecl: 
	Declaration | FunctionDecl | MethodDecl
;

ConstDecl: 
	CONST ( ConstSpec | "(" (ConstSpec ";")* ")" )
;

ConstSpec: 
	IdentifierList ((Type)? "=" ExpressionList)?
;

IdentifierList: 
	IDENTIFIER( "," IDENTIFIER )*
;

ExpressionList: 
	Expression ("," Expression)*
;

TypeDecl: 
	TYPEKEYWORD (TypeSpec | "(" (TypeSpec ";")* ")")
;

TypeSpec: 
	AliasDecl | TypeDef
;

AliasDecl: 
	IDENTIFIER "=" Type
;

TypeDef: 
	IDENTIFIER Type
;

VarDecl: 
	VAR (VarSpec | "(" (VarSpec ";")* ")" )
;

VarSpec: 
	IdentifierList ( Type ( "=" ExpressionList)? | "=" ExpressionList )
;

ShortVarDecl:
	IdentifierList ":=" ExpressionList
;

FunctionDecl:
	FUNC FunctionName Signature (FunctionBody)?
;

FunctionName: 
	IDENTIFIER
;

FunctionBody: 
	Block
;

MethodDecl: 
	FUNC Receiver MethodName Signature (FunctionBody)?
;

Receiver: 
	Parameters
;

Operand: 
	Literal | OperandName | "(" Expression ")"
;

Literal:
	BasicLit | CompositeLit | FunctionLit
;

BasicLit:
	   INT_LIT | FLOAT_LIT | IMAGINARY_LIT | STRING_LIT
;

OperandName: 
	IDENTIFIER OperandNameLinha
;

OperandNameLinha:
	"." IDENTIFIER |  ANY_OTHER
;

CompositeLit: 
	LiteralType LiteralValue
;

LiteralType: 
	StructType | MapType | TypeName | "[" LiteralTypeLinha
;

LiteralTypeLinha:
	ArrayLength "]" ElementType | "..." "]" ElementType | "]" ElementType
;

LiteralValue: 
	"{" ( ElementList ( "," )? )? "}"
;

ElementList: 
	KeyedElement ( "," KeyedElement)*
;

KeyedElement: 
	(=>(Key":")?) Element
;

Key: 
	FieldName | Expression | LiteralValue
;

FieldName: 
	IDENTIFIER
;

Element: 
	Expression | LiteralValue
;

FunctionLit: 
	FUNC Signature FunctionBody
;

PrimaryExpr: 
	BasicLit PrimaryExprLinha |
	StructType PrimaryExpr4 PrimaryExprLinha |
	MapType PrimaryExpr4 PrimaryExprLinha |
	IDENTIFIER TypeNameLinha PrimaryExpr5 PrimaryExprLinha |
	"[" PrimaryExpr6 PrimaryExprLinha |
	FUNC Signature PrimaryExpr7 PrimaryExprLinha|
	PointerType PrimaryExpr1 PrimaryExprLinha| 
	InterfaceType PrimaryExpr1 PrimaryExprLinha|
	ChannelType PrimaryExpr1 PrimaryExprLinha|
	"(" PrimaryExpr3 PrimaryExprLinha
	
	/*BasicLit PrimaryExprLinha |
	StructType LiteralValue PrimaryExprLinha|
	MapType LiteralValue PrimaryExprLinha|
	TypeName LiteralValue PrimaryExprLinha|
	"[" LiteralTypeLinha LiteralValue PrimaryExprLinha|
	FunctionLit PrimaryExprLinha |
	"[" TypeLitLinha PrimaryExpr1 PrimaryExprLinha|
	StructType PrimaryExpr1 PrimaryExprLinha|
	PointerType PrimaryExpr1 PrimaryExprLinha|
	FunctionType PrimaryExpr1 PrimaryExprLinha|
	InterfaceType PrimaryExpr1 PrimaryExprLinha|
	MapType PrimaryExpr1 PrimaryExprLinha|
	ChannelType PrimaryExpr1 PrimaryExprLinha|
	"(" PrimaryExpr3 PrimaryExprLinha |
	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha*/
	
	/*BasicLit PrimaryExprLinha |
	(StructType | MapType | TypeName | "[" LiteralTypeLinha) LiteralValue PrimaryExprLinha |
	FunctionLit PrimaryExprLinha |
	"[" TypeLitLinha PrimaryExpr1 PrimaryExprLinha|
	StructType PrimaryExpr1 PrimaryExprLinha|
	PointerType PrimaryExpr1 PrimaryExprLinha|
	FunctionType PrimaryExpr1 PrimaryExprLinha|
	InterfaceType PrimaryExpr1 PrimaryExprLinha|
	MapType PrimaryExpr1 PrimaryExprLinha|
	ChannelType PrimaryExpr1 PrimaryExprLinha|
	"(" PrimaryExpr3 PrimaryExprLinha |
	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha*/
	
	/*(BasicLit | CompositeLit | FunctionLit) PrimaryExprLinha |
	( "[" TypeLitLinha | StructType | PointerType | FunctionType | InterfaceType |
	  MapType | ChannelType) PrimaryExpr1 PrimaryExprLinha |
	"(" PrimaryExpr3 PrimaryExprLinha |
	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha*/
	
	
	/*Literal PrimaryExprLinha |
	TypeLit PrimaryExpr1 PrimaryExprLinha |
	"(" PrimaryExpr3 PrimaryExprLinha |
	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha*/
	
	/*(Literal | "(" Expression ")") PrimaryExprLinha|
	(TypeLit |  "(" Type ")") PrimaryExpr1 PrimaryExprLinha |
	IDENTIFIER TypeNameLinha PrimaryExpr2 PrimaryExprLinha*/
	
	/*(Literal | IDENTIFIER OperandNameLinha | "(" Expression ")") PrimaryExprLinha|
	(IDENTIFIER TypeNameLinha | TypeLit | "(" Type ")") PrimaryExpr1 PrimaryExprLinha*/
	
	/*(Literal | OperandName | "(" Expression ")") PrimaryExprLinha | 
	Type "(" Expression ( "," )? ")" PrimaryExprLinha |
	Type "." MethodName PrimaryExprLinha*/
	 
	 /*Operand PrimaryExprLinha | Conversion PrimaryExprLinha | MethodExpr PrimaryExprLinha */
;

PrimaryExpr1:
	"(" Expression ( "," )? ")" | "." MethodName
;

PrimaryExpr2:
	 PrimaryExpr1 | ANY_OTHER 
;

PrimaryExpr3:
	(=>Expression ")") | Type ")" PrimaryExpr1
;

PrimaryExpr4:
	LiteralValue | PrimaryExpr1
;

PrimaryExpr5:
	LiteralValue | PrimaryExpr2
;

PrimaryExpr6:
	ArrayLength "]" ElementType PrimaryExpr4 |
	"..." "]" ElementType LiteralValue| 
	"]" ElementType PrimaryExpr4
	/*(ArrayLength "]" ElementType | "..." "]" ElementType | "]" ElementType) LiteralValue | 
	(ArrayLength "]" ElementType | "]" ElementType) PrimaryExpr1*/
;

PrimaryExpr7:
	FunctionBody | PrimaryExpr1
;

PrimaryExprLinha:
	"." PrimaryExprLinha1 PrimaryExprLinha |
	"[" PrimaryExprLinha2 PrimaryExprLinha |
	Arguments PrimaryExprLinha
	
	
	/*"." IDENTIFIER PrimaryExprLinha| "[" Expression "]" PrimaryExprLinha| 
	 * ("[" ( Expression )? ":" ( Expression )? "]" | "[" ( Expression )? ":" Expression ":" Expression "]" ) PrimaryExprLinha| 
	"." "(" Type ")"  PrimaryExprLinha| 
	* "(" ( ( ExpressionList | Type ( "," ExpressionList )? ) ( "..." )? ( "," )? )? ")"  PrimaryExprLinha*/
;

PrimaryExprLinha1:
	IDENTIFIER | "(" Type ")"
;

PrimaryExprLinha2:
	Expression PrimaryExprLinha21 | ":" PrimaryExprLinha22
	
	/*Expression "]" | 
	( Expression ) ":" ( Expression ) "]" |
	":" ( Expression ) "]" |
	( Expression ) ":" "]" |
	 ":"  "]" |
	 ( Expression ) ":" Expression ":" Expression "]"|
	 ":" Expression ":" Expression "]"*/
;

PrimaryExprLinha21:
	"]" | ":" PrimaryExprLinha211
;

PrimaryExprLinha211:
	 ( Expression ) PrimaryExprLinha2111 | "]"
;

PrimaryExprLinha2111:
	"]" | ":" Expression "]"
;


PrimaryExprLinha22:
	( Expression ) PrimaryExprLinha221 | "]"
;

PrimaryExprLinha221:
	"]" | ":" Expression "]"
;

Selector: 
	"." IDENTIFIER
;
Index: 
	"[" Expression "]"
;
Slice: 
	"[" ( Expression )? ":" ( Expression )? "]" |
     "[" ( Expression )? ":" Expression ":" Expression "]" 
;
TypeAssertion: 
	"." "(" Type ")" 
;
Arguments: 
	"(" ( ( (=>ExpressionList) | Type ( "," ExpressionList )? ) ( "..." )? ( "," )? )? ")" 
;

MethodExpr: 
	ReceiverType "." MethodName
;

ReceiverType:
	Type
;

Expression: 
	UnaryExpr Expression_Linha
;

Expression_Linha: 
	BINARY_OP Expression Expression_Linha | ANY_OTHER
;

UnaryExpr: 
	PrimaryExpr | UNARY_OP UnaryExpr
;

BINARY_OP: 
	"||" | "&&" | REL_OP | ADD_OP | MUL_OP
;

terminal REL_OP : 
	"==" | "!=" | "<" | "<=" | ">" | ">="
;
terminal ADD_OP :
	"+" | "-" | "|" | "^" 
;
terminal MUL_OP :
	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^"
;
terminal UNARY_OP: 
	"+" | "-" | "!" | "^" | "*" | "&" | "<-" 
;

Conversion: 
	Type "(" Expression ( "," )? ")"
;

Statement:
	Declaration | LabeledStmt | SimpleStmt |
	GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
	FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
	DeferStmt
;

SimpleStmt:
	 EmptyStmt | Expression SimpleStmtLinha | ShortVarDecl;

SimpleStmtLinha:
	"<-" Expression | ( "++" | "--" ) | ("," Expression)* assign_op ExpressionList | ANY_OTHER
;
EmptyStmt:
	ANY_OTHER
;

LabeledStmt:
	Label ":" Statement 
;

Label:
	IDENTIFIER
;

/*ExpressionStmt: 
	Expression
;

SendStmt:
	Channel "<-" Expression
;

Channel:
	Expression
;

IncDecStmt:
	Expression ( "++" | "--" )
;

Assignment: 
	ExpressionList assign_op ExpressionList
;*/

assign_op: 
	( ADD_OP | MUL_OP )? "="
;

IfStmt:
	IF Expression IfStmtLinha| 
	IF (( EmptyStmt | ShortVarDecl)";") Expression Block (ELSE (IfStmt | Block))?
;

IfStmtLinha:
	SimpleStmtLinha ";" Expression Block (ELSE (IfStmt | Block))? | Block (ELSE (IfStmt | Block))?
;

SwitchStmt:
	SWITCH (=>SimpleStmt ";")? SwitchStmtLinha
;

SwitchStmtLinha:
	PrimaryExpr SwitchStmtLinhaLinha |
	((UNARY_OP UnaryExpr) Expression_Linha)? "{" ( ExprCaseClause )* "}" | 
	(IDENTIFIER ":=") PrimaryExpr "." "(" TYPEKEYWORD ")" "{" (TypeCaseClause)* "}"
;

SwitchStmtLinhaLinha:
	"{" ( ExprCaseClause )* "}" | "." "(" TYPEKEYWORD ")" "{" (TypeCaseClause)* "}"
;

/*ExprSwitchStmt:
	SWITCH (SimpleStmt ";")? (Expression)? "{" ( ExprCaseClause )* "}"
;*/

ExprCaseClause:
	ExprSwitchCase ":" StatementList
;

ExprSwitchCase:
	CASE ExpressionList | DEFAULT
;

/*TypeSwitchStmt:
	SWITCH (SimpleStmt ";")? TypeSwitchGuard "{" (TypeCaseClause)* "}"	
;*/

/*TypeSwitchGuard:
	(IDENTIFIER ":=")? PrimaryExpr "." "(" TYPEKEYWORD ")"
;*/

TypeCaseClause:
	TypeSwitchCase ":" StatementList
;

TypeSwitchCase:
	CASE TypeList | DEFAULT	
;

TypeList:
	Type ("," Type)*
;

ForStmt: 
	FOR (Expression ForStmtLinha| (EmptyStmt | ShortVarDecl) ";" ( Condition ) ";" ( PostStmt ) | IdentifierList ":="  RANGE Expression)? Block
;

ForStmtLinha:
	ANY_OTHER | ("," Expression)* ForStmtLinhaLinha | ("<-" Expression | ( "++" | "--" ) | ANY_OTHER) ";" ( Condition ) ";" ( PostStmt )
;

ForStmtLinhaLinha:
	assign_op ExpressionList ";" ( Condition ) ";" ( PostStmt ) | "=" RANGE Expression
;

Condition:
	Expression
;

/*ForClause:
	( InitStmt ) ";" ( Condition ) ";" ( PostStmt )
;*/

PostStmt:
	SimpleStmt
;

/*InitStmt:
	SimpleStmt
;*/

/*RangeClause:
	( ExpressionList "=" | IdentifierList ":=" ) RANGE Expression
;*/

GoStmt:
	GO Expression
;

SelectStmt:
	SELECT "{" ( CommClause )* "}"
;

CommClause:
	CommCase ":" StatementList
;

CommCase:
	CASE ( Expression CommCaseLinha) | DEFAULT
;

CommCaseLinha:
	"<-" Expression | (("," Expression)* "=" | IdentifierList ":=" ) RecvExpr
;

/*RecvStmt:
	(ExpressionList "=" | IdentifierList ":=") RecvExpr
;*/

RecvExpr:
	Expression
;

ReturnStmt:
	RETURN ( ExpressionList )
;

BreakStmt:
	BREAK ( Label )
;

ContinueStmt:
	CONTINUE ( Label )
;

GotoStmt:
	GOTO Label
;

FallthroughStmt:
	FALLTHROUGH
;

DeferStmt:
	DEFER Expression	
;

SourceFile: 
	PackageClause ";" ( ImportDecl ";" )* ( TopLevelDecl ";" )*
;

PackageClause: 
	PACKAGE PackageName
;

PackageName: 
	IDENTIFIER
;

ImportDecl:
	IMPORT (ImportSpec | "(" ( ImportSpec ";" )* ")")
;

ImportSpec:
	("." | PackageName )? ImportPath
;

ImportPath: 
	STRING_LIT
;
